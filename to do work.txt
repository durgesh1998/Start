1. perfect binary tree
2. height of a tree
3. number of nodes in a tree
4. maximum number of nodes in a tree with height height
5. Check if two given binary trees are identical or not | Iterative & Recursive
6. Calculate height of a binary tree | Iterative & Recursive
7. Delete given Binary Tree | Iterative & Recursive
8. Inorder Tree Traversal | Iterative & Recursive
9. Preorder Tree Traversal | Iterative & Recursive
10. Postorder Tree Traversal | Iterative & Recursive
11. Level Order Traversal of Binary Tree
12. Spiral Order Traversal of Binary Tree
13. Reverse Level Order Traversal of Binary Tree
14. Print all nodes of a given binary tree in specific order
15. Print Left View of a Binary Tree
16. Print Right View of a Binary Tree
17. Print Bottom View of Binary Tree
18. Print Top View of Binary Tree
19. Find next node in same level for given node in a binary tree
20. Check if given binary tree is complete binary tree or not
21. Determine if given two nodes are cousins of each other
22. Print cousins of given node in a binary tree
23. In-place convert given binary tree to its sum tree
24. Check if given binary tree is a sum tree or not
25. Combinations of words formed by replacing given numbers with corresponding alphabets
26. Determine if given binary tree is a subtree of another binary tree or not
27. Find diameter of a binary tree
28. Check if given binary Tree has symmetric structure or not
29. Convert binary tree to its mirror
30. Check if binary tree can be converted to another by doing any no. of swaps of left & right child
31. Find Lowest Common Ancestor (LCA) of two nodes in a binary tree
32. Print all paths from root to leaf nodes in given binary tree
33. Find ancestors of given node in a Binary Tree
34. Find the distance between given pairs of nodes in a binary tree
35. Find Vertical Sum in a given Binary Tree
36. Print nodes in vertical order of a given Binary Tree (Vertical Traversal)
37. Find the diagonal sum of given binary tree
38. Print Diagonal Traversal of Binary Tree
39. Print corner nodes of every level in binary tree
40. In-place convert convert given Binary Tree to Doubly Linked List
41. Sink nodes containing zero to the bottom of the binary tree
42. Convert given binary tree to full tree by removing half nodes
43. Truncate given binary tree to remove nodes which lie on a path having sum less than K
44. Find maximum sum root-to-leaf path in a binary tree
45. Check if given binary tree is height balanced or not
46. Convert normal binary tree to Left-child right-sibling binary tree
47. Determine if given Binary Tree is a BST or not
48. Convert a Binary Tree to BST by maintaining its original structure
49. Invert given Binary Tree | Recursive and Iterative solution
50. Print leaf to root path for every leaf node in a binary tree
51. Find maximum width of given binary tree
52. Build Binary Tree from given Parent array
53. Find all nodes at given distance from leaf nodes in a binary tree
54. Count all subtrees having same value of nodes in a binary tree
55. Find Maximum Difference Between a Node and its Descendants in a Binary Tree
56. Construct a Binary Tree from Ancestor Matrix
57. Calculate height of a binary tree with leaf nodes forming a circular doubly linked list



Binary Tree

In-order Traversal of Binary Tree
Find Lowest Common Ancestor
Check if two given binary trees are identical or not | Iterative & Recursive
Calculate height of a binary tree | Iterative & Recursive
Delete given Binary Tree | Iterative & Recursive
Inorder Tree Traversal | Iterative & Recursive
Preorder Tree Traversal | Iterative & Recursive
Postorder Tree Traversal | Iterative & Recursive
Level Order Traversal of Binary Tree
Spiral Order Traversal of Binary Tree
Reverse Level Order Traversal of Binary Tree
Print all nodes of a given binary tree in specific order
Print left view of binary tree
Print Bottom View of Binary Tree
Print Top View of Binary Tree
Find next node in same level for given node in a binary tree
Check if given binary tree is complete binary tree or not
Determine if given two nodes are cousins of each other
Print cousins of given node in a binary tree
In-place convert given binary tree to its sum tree
Check if given binary tree is a sum tree or not
Combinations of words formed by replacing given numbers with corresponding English alphabets
Determine if given binary tree is a subtree of another binary tree or not
Find diameter of a binary tree
Check if given binary Tree has symmetric structure or not
Convert binary tree to its mirror
Check if binary tree can be converted to another by doing any no. of swaps of left & right child
Find Lowest Common Ancestor (LCA) of two nodes in a binary tree
Print all paths from root to leaf nodes in given binary tree
Find ancestors of given node in a Binary Tree
Find the distance between given pairs of nodes in a binary tree
Find Vertical Sum in a given Binary Tree
Print nodes in vertical order of a given Binary Tree (Vertical Traversal)
Find the diagonal sum of given binary tree
Print Diagonal Traversal of Binary Tree
Print corner nodes of every level in binary tree
In-place convert convert given Binary Tree to Doubly Linked List
Sink nodes containing zero to the bottom of the binary tree
Convert given binary tree to full tree by removing half nodes
Truncate given binary tree to remove nodes which lie on a path having sum less than K
Find maximum sum root-to-leaf path in a binary tree
Check if given binary tree is height balanced or not
Determine if given Binary Tree is a BST or not

Binary Search Tree (BST)

Insertion in BST
Search given key in BST
Deletion from BST
Construct balanced BST from given keys
Determine if given Binary Tree is a BST or not
Check if given keys represents same BSTs or not without building the BST
Find inorder predecessor for given key in a BST
Find Lowest Common Ancestor (LCA) of two nodes in a Binary Search Tree
Find K’th smallest and K’th largest element in BST
Floor and Ceil in a Binary Search Tree
Find optimal cost to construct binary search tree

Trie

Trie Implementation | Insert, Search and Delete
Memory efficient Trie Implementation using Map | Insert, Search and Delete
Longest Common Prefix in given set of strings (using Trie)
Lexicographic sorting of given set of keys
Find maximum occurring word in given set of strings
Find first k maximum occurring words in given set of strings
Find Duplicate rows in a binary matrix



Pre-order Traversal of a Binary Tree

Post-order Traversal of a Binary Tree

In-order Traversal of a Binary Tree

Binary Tree Level Order Traversal

Spiral Level Order Traversal of a Binary Tree | Set 1

Print right view of a binary tree

Print all nodes of a binary tree that do not have sibling

Print all Root to Leaf paths of a Binary Tree

Minimum Depth of a Binary Tree

Print left view of a binary tree

Find sum of all left leaves of a binary tree

Find depth of deepest odd level leaf node

Check whether a binary tree is a full binary tree or not

Check whether a binary tree is complete or not

Check if two nodes are cousins in a Binary tree

Check if two binary trees are identical

Check if all internal nodes of BST have only one child without building tree

Convert the given n-ary tree to its mirror image

Convert a binary tree to its mirror tree

Print top view of a binary tree

Print top view of a binary tree using level order traversal

Print bottom view of a binary tree

Print bottom view of a binary tree using level order traversal

Remove the nodes of binary search tree which are outside the given range

Remove all nodes which lie on path having sum less than k

Remove all the half nodes from a given binary tree

Print binary tree in vertical order

Populate right neighbors for all nodes in a binary tree

Lowest Common Ancestor of two nodes in a Binary Search Tree

In-order Successor of a Node in a Binary Tree

Recover a Binary Search Tree if positions of two nodes are swapped.

Find floor and ceiling of an element from given dataset using binary search tree

Diagonal Sum of a Binary Tree.

Create a balanced Binary Search Tree from a sorted array

Convert a sorted Doubly Linked List to Balanced Binary Search Tree

Convert a binary tree to doubly linked list

Check if a binary tree is balanced or not

Check if a binary tree is a binary search tree

Check if two binary search trees are identical given their array representations | Set 2

Check if two binary search trees are identical given their array representations

Check if a binary tree is sub-tree of another binary tree in time O(n)

Check if a binary tree is sub-tree of another binary tree in space O(1)

Binary Search tree | Insertion and Search

Binary Search tree | Deletion

Check if a given binary tree is symmetric tree or not

Check if the given n-ary tree is symmetric tree or not

Total number of possible Binary Search Trees with 'n' keys

Find the size of largest BST in a binary tree

Lowest Common Ancestor of 2 nodes in a Binary Tree

Find height of the binary tree from its parent array representation

Convert binary tree to binary search tree

Construct the binary tree from its parent array representation

Construct binary tree from inorder and preorder traversals

Construct binary tree from inorder and postorder traversals

AVL tree | Basics

AVL tree | Insertion

AVL tree | Deletion

Trie Data Structure | Insert and search

Trie Data Structure | Delete

Pattern matching using Trie

Longest Prefix Matching using Trie

Given a sequence of words, group together all anagrams and print them.

Serialize and Deserialize a binary search tree

Serialize and Deserialize a binary search tree using post order traversal



Binary Tree

Check if two given binary trees are identical or not | Iterative & Recursive
Calculate height of a binary tree | Iterative & Recursive
Delete given Binary Tree | Iterative & Recursive
Inorder Tree Traversal | Iterative & Recursive
Preorder Tree Traversal | Iterative & Recursive
Postorder Tree Traversal | Iterative & Recursive
Level Order Traversal of Binary Tree
Spiral Order Traversal of Binary Tree
Reverse Level Order Traversal of Binary Tree
Print all nodes of a given binary tree in specific order
Print left view of binary tree
Print Bottom View of Binary Tree
Print Top View of Binary Tree
Find next node in same level for given node in a binary tree
Check if given binary tree is complete binary tree or not
Determine if given two nodes are cousins of each other
Print cousins of given node in a binary tree
In-place convert given binary tree to its sum tree
Check if given binary tree is a sum tree or not
Combinations of words formed by replacing given numbers with corresponding English alphabets
Determine if given binary tree is a subtree of another binary tree or not
Find diameter of a binary tree
Check if given binary Tree has symmetric structure or not
Convert binary tree to its mirror
Check if binary tree can be converted to another by doing any no. of swaps of left & right child
Find Lowest Common Ancestor (LCA) of two nodes in a binary tree
Print all paths from root to leaf nodes in given binary tree
Find ancestors of given node in a Binary Tree
Find the distance between given pairs of nodes in a binary tree
Find Vertical Sum in a given Binary Tree
Print nodes in vertical order of a given Binary Tree (Vertical Traversal)
Find the diagonal sum of given binary tree
Print Diagonal Traversal of Binary Tree
Print corner nodes of every level in binary tree
In-place convert convert given Binary Tree to Doubly Linked List
Sink nodes containing zero to the bottom of the binary tree
Convert given binary tree to full tree by removing half nodes
Truncate given binary tree to remove nodes which lie on a path having sum less than K
Find maximum sum root-to-leaf path in a binary tree
Check if given binary tree is height balanced or not
Determine if given Binary Tree is a BST or not

Binary Search Tree (BST)

Insertion in BST
Search given key in BST
Deletion from BST
Construct balanced BST from given keys
Determine if given Binary Tree is a BST or not
Check if given keys represents same BSTs or not without building the BST
Find inorder predecessor for given key in a BST
Find Lowest Common Ancestor (LCA) of two nodes in a Binary Search Tree
Find K’th smallest and K’th largest element in BST
Floor and Ceil in a Binary Search Tree
Find optimal cost to construct binary search tree

Trie

Trie Implementation | Insert, Search and Delete
Memory efficient Trie Implementation using Map | Insert, Search and Delete
Longest Common Prefix in given set of strings (using Trie)
Lexicographic sorting of given set of keys
Find maximum occurring word in given set of strings
Find first k maximum occurring words in given set of strings
Find Duplicate rows in a binary matrix



Tree Traversals
Inorder Tree Traversal without Recursion
Inorder Tree Traversal without recursion and without stack!
Print Postorder traversal from given Inorder and Preorder traversals
Find all possible binary trees with given Inorder Traversal
Replace each node in binary tree with the sum of its inorder predecessor and successor
Populate Inorder Successor for all nodes
Inorder Successor of a node in Binary Tree
Find n-th node of inorder traversal
Level Order Tree Traversal
Level order traversal in spiral form
Level order traversal line by line
Level order traversal with direction change after every two levels
Reverse Level Order Traversal
Reverse tree path
Perfect Binary Tree Specific Level Order Traversal
Perfect Binary Tree Specific Level Order Traversal | Set 2
Reverse alternate levels of a perfect binary tree
Morris traversal for Preorder
Iterative Preorder Traversal
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
Iterative Postorder Traversal | Set 2 (Using One Stack)
Postorder traversal of Binary Tree without recursion and without stack
Diagonal Traversal of Binary Tree
Iterative diagonal traversal of binary tree
Boundary Traversal of binary tree
Density of Binary Tree in One Traversal
Calculate depth of a full Binary tree from Preorder
Number of Binary Trees for given Preorder Sequence length
Modify a binary tree to get Preorder traversal using right pointers only




Binary Tree | Set 1 (Introduction)
Binary Tree | Set 2 (Properties)
Binary Tree | Set 3 (Types of Binary Tree)
Handshaking Lemma and Interesting Tree Properties
Enumeration of Binary Trees
Insertion in a Binary Tree
Deletion in a Binary Tree
BFS vs DFS for Binary Tree
Binary Tree (Array implementation)
AVL with duplicate keys
Applications of tree data structure
Applications of Minimum Spanning Tree Problem
Continuous Tree
Foldable Binary Trees
Expression Tree
Evaluation of Expression Tree
Symmetric Tree (Mirror Image of itself)




Construct Tree from given Inorder and Preorder traversals
Construct a tree from Inorder and Level order traversals
Construct Complete Binary Tree from its Linked List Representation
Construct a complete binary tree from given array in level order fashion
Construct Full Binary Tree from given preorder and postorder traversals
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
Construct a special tree from given preorder traversal
Construct tree from ancestor matrix
Construct Ancestor Matrix from a Given Binary Tree
Construct Special Binary Tree from given Inorder traversal
Construct Binary Tree from given Parent Array representation
Construct a Binary Tree from Postorder and Inorder
Create a Doubly Linked List from a Ternary Tree
Creating a tree with Left-Child Right-Sibling Representation
Prufer Code to Tree Creation
If you are given two traversal sequences, can you construct the binary tree?
Construct the full k-ary tree from its preorder traversal
Construct Binary Tree from String with bracket representation
Linked complete binary tree & its creation
Convert a given Binary Tree to Doubly Linked List | Set 1
Convert a given Binary Tree to Doubly Linked List | Set 2
Convert a given Binary Tree to Doubly Linked List | Set 3
Convert a given Binary Tree to Doubly Linked List | Set 4
Convert an arbitrary Binary Tree to a tree that holds Children Sum Property
Convert left-right representation of a binary tree to down-right
Convert a given tree to its Sum Tree
Change a Binary Tree so that every node stores sum of all nodes in left subtree
Write an Efficient Function to Convert a Binary Tree into its Mirror Tree
Convert a Binary Tree into Doubly Linked List in spiral fashion
Convert a Binary Tree to a Circular Doubly Link List
Convert a tree to forest of even nodes
Convert a given Binary tree to a tree that holds Logical AND property
Convert Ternary Expression to a Binary Tree
Flip Binary Tree
Minimum swap required to convert binary tree to binary search tree
Checking & Printing :

Check for Children Sum Property in a Binary Tree
Check if a given Binary Tree is SumTree
Check sum of Covered and Uncovered nodes of Binary Tree
Check if two nodes are cousins in a Binary Tree
Check if all leaves are at same level
Check if removing an edge can divide a Binary Tree in two halves
Check if given Preorder, Inorder and Postorder traversals are of same tree
Given level order traversal of a Binary Tree, check if the Tree is a Min-Heap
Check if leaf traversal of two Binary Trees is same?
Check if a given Binary Tree is SumTree
Check whether a given binary tree is perfect or not
Check whether a binary tree is a full binary tree or not
Check whether a binary tree is a full binary tree or not | Iterative Approach
Check whether a given Binary Tree is Complete or not | Set 1 (Iterative Solution)
Check if a given Binary Tree is height balanced like a Red-Black Tree
Check if a binary tree is subtree of another binary tree | Set 2
Check if a Binary Tree (not BST) has duplicate values
Check if a Binary Tree contains duplicate subtrees of size 2 or more
Check if a given graph is tree or not
Check if two trees are Mirror
Iterative method to check if two trees are mirror of each other
Write Code to Determine if Two Trees are Identical
Iterative function to check if two trees are identical
Check for Symmetric Binary Tree (Iterative Approach)
Check if there is a root to leaf path with given sequence
Print middle level of perfect binary tree without finding height
Print cousins of a given node in Binary Tree
Given a binary tree, print out all of its root-to-leaf paths one per line
Print the longest leaf to leaf path in a Binary tree.
Print path from root to a given node in a binary tree
Print root to leaf paths without using recursion
Print all root to leaf paths with there relative positions
Print the nodes at odd levels of a tree
Print all full nodes in a Binary Tree
More >>

Summation :

Sum of all nodes in a binary tree
Sum of all the parent nodes having child node x
Find sum of all left leaves in a given Binary Tree
Find sum of all right leaves in a given Binary Tree
Find sum of all nodes of the given perfect binary tree
Diagonal Sum of a Binary Tree
Find if there is a pair in root to a leaf path with sum equals to root’s data
Sum of nodes on the longest path from root to leaf node
Remove all nodes which don’t lie in any path with sum>= k
Find the maximum path sum between two leaves of a binary tree
Find the maximum sum leaf to root path in a Binary Tree
Maximum sum of nodes in Binary tree such that no two are adjacent
Maximum sum from a tree with adjacent levels not allowed
Find largest subtree sum in a tree
Print all k-sum paths in a binary tree
Sum of heights of all individual nodes in a binary tree
Subtree with given sum in a Binary Tree
Count subtress that sum up to a given value x
Sum of nodes at maximum depth of a Binary Tree
Difference between sums of odd level and even level nodes of a Binary Tree
Find maximum level sum in Binary Tree
Maximum spiral sum in Binary Tree
Sum of nodes at k-th level in a tree represented as string
Sum of all leaf nodes of binary tree
Sum of leaf nodes at minimum level
Root to leaf path sum equal to a given number
Sum of all the numbers that are formed from root to leaf paths
Merge Two Binary Trees by doing Node Sum (Recursive and Iterative)
Vertical Sum in a given Binary Tree | Set 1
Vertical Sum in Binary Tree
Find root of the tree where children id sum for every node is given
Replace each node in binary tree with the sum of its inorder predecessor and successor
Find largest subtree sum in a tree


Longest Common Ancestor :

Lowest Common Ancestor in a Binary Tree | Set 1
Lowest Common Ancestor in a Binary Tree | Set 2 (Using Parent Pointer)
Lowest Common Ancestor in a Binary Tree | Set 3
Find distance between two nodes of a Binary Tree
Print common nodes on path from root (or common ancestors)
Find LCA in Binary Tree using RMQ
Maximum difference between node and its ancestor in Binary Tree
Print the path common to the two paths from the root to the two given nodes
Query for ancestor-descendant relationship in a tree
Iterative method to find ancestors of a given binary tree
Print Ancestors of a given node in Binary Tree
Kth ancestor of a node in binary tree
More >>

Misc :

Succinct Encoding of Binary Tree
Binary Indexed Tree : Range Updates and Point Queries
The Great Tree-List Recursion Problem
Custom Tree Problem
Tree Isomorphism Problem
Ways to color a skewed tree such that parent and child have different colors
Write a program to Delete a Tree
Delete leaf nodes with value as x
Non-recursive program to delete an entire binary tree
Write a program to Calculate Size of a tree
Iterative program to Calculate Size of a tree
Write a Program to Find the Maximum Depth or Height of a Tree
Iterative Method to find Height of Binary Tree
Height of a complete binary tree (or Heap) with N nodes
Height of binary tree considering even level leaves only
Find Height of Binary Tree represented by Parent array
How to determine if a binary tree is height-balanced?
Find height of a special binary tree whose leaf nodes are connected
Height of a generic tree from parent array
Diameter of a Binary Tree
Diameter of a Binary Tree in O(n) [A new method]
Possible edges of a tree for given diameter, height and vertices
Deepest right leaf node in a binary tree | Iterative approach
Sink Odd nodes in Binary Tree
Depth of the deepest odd level node in Binary Tree
Find depth of the deepest odd level leaf node
Find the Deepest Node in a Binary Tree
Deepest left leaf node in a binary tree | iterative approach
Deepest left leaf node in a binary tree
Find Minimum Depth of a Binary Tree
Replace node with depth in a binary tree
Maximum width of a binary tree
Vertical width of Binary tree | Set 1
Vertical width of Binary tree | Set 2
Find if given vertical level of binary tree is sorted or not
Check if a binary tree is sorted level-wise or not
Bottom View of a Binary Tree
Program to count leaf nodes in a binary tree
Iterative program to count leaf nodes in a Binary Tree
Count Non-Leaf nodes in a Binary Tree
Count half nodes in a Binary tree (Iterative and Recursive)
Count full nodes in a Binary tree (Iterative and Recursive)
Connect Nodes at same Level (Level Order Traversal)
Connect nodes at same level using constant extra space
Connect nodes at same level
Level with maximum number of nodes
Averages of Levels in Binary Tree
Largest value in each level of Binary Tree
Smallest value in each level of Binary Tree
Get Level of a node in a Binary Tree
Get level of a node in binary tree | iterative approach
Find mirror of a given node in Binary tree
Find largest subtree having identical left and right subtrees
Find Count of Single Valued Subtrees
Closest leaf to a given node in Binary Tree
Find the closest leaf in a Binary Tree
Iterative Search for a key ‘x’ in Binary Tree
Given a binary tree, how do you remove all the half nodes?
Swap Nodes in Binary tree of every k’th level
Pairwise Swap leaf nodes in a binary tree
Root to leaf paths having equal lengths in a Binary Tree
Root to leaf path with maximum distinct nodes
Maximum Consecutive Increasing Path Length in Binary Tree
Longest Path with Same Values in a Binary Tree
Remove nodes on root to leaf paths of length < K
Longest consecutive sequence in Binary tree
Path length having maximum number of bends
Number of turns to reach from one node to other in binary tree
Create loops of even and odd values in a binary tree
Find first non matching leaves in two binary trees
Get maximum left node in binary tree
Find a number in minimum steps
Factor Tree of a given Number
Number of full binary trees such that each node is product of its children
Number of subtrees having odd count of even numbers
Find distance from root to given node in a binary tree
Find distance between two given keys of a Binary Tree
Find right sibling of a binary tree with parent pointers
Find next right node of a given key
Tilt of Binary Tree
Find All Duplicate Subtrees
Top three elements in binary tree
Find maximum (or minimum) in Binary Tree
Extract Leaves of a Binary Tree in a Doubly Linked List
Minimum no. of iterations to pass information to all nodes in the tree







Stack

Stack Implementation
Stack Implementation using Linked List
Check if given expression is balanced expression or not
Find duplicate parenthesis in an expression
Evaluate given postfix expression
Decode the given sequence to construct minimum number without repeated digits
Design a stack which returns minimum element in constant time
Design a stack which returns minimum element without using auxiliary stack
Reverse a string without using recursion
Reverse a string using stack data structure
Inorder Tree Traversal | Iterative & Recursive
Preorder Tree Traversal | Iterative & Recursive
Postorder Tree Traversal | Iterative & Recursive
Find ancestors of given node in a Binary Tree
Check if two given binary trees are identical or not | Iterative & Recursive
Reverse Level Order Traversal of Binary Tree
Reverse given text without reversing the individual words
Find all binary strings that can be formed from given wildcard pattern
Iterative Implementation of Quicksort
Depth First Search (DFS) | Iterative & Recursive Implementation
Invert given Binary Tree | Recursive and Iterative solution
Print leaf to root path for every leaf node in a binary tree
Longest Increasing Subsequence


Implement Queue using Stacks
Design and Implement Special Stack Data Structure | Added Space Optimized Version
Implement two stacks in an array
Implement Stack using Queues
Design a stack with operations on middle element
How to efficiently implement k stacks in a single array?
How to create mergable stack?
Design a stack that supports getMin() in O(1) time and O(1) extra space
Implement a stack using single queue
How to implement stack using priority queue or heap?
Create a customized data structure which evaluates functions in O(1)
Implement Stack and Queue using Deque
Standard Problems based on Stack :

Infix to Postfix Conversion using Stack
Prefix to Infix Conversion
Prefix to Postfix Conversion
Postfix to Prefix Conversion
Postfix to Infix
Convert Infix To Prefix Notation
The Stock Span Problem
Check for balanced parentheses in an expression
Next Greater Element
Next Greater Frequency Element
Number of NGEs to the right
Maximum product of indexes of next greater on left and right
The Celebrity Problem
Expression Evaluation
Arithmetic Expression Evalution
Evaluation of Postfix Expression
Iterative Tower of Hanoi
Print next greater number of Q queries
Operations on Stack :

Reverse a stack using recursion
Sort a stack using recursion
Sort a stack using a temporary stack
Reverse a stack without using extra space in O(n)
Delete middle element of a stack
Sorting array using Stacks
Delete array elements which are smaller than next or become smaller
Check if a queue can be sorted into another queue using a stack
Reverse individual words
Count subarrays where second highest lie before highest
Check if an array is stack sortable
Misc :

Iterative Postorder Traversal | Set 1 (Using Two Stacks)
Iterative Postorder Traversal | Set 2 (Using One Stack)
Merge Overlapping Intervals
Largest Rectangular Area in a Histogram | Set 2
Print ancestors of a given binary tree node without recursion
Reverse a string using stack
Program for Tower of Hanoi
Find maximum depth of nested parenthesis in a string
Find maximum of minimum for every window size in a given array
Length of the longest valid substring
Iterative Depth First Traversal of Graph
Minimum number of bracket reversals needed to make an expression balanced
Expression contains redundant bracket or not
Identify and mark unmatched parenthesis in an expression
Check if two expressions with brackets are same
Find index of closing bracket for a given opening bracket in an expression
Check for balanced parentheses in an expression
Balanced expression with replacement
Check if a given array can represent Preorder Traversal of Binary Search Tree
Form minimum number from given sequence
Find if an expression has duplicate parenthesis or not
Find maximum difference between nearest left and right smaller elements
Find next Smaller of next Greater in an array
Find maximum sum possible equal sum of three stacks
Count natural numbers whose all permutation are greater than that number
Delete consecutive same words in a sequence
Decode a string recursively encoded as count followed by substring
Bubble sort using two Stacks
Pattern Occurrences : Stack Implementation Java
Iterative method to find ancestors of a given binary tree
Stack Permutations (Check if an array is stack permutation of other)
Tracking current Maximum Element in a Stack
Check mirror in n-ary tree
Reverse a number using stack
Reversing the first K elements of a Queue
Reversing a Queue
Check if stack elements are pairwise consecutive
Spaghetti Stack
Interleave the first half of the queue with second half
Remove brackets from an algebraic string containing + and – operators
Growable array based stack
Range Queries for Longest Correct Bracket Subsequence



Infix to Postfix Conversion using Stack
Evaluation of Postfix Expression
Reverse a String using Stack
Implement two stacks in an array
Check for balanced parentheses in an expression



1) K largest elements from a big file or array.
2) Find a triplet a, b, c such that a2 = b2 + c2. Variations of this problem like find a triplet with sum equal to 0. Find a pair with given sum. All such questions are efficiently solved using hashing. – Practice here

3) Binary tree traversal questions like left view, right view, top view, bottom view, maximum of a level, minimum of a level, children sum property, diameter etc.

4) Convert a Binary tree to DLL – Practice here

5) Lowest Common ancestor in a Binary Search Tree and Binary Tree.

7) Implement a stack with push(), pop() and min() in O(1) time.

8) Reverse a linked list in groups of size k – Practice here

9) Given two numbers represented by two linked lists, write a function that returns sum list – Practice here

10) Rotate a matrix by 90 degree.

11) Stock span problem

12) Next greater element

12) Some Dynamic Programming problems like:




Check if a Binary Tree is BST or not – Practice here
Remove duplicates from a string, do it in-place – Practice here
Given a rotated array which is sorted search for an element in it – Practice here
Given two linked lists that represent two big numbers (numbers that can not be stored in an int or long long int), write a function that adds the numbers and store the result in a third list.
Variations of above question like subtract two numbers or multiply two numbers represented by linked lists. – Practice here
Print last 10 lines of a big file or big string.
Clone a linked list with next and arbitrary (or random) pointer
Connect nodes at same level. Practice here.
Least common ancestor of a binary tree or a binary search tree
Test case questions like test an ATM.
Run length encoding. – Practice here
Detect cycle in a linked list. Practice here.
Given a sorted array of size n. Each element in array is unique and lies from 1 to n+1. Find the missing element. Write code and test cases for the same. – Practice here

Check if a binary tree is balanced.
Validate a given IP address
Why do you want to join Microsoft?

Two of the nodes of a BST are swapped. Correct the BST


1) What is/are your favorite subject(s)? There may be many questions on the subject told.

2) Differences between C and C++.
3) What is include in a C program?



4) What is Dynamic Memory Allocation, example?

5) Differences between C/C++ and Java?

6) Simple programs like Bubble Sort, sum of a simple series, etc.

7) What is OOP?

8) What are encapsulation, Inheritance, polymorphism and abstraction?

9) Explain Runtime Polymorhism

10) What is BCNF?

11) What are inner and outer joins? Examples of both.

12) Questions on keys in DBMS like primary key, super key, difference between primary key and unique?

13) OSI Layers?


14) Why Accenture?

16) Are you ready to work in night shifts?

17) About final year project?

18) Your strengths and weaknesses?

19) Do you a know a language other than C, C++ and Java?

20) Background questions like AIEE rank, year gap, family members, etc















1. A building has 100 floors. 
One of the floors is the highest floor an egg can be dropped from without breaking.
If an egg is dropped from above that floor, it will break. 
If it is dropped from that floor or below, it will be completely undamaged and you can drop the egg again.
Given two eggs, find the highest floor an egg can be dropped from without breaking, with as few drops as possible.




2. Write a function to find the 2nd largest element in a binary search tree. ↴




3. You are a renowned thief who has recently switched from stealing precious metals to stealing cakes because of the insane profit margins. You end up hitting the jackpot, breaking into the world's largest privately owned stock of cakes—the vault of the Queen of England.

While Queen Elizabeth has a limited number of types of cake, she has an unlimited supply of each type.

Each type of cake has a weight and a value, stored in a tuple with two indices:

An integer representing the weight of the cake in kilograms
An integer representing the monetary value of the cake in British shillings
For example:

  # Weighs 7 kilograms and has a value of 160 shillings
(7, 160)

# Weighs 3 kilograms and has a value of 90 shillings
(3, 90)

You brought a duffel bag that can hold limited weight, and you want to make off with the most valuable haul possible.

Write a function max_duffel_bag_value() that takes a list of cake type tuples and a weight capacity, and returns the maximum monetary value the duffel bag can hold.

For example:

  cake_tuples = [(7, 160), (3, 90), (2, 15)]
capacity    = 20

# Returns 555 (6 of the middle type of cake and 1 of the last type of cake)
max_duffel_bag_value(cake_tuples, capacity)

Weights and values may be any non-negative integer. Yes, it's weird to think about cakes that weigh nothing or duffel bags that can't hold anything. 
But we're not just super mastermind criminals—we're also meticulous about keeping our algorithms flexible and comprehensive.



4. Find a duplicate, Space Edition™.

We have a list of integers, where:

The integers are in the range 1..n1..n
The list has a length of n+1n+1
It follows that our list has at least one integer which appears at least twice. 
But it may have several duplicates, and each duplicate may appear more than twice.

Write a function which finds an integer that appears more than once in our list. 
(If there are multiple duplicates, you only need to find one of them.)

We're going to run this function on our new, super-hip MacBook Pro With Retina Display™. 
Thing is, the damn thing came with the RAM soldered right to the motherboard, so we can't upgrade our RAM. 
So we need to optimize for space!




5. Find a duplicate, Space Edition™ BEAST MODE

In Find a duplicate, Space Edition™, we were given a list of integers where:

the integers are in the range 1..n1..n
the list has a length of n+1n+1
These properties mean the list must have at least 1 duplicate. Our challenge was to find a duplicate number, while optimizing for space. We used a divide and conquer approach, iteratively cutting the list in half to find a duplicate integer in O(n\lg{n})O(nlgn) time and O(1)O(1) space (sort of a modified binary search).

But we can actually do better. We can find a duplicate integer in O(n)O(n) time while keeping our space cost at O(1)O(1).

This is a tricky one to derive (unless you have a strong background in graph theory), so we'll get you started:

Imagine each item in the list as a node in a linked list. In any linked list, ↴ each node has a value and a "next" pointer. In this case:

The value is the integer from the list.
The "next" pointer points to the value-eth node in the list (numbered starting from 1). For example, if our value was 3, the "next" node would be the third node.
Here’s a full example:

A list [2, 3, 1, 3], so 2 is in the first position and points to 3 in the second position.
Notice we're using "positions" and not "indices." For this problem, we'll use the word "position" to mean something like "index," but different: indices start at 0, while positions start at 1. More rigorously: position = index + 1.

Using this, find a duplicate integer in O(n)O(n) time while keeping our space cost at O(1)O(1).

Drawing pictures will help a lot with this one. Grab some paper and pencil (or a whiteboard, if you have one).




6. Hooray! It's opposite day. Linked lists go the opposite way today.

Write a function for reversing a linked list. ↴ Do it in place. ↴

Your function will have one input: the head of the list.

Your function should return the new head of the list.

Here's a sample linked list node class:

  class LinkedListNode(object):

    def __init__(self, value):
        self.value = value
        self.next  = None





7. Writing programming interview questions hasn't made me rich yet ... so I might give up and start trading Apple stocks all day instead.

First, I wanna know how much money I could have made yesterday if I'd been trading Apple stocks all day.

So I grabbed Apple's stock prices from yesterday and put them in a list called stock_prices, where:

The indices are the time (in minutes) past trade opening time, which was 9:30am local time.
The values are the price (in US dollars) of one share of Apple stock at that time.
So if the stock cost $500 at 10:30am, that means stock_prices[60] = 500.

Write an efficient function that takes stock_prices and returns the best profit I could have made from one purchase and one sale of one share of Apple stock yesterday.

For example:

  stock_prices = [10, 7, 5, 8, 11, 9]

get_max_profit(stock_prices)
# Returns 6 (buying for $5 and selling for $11)

No "shorting"—you need to buy before you can sell. Also, you can't buy and sell in the same time step—at least 1 minute has to pass.




8. You want to build a word cloud, an infographic where the size of a word corresponds to how often it appears in the body of text.

To do this, you'll need data. Write code that takes a long string and builds its word cloud data in a dictionary ↴ , where the keys are words and the values are the number of times the words occurred.

Think about capitalized words. For example, look at these sentences:

  'After beating the eggs, Dana read the next step:'
'Add milk and eggs, then add flour and sugar.'
What do we want to do with "After", "Dana", and "add"? In this example, your final dictionary should include one "Add" or "add" with a value of 22. Make reasonable (not necessarily perfect) decisions about cases like "After" and "Dana".

Assume the input will only contain words and standard punctuation.

You could make a reasonable argument to use regex in your solution. We won't, mainly because performance is difficult to measure and can get pretty bad.




9. You have a function rand5() that generates a random integer from 1 to 5. 
Use it to write a function rand7() that generates a random integer from 1 to 7.

rand5() returns each integer with equal probability. rand7() must also return each integer with equal probability.





10. You left your computer unlocked and your friend decided to troll you by copying a lot of your files to random spots all over your file system.

Even worse, she saved the duplicate files with random, embarrassing names ("this_is_like_a_digital_wedgie.txt" was clever, I'll give her that).

Write a function that returns a list of all the duplicate files. We'll check them by hand before actually deleting them, since programmatically deleting files is really scary. To help us confirm that two files are actually duplicates, return a list of tuples ↴ where:

the first item is the duplicate file
the second item is the original file
For example:

  [('/tmp/parker_is_dumb.mpg', '/home/parker/secret_puppy_dance.mpg'),
 ('/home/trololol.mov', '/etc/apache2/httpd.conf')]
You can assume each file was only duplicated once.






🔵 DevOps Online Training: http://bit.ly/33UkkZq

🔵 AWS Online Training: http://bit.ly/32QjATC

🔵 RPA Online Training: http://bit.ly/2KqXRvc

🔵 Python Online Training: http://bit.ly/2Ogo00X

🔵 Data Science Online Training: http://bit.ly/2QkeNY3

🔵 Machine Learning and AI Online Training: http://bit.ly/3563A1C

🔵 Big Data Online Training: http://bit.ly/2CJLVQX

🔵 Java Online Training: http://bit.ly/2XgXF77

🔵 Selenium Online Training: http://bit.ly/350BkgA

🔵 Tableau Online Training: http://bit.ly/2ppGu6W

🔵 Blockchain Online Training: http://bit.ly/37aZkPZ

🔵 Ethical Hacking Online Training: http://bit.ly/2NOf6IY

🔵 Digital Marketing Online Training: http://bit.ly/2Xf9CKD





DS Basics

DS Tutorial
DS Introduction
DS Algorithm
Ds Asymptotic Analysis
DS Pointer
DS Structure
DS Array

Array
2D Array
DS Linked List

Linked List
Insertion at beginning
Insertion at end
Insertion after specified node
Deletion at beginning
Deletion at end
Deletion after specified node
Traversing
Searching
Doubly Linked List
Insertion at beginning
Insertion at end
Insertion after specified node
Deletion at beginning
Deletion at end
Deletion of node having given data
Traversing
Searching
Circular Linked List
Insertion at beginning
Insertion at end
Deletion at beginning
Deletion at the end
Traversing
Searching
Circular Doubly List
Insertion at beginning
Insertion at end
Deletion at beginning
Deletion at the end
DS Stack

DS Stack
Array Implementation
Linked List Implementation
DS Queue

DS Queue
Array Implementation
Linked List Implementation
Circular Queue
DS Tree

Tree
Binary Tree
Pre-order Traversal
In-order Traversal
Post-order Traversal
Binary Search Tree
Searching in BST
Insertion in BST
Deletion in BST
AVL Tree
Insertion in AVL Tree
LL Rotation
LR Rotation
RL Rotation
RR Rotation
Deletion in AVL Tree
B Tree
B+ Tree
Red Black Tree
DS Graph

DS Graph
Graph Implementation
BFS Algorithm
DFS Algorithm
Spanning Tree
Prim's Algorithm
Kruskal's Algorithm
DS Searching

Linear Search
Binary Search
DS Sorting

Bubble Sort
Bucket Sort
Comb Sort
Counting Sort
Heap Sort
Insertion Sort
Merge Sort
Quick Sort
Radix Sort
Selection Sort
Shell Sort
Bitonic Sort
Cocktail Sort
Cycle Sort
Tim Sort
Interview Questions

DS Interview Questions
Singly Linked List Programs

Program to create and display a singly linked list
Program to create a singly linked list of n nodes and count the number of nodes
Program to create a singly linked list of n nodes and display it in reverse order
Program to delete a new node from the beginning of the singly linked list
Program to delete a new node from the middle of the singly linked list
Program to delete a node from the end of the singly linked list
Program to determine whether a singly linked list is the palindrome
Program to find the maximum and minimum value node from a singly linked list
Program to insert a new node at the middle of the singly linked list
Program to insert a new node at the beginning of the singly linked list
Program to insert a new node at the end of the singly linked list
Program to remove duplicate elements from a singly linked list
Program to search an element in a singly linked list
Program to sort the elements of the singly linked list
Program to swap nodes in a singly linked list without swapping data
Program to swap the last element of the singly linked list from the first one
Doubly Linked List Programs

Program to Convert a Given Binary Tree to Doubly Linked List
Program to Create a Doubly Linked List From a Ternary Tree
Program to Create a Doubly Linked List of N Nodes and Count the Number of Nodes
Program to Create a Doubly Linked List of N Nodes and Display it in Reverse Order
Program to Create and Display a Doubly Linked List
Program to Delete a New Node From the Beginning of the Doubly Linked List
Program to Delete a New Node From the End of the Doubly Linked List
Program to Delete a New Node From the Middle of the Doubly Linked List
Program to Find the Maximum and Minimum Value Node From a Doubly Linked List
Program to Insert a New Node at the Beginning of the Doubly Linked List
Program to Insert a New Node at the End of Doubly Linked List
Program to Insert a New Node at the Middle of Doubly Linked List
Program to Remove Duplicate Elements From a Doubly Linked List
Program to Rotate Doubly Linked List by N Nodes
Program to Search an Element in a Doubly Linked List
Program to Sort the Elements of the Doubly Linked List
Circular Linked List Programs

Program to Create a Circular Linked List of N Nodes and Count the Number of Nodes
Program to Create a Circular Linked List of N Nodes and Display it in Reverse Order
Program to Create and Display a Circular Linked List
Program to Delete a New Node From the Beginning of the Circular Linked List
Program to Delete a New Node From the End of the Circular Linked List
Program to Delete a New Node From the Middle of the Circular Linked List
Program to Find the Maximum and Minimum Value Node From a Circular Linked List
Program to Insert a New Node at the Beginning of the Circular Linked List
Program to Insert a New Node at the End of the Circular Linked List
Program to Insert a New Node at the Middle of the Circular Linked List
Program to Remove Duplicate Elements From a Circular Linked List
Program to Search an Element in a Circular Linked List
Program to Sort the Elements of the Circular Linked List
Tree Programs

Program to Calculate the Difference Between the Sum of the Odd Level and Even Level Nodes of a Binary Tree
Program to Construct a Binary Search Tree and Perform Deletion and Inorder Traversal
Program to Convert Binary Tree to Binary Search Tree
Program to Determine Whether all Leaves are at Same Level
Program to Determine Whether two Trees are Identical
Program to Find Maximum Width of a Binary Tree
Program to Find the Largest Element in a Binary Tree
Program to Find the Maximum Depth or Height of a Tree
Program to Find the Nodes Which are at the Maximum Distance in a Binary Tree
Program to Find the Smallest Element in a Binary Tree
Program to Find the Sum of all the Nodes of a Binary Tree
Program to Find the Total Number of Possible Binary Search Trees with N Keys
Program to Implement Binary Tree using the Linked List
Program to Search a Node in a Binary Tree


















Topics:

Array
Linked List
Stack
Queue
Binary Tree
Binary Search Tree
Heap
Hashing
Graph
Matrix
Misc
Advanced Data Structure
Overview:

Overview of Data Structures | Set 1 (Linear Data Structures)
Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)
Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)
Abstract Data Types
Linked List:



Singly Linked List:

Introduction to Linked List
Linked List vs Array
Linked List Insertion
Linked List Deletion (Deleting a given key)
Linked List Deletion (Deleting a key at given position)
A Programmer’s approach of looking at Array vs. Linked List
Find Length of a Linked List (Iterative and Recursive)
How to write C functions that modify head pointer of a Linked List?
Swap nodes in a linked list without swapping data
Reverse a linked list
Merge two sorted linked lists
Merge Sort for Linked Lists
Reverse a Linked List in groups of given size
Detect and Remove Loop in a Linked List
Add two numbers represented by linked lists | Set 1
Rotate a Linked List
Generic Linked List in C
Circular Linked List:

Circular Linked List Introduction and Applications,
Circular Singly Linked List Insertion<
Circular Linked List Traversal
Split a Circular Linked List into two halves
Sorted insert for circular linked list
Doubly Linked List:

Doubly Linked List Introduction and Insertion
Delete a node in a Doubly Linked List
Reverse a Doubly Linked List
The Great Tree-List Recursion Problem.
QuickSort on Doubly Linked List
Merge Sort for Doubly Linked List
All Articles of Linked List
Quiz on Linked List
Coding Practice on Linked List
Recent Articles on Linked List

Stack:

Introduction to Stack
Infix to Postfix Conversion using Stack
Evaluation of Postfix Expression
Reverse a String using Stack
Implement two stacks in an array
Check for balanced parentheses in an expression
Next Greater Element
Reverse a stack using recursion
Sort a stack using recursion
The Stock Span Problem
Design and Implement Special Stack Data Structure
Implement Stack using Queues
Design a stack with operations on middle element
How to efficiently implement k stacks in a single array?
Sort a stack using recursion
Quiz on Stack
All Articles on Stack
Coding Practice on Stack
Recent Articles on Stack

 

Queue:

Queue Introduction and Array Implementation
Linked List Implementation of Queue
Applications of Queue Data Structure
Priority Queue Introduction
Deque (Introduction and Applications)
Implementation of Deque using circular array
Implement Queue using Stacks
Find the first circular tour that visits all petrol pumps
Maximum of all subarrays of size k
An Interesting Method to Generate Binary Numbers from 1 to n
How to efficiently implement k Queues in a single array?
Quiz on Queue
All Articles on Queue
Coding Practice on Queue
Recent Articles on Queue

 

Binary Tree:

Binary Tree Introduction
Binary Tree Properties
Types of Binary Tree
Handshaking Lemma and Interesting Tree Properties
Enumeration of Binary Tree
Applications of tree data structure
Tree Traversals
BFS vs DFS for Binary Tree
Level Order Tree Traversal
Diameter of a Binary Tree
Inorder Tree Traversal without Recursion
Inorder Tree Traversal without recursion and without stack!
Threaded Binary Tree
Maximum Depth or Height of a Tree
If you are given two traversal sequences, can you construct the binary tree?
Clone a Binary Tree with Random Pointers
Construct Tree from given Inorder and Preorder traversals
Maximum width of a binary tree
Print nodes at k distance from root
Print Ancestors of a given node in Binary Tree
Check if a binary tree is subtree of another binary tree
Connect nodes at same level
Quiz on Binary Tree
Quiz on Binary Tree Traversals
All articles on Binary Tree
Coding Practice on Binary Tree
Recent Articles on Tree

Binary Search Tree:



Search and Insert in BST
Deletion from BST
Minimum value in a Binary Search Tree
Inorder predecessor and successor for a given key in BST
Check if a binary tree is BST or not
Lowest Common Ancestor in a Binary Search Tree.
Inorder Successor in Binary Search Tree
Find k-th smallest element in BST (Order Statistics in BST)
Merge two BSTs with limited extra space
Two nodes of a BST are swapped, correct the BST
Floor and Ceil from a BST
In-place conversion of Sorted DLL to Balanced BST
Find a pair with given sum in a Balanced BST
Total number of possible Binary Search Trees with n keys
Merge Two Balanced Binary Search Trees
Binary Tree to Binary Search Tree Conversion
Quiz on Binary Search Trees
Quiz on Balanced Binary Search Trees
All Articles on Binary Search Tree
Coding Practice on Binary Search Tree
Recent Articles on BST

Heap:

Binary Heap
Why is Binary Heap Preferred over BST for Priority Queue?
Binomial Heap
Fibonacci Heap
Heap Sort
K’th Largest Element in an array
Sort an almost sorted array/
Tournament Tree (Winner Tree) and Binary Heap
All Articles on Heap
Quiz on Heap
Coding Practice on Heap
Recent Articles on Heap

Hashing:

Hashing Introduction
Separate Chaining for Collision Handling
Open Addressing for Collision Handling
Print a Binary Tree in Vertical Order
Find whether an array is subset of another array
Union and Intersection of two Linked Lists
Find a pair with given sum
Check if a given array contains duplicate elements within k distance from each other
Find Itinerary from a given list of tickets
Find number of Employees Under every Employee
Quiz on Hashing
All Articles on Hashing
Coding Practice on Hashing
Recent Articles on Hashing

 

Graph:

Introduction, DFS and BFS:

Graph and its representations
Breadth First Traversal for a Graph
Depth First Traversal for a Graph
Applications of Depth First Search
Applications of Breadth First Traversal
Detect Cycle in a Directed Graph
Detect Cycle in a an Undirected Graph
Detect cycle in an undirected graph
Longest Path in a Directed Acyclic Graph
Topological Sorting
Check whether a given graph is Bipartite or not
Snake and Ladder Problem
Minimize Cash Flow among a given set of friends who have borrowed money from each other
Boggle (Find all possible words in a board of characters)
Assign directions to edges so that the directed graph remains acyclic
All Articles on Graph Data Structure
Quiz on Graph
Quiz on Graph Traversals
Quiz on Graph Shortest Paths
Quiz on Graph Minimum Spanning Tree
Coding Practice on Graph
Recent Articles on Graph

 

Advanced Data Structure:

Advanced Lists:

Memory efficient doubly linked list
XOR Linked List – A Memory Efficient Doubly Linked List | Set 1
XOR Linked List – A Memory Efficient Doubly Linked List | Set 2
Skip List | Set 1 (Introduction)
Self Organizing List | Set 1 (Introduction)
Unrolled Linked List | Set 1 (Introduction)
Segment Tree:

Segment Tree | Set 1 (Sum of given range)
Segment Tree | Set 2 (Range Minimum Query)
Lazy Propagation in Segment Tree
Persistent Segment Tree | Set 1 (Introduction)
All articles on Segment Tree
Trie:

Trie | (Insert and Search)
Trie | (Delete)
Longest prefix matching – A Trie based solution in Java
Print unique rows in a given boolean matrix
How to Implement Reverse DNS Look Up Cache?
How to Implement Forward DNS Look Up Cache?
All Articles on Trie
Binary Indexed Tree:

Binary Indexed Tree
Two Dimensional Binary Indexed Tree or Fenwick Tree
Binary Indexed Tree : Range Updates and Point Queries
Binary Indexed Tree : Range Update and Range Queries
All Articles on Binary Indexed Tree
Suffix Array and Suffix Tree:

Suffix Array Introduction
Suffix Array nLogn Algorithm
kasai’s Algorithm for Construction of LCP array from Suffix Array
Suffix Tree Introduction
Ukkonen’s Suffix Tree Construction – Part 1
Ukkonen’s Suffix Tree Construction – Part 2
Ukkonen’s Suffix Tree Construction – Part 3
Ukkonen’s Suffix Tree Construction – Part 4,
Ukkonen’s Suffix Tree Construction – Part 5
Ukkonen’s Suffix Tree Construction – Part 6
Generalized Suffix Tree
Build Linear Time Suffix Array using Suffix Tree
Substring Check
Searching All Patterns
Longest Repeated Substring,
Longest Common Substring, Longest Palindromic Substring

All Articles on Suffix Tree
AVL Tree:



AVL Tree | Set 1 (Insertion)
AVL Tree | Set 2 (Deletion)
AVL with duplicate keys
Splay Tree:

Splay Tree | Set 1 (Search)
Splay Tree | Set 2 (Insert)
B Tree:

B-Tree | Set 1 (Introduction)
B-Tree | Set 2 (Insert)
B-Tree | Set 3 (Delete)
Red-Black Tree:

Red-Black Tree Introduction
Red Black Tree Insertion.
Red-Black Tree Deletion
Program for Red Black Tree Insertion

All Articles on Self-Balancing BSTs

 

K Dimensional Tree:

KD Tree (Search and Insert)
K D Tree (Find Minimum)
K D Tree (Delete)
Others:

Treap (A Randomized Binary Search Tree)
Ternary Search Tree
Interval Tree
Implement LRU Cache
Sort numbers stored on different machines
Find the k most frequent words from a file
Given a sequence of words, print all anagrams together
Tournament Tree (Winner Tree) and Binary Heap
Decision Trees – Fake (Counterfeit) Coin Puzzle (12 Coin Puzzle)
Spaghetti Stack
Data Structure for Dictionary and Spell Checker?
Cartesian Tree
Cartesian Tree Sorting
Sparse Set
Centroid Decomposition of Tree
Gomory-Hu Tree
Recent Articles on Advanced Data Structures.

Array:

Search, insert and delete in an unsorted array
Search, insert and delete in a sorted array
Write a program to reverse an array
Leaders in an array
Given an array A[] and a number x, check for pair in A[] with sum as x
Majority Element
Find the Number Occurring Odd Number of Times
Largest Sum Contiguous Subarray
Find the Missing Number
Search an element in a sorted and pivoted array
Merge an array of size n into another array of size m+n
Median of two sorted arrays
Program for array rotation
Reversal algorithm for array rotation
Block swap algorithm for array rotation
Maximum sum such that no two elements are adjacent
Sort elements by frequency | Set 1
Count Inversions in an array
All Articles on Array
Coding Practice on Array
Quiz on Array
Coding Practice on Array
Recent Articles on Array

 

Matrix:

Search in a row wise and column wise sorted matrix
Print a given matrix in spiral form
A Boolean Matrix Question
Print unique rows in a given boolean matrix
Maximum size square sub-matrix with all 1s
Print unique rows in a given boolean matrix
Inplace M x N size matrix transpose | Updated
Dynamic Programming | Set 27 (Maximum sum rectangle in a 2D matrix)
Strassen’s Matrix Multiplication
Create a matrix with alternating rectangles of O and X
Print all elements in sorted order from row and column wise sorted matrix
Given an n x n square matrix, find sum of all sub-squares of size k x k
Count number of islands where every island is row-wise and column-wise separated
Find a common element in all rows of a given row-wise sorted matrix
All Articles on Matrix
Coding Practice on Matrix
Recent Articles on Matrix.

 

Misc:

Commonly Asked Data Structure Interview Questions | Set 1
A data structure for n elements and O(1) operations
Expression Tree
You can create a new DS topic and discus
















Graph algorithms
Dynamic programming
Searching and Sorting:
Number theory and Other Mathematical
Geometrical and Network Flow Algorithms
Data Structures
competitive-programming

The below links cover all most  important algorithms and data structure topics:


Graph Algorithms



Breadth First Search (BFS)
Depth First Search (DFS)
Shortest Path from source to all vertices **Dijkstra**
Shortest Path from every vertex to every other vertex **Floyd Warshall**
Minimum Spanning tree **Prim**
Minimum Spanning tree **Kruskal**
Topological Sort
Johnson’s algorithm
Articulation Points (or Cut Vertices) in a Graph
Bridges in a graph
All Graph Algorithms


Dynamic Programming

Longest Common Subsequence
Longest Increasing Subsequence
Edit Distance
Minimum Partition
Ways to Cover a Distance
Longest Path In Matrix
Subset Sum Problem
Optimal Strategy for a Game
0-1 Knapsack Problem
Assembly Line Scheduling
All DP Algorithms

 


Searching And Sorting

Binary Search
Quick Sort
Merge Sort
Order Statistics
KMP algorithm
Rabin karp
Z’s algorithm
Aho Corasick String Matching
Counting Sort
Manacher’s algorithm: Part 1, Part 2 and Part 3
All Articles on Searching, Sorting and Pattern Searching.


Number theory and Other Mathematical

Prime Numbers and Prime Factorization

Primality Test | Set 1 (Introduction and School Method)
Primality Test | Set 2 (Fermat Method)
Primality Test | Set 3 (Miller–Rabin)
Sieve of Eratosthenes
Segmented Sieve
Wilson’s Theorem
Prime Factorisation
Pollard’s rho algorithm
 

Modulo Arithmetic Algorithms

Basic and Extended Euclidean algorithms
Euler’s Totient Function
Modular Exponentiation
Modular Multiplicative Inverse
Chinese remainder theorem Introduction
Chinese remainder theorem and Modulo Inverse Implementation
nCr%m and this.
Miscellaneous:

Counting Inversions
Counting Inversions using BIT
logarithmic exponentiation
Square root of an integer
Heavy light Decomposition , this and this
Matrix Rank
Gaussian Elimination to Solve Linear Equations
Hungarian algorithm
Link cut
Mo’s algorithm and this
Factorial of a large number in C++
Factorial of a large number in Java+
Russian Peasant Multiplication
Catalan Number
All Articles on Mathematical Algorithms


Geometrical and Network Flow Algorithms

Convex Hull
Graham Scan
Line Intersection
Interval Tree
Matrix Exponentiation and this
Maxflow Ford Furkerson Algo and Edmond Karp Implementation
Min cut
Stable Marriage Problem
Hopcroft–Karp Algorithm for Maximum Matching
Dinic’s algo and e-maxx
All Articles on Geometric Algorithms


Data Structures

Binary Indexed Tree or Fenwick tree
Segment Tree (RMQ, Range Sum and Lazy Propagation)
K-D tree (See insert, minimum and delete)
Union Find Disjoint Set (Cycle Detection and By Rank and Path Compression)
Tries
Suffix array (this, this and this)
Sparse table
Suffix automata
Suffix automata II
LCA and RMQ
















C Language Introduction
C Programming Language Standard
int (1 sign bit + 31 data bits) keyword in C
Is it fine to write “void main()” or “main()” in C/C++?
Difference between “int main()” and “int main(void)” in C/C++?
Macros and Preprocessors in C
Compiling a C program:- Behind the Scenes
Benefits of C over other languages
Program error signals
Escape sequences in C
Line Slicing in C
C/ C++ Tokens
Variable Declaration, Definition and Scope:



Variables and Keywords in C
How are variables scoped in C – Static or Dynamic?
Scope rules in C
How Linkers Resolve Multiply Defined Global Symbols?
Quiz on Variable Declaration and Scope
Complicated declarations in C
Redeclaration of global variable in C
Internal and External Linkage
Declare variable as constant
Why variables doesn’t start with numbers
Redeclaration of global variables
Initialization of global and static variables
Data Types:

Data Types in C
Use of bool in C
Integer Promotions in C
Quiz on Data Types in C
Comparison of a float with a value in C
Need of long data type in C
size_t data type in C
Interesting facts about data-types and modifiers
Float and Double in C
Character arithmetic in C
Typecasting in C
Storage Classes:

Storage Classes in C
Static Variables in C
Understanding “extern” keyword in C
What are the default values of static variables in C?
Understanding “volatile” qualifier in C
Const Qualifier in C
Initialization of static variables in C
Understanding “register” keyword in C
Quiz on Storage Classes in C
Understanding volatile qualifier in C- Set 1
Input/Output:

Returned values of printf() and scanf()
What is return type of getchar(), fgetc() and getc() ?
Scansets in C
puts() vs printf() for printing a string
What is use of %n in printf() ?
How to print % using printf()?
Quiz on Input Output in C
Difference between printf, sprintf and fprintf?
Difference between getc(), getchar(), getch() and getche()
Difference between %d and %i format specifier
Use of fflush(stdin) in C
Clearing input buffer in C/C++
scanf() and fscanf() in C
getchar_unlocked() in C
Problem with scanf()
Differentiate printable and control character
rand() and srand() in C/C++
Operators:

Introduction to operators in C and Arithmetic Operators
Relational and Logical Operators in C
Bitwise Operators in C
Operator Precedence and Associativity in C
Evaluation order of operands
Comma in C and C++
sizeof operator in C
Operands for sizeof operator
A comma operator question
Result of comma operator as l-value in C and C++
Order of operands for logical operators
Increment (Decrement) operators require L-value Expression
Precedence of postfix ++ and prefix ++ in C/C++
Modulus on Negative Numbers
C/C++ Ternary Operator – Some Interesting Observations
Pre-increment (or pre-decrement) in C++
Difference between ++*p, *p++ and *++p
Results of comparison operations in C and C++
To find sum of two numbers without using any operator
Sequence Points in C
Execution of printf with ++ operators
Anything written in sizeof() is never executed
Difference between strlen() and sizeof()
Stringizing and Token-pasting operator
Preprocessor:

Write a C macro PRINT(x) which prints x
Variable length arguments for Macros
Multiline macros in C
CRASH() macro – interpretation
The OFFSETOF() macro,
Branch prediction macros in GCC
Diffference between #define and const in C?
A C Programming Language Puzzle
What’s difference between header files “stdio.h” and “stdlib.h” ?
How to print a variable name in C?
Constants in C
How a Preprocessor works
Preprocessor Directives : Behind the scene-1
Preprocessor Directives : Behind the scene-2
isgraph() library function
write your own header file in C
difftime() library function
tmpnam() library function
_Generic keyword in C
math.h library functions
typedef versus #define in C
strftime() library function
exec family of functions
Arrays & Strings:

Introduction to Arrays in C Language
Strings in C Language
Properties of array in C Language
Do not use sizeof for array parameters
Initialization of variables sized arrays in C
Are array members deeply copied?
What is the difference between single quoted and double quoted declaration of char array?
Initialization of a multidimensional arrays in C/C++
Write one line functions for strcat() and strcmp()
What’s difference between char s[] and char *s in C
gets() is risky to use!
C function to Swap strings,
Storage for Strings in C
Difference between array and pointer
How to dynamically allocate a 2D array in C?
How to pass a 2D array as a parameter in C?
How to write long strings in Multi-lines C/C++?
What are the data types for which it is not possible to create an array?
Variable Length Arrays in C and C++
Short hand array notation
Accessing array out of bounds
strcpy() in C/C++
strcmp() in C/C++
strdup() and strdndup() in C/C++
Pass an array by value
Reverse a string in C/C++
strpbrk() in C
strcoll() in C/C++
ispunct() in C
strspn() in C
isalpha() and isdigit() in C/C++
Control Statements:

What should be data type of case labels of switch statement in C?
For Versus While
A nested loop puzzle
switch statement in C
Difference between while(1) and while(0)
goto statement
Continue Statement
Break Statement
Using range in switch case
Functions:

Functions in C
Importance of function prototype in C
Functions that are executed before and after main() in C
return statement vs exit() in main()
How to Count Variable Numbers of Arguments in C?,
What is evaluation order of function parameters in C?
Does C support function overloading?
How can we return multiple values from a function?
What is the purpose of a function prototype?
Static functions in C
exit(), abort() and assert()
Implicit return type int in C
What happens when a function is called before its declaration in C?
_Noreturn function specifier in C
exit() vs _Exit()
__func__ identifier in C
Callback function in C
Nested functions in C
Parameter Passing Techniques
pow() function in C
tolower() function in C
time() function in C
Pointers:

Introduction to pointers in C and C++
Double Pointer (Pointer to Pointer) in C
Why C treats array parameters as pointers?
Output of the program | Dereference, Reference, Dereference, Reference
Dangling, Void , Null and Wild Pointers
An Uncommon representation of array elements
How to declare a pointer to a function?
Pointer vs Array in C
void pointer in C
NULL pointer in C !
Function Pointer in C
near, far and huge pointers
Generic Linked List in C
restrict keyword in C
const char *p, char * const p and const char * const p
Pointer to an Array
Enum, Struct and Union:

Enum in C
Structures in C
Union in C
Struct Hack
Structure Member Alignment, Padding and Data Packing
Operations on struct variables in C
Bit Fields in C
Structure Sorting (By Multiple Rules) in C++
Flexible array members in structure
Difference between Structure and Union
Difference between C structures and C++ structures
Anonymous Union and Structure in C
Compound Literals in C
Memory Management:

Memory Layout of C Programs,
How to deallocate memory without using free() in C?
calloc() versus malloc()
How does free() know the size of memory to be deallocated?
Use of realloc()
What is Memory Leak? How can we avoid?
File Handling:

fseek() vs rewind() in C
EOF, getc() and feof() in C
fopen() for an existing file in write mode
Read/Write structure to a file
fgets() and gets() in C
Basics of File Handling
fsetpos() in C
rename function in C/C++
tmpfile() function in C
fgetc() and fputc() in C
fseek() in C/C++
ftell() in C
lseek() in C/C++
remove function in C/C++
Merge contents of two files into a third file
Print contents of file in C
Puzzles:

C Program to print numbers from 1 to N without using semicolon?
How to find sum of two numbers without using any operator
How will you show memory representation of C variables?
Condition To Print “HelloWord”
Change/add only one character and print ‘*’ exactly 20 times
How can we sum the digits of a given number in single statement?


What is the best way in C to convert a number to a string?
Calculate Logn in one line
Print “Even” or “Odd” without using Conditional statement
How will you print numbers from 1 to 100 without using loop?
How can we sum the digits of a given number in single statement?
How will you print “Geeks for Geeks” without using a semicolon
Write a one line C function to round floating point numbers
How will implement Your Own sizeof
How to count set bits in a floating point number in C?
How to change the output of printf() in main() ?
How to find length of a string without string.h and loop in C?
Implement your own itoa()
Write a C program that does not terminate when Ctrl+C is pressed
How to measure time taken by a function in C?
Print a long int in C using putchar() only
Convert a floating point number to string in C
How to write a running C code without main()?
Write your own memcpy()
C program to print characters without using format specifiers
C program to print a string without any quote (singe or double) in the program
Execute both if and else statements simultaneously
Print “Hello World” without using any header file
Misc:

Quine – A self-reproducing program
Complicated declarations in C
Use of bool in C
Sequence Points in C | Set 1
Optimization Techniques | Set 2 (swapping),
ASCII NUL, ASCII 0 (’0?) and Numeric literal 0
Little and Big Endian Mystery,
Comparator function of qsort() in C
Program to validate an IP address
Multithreading in C
Assertions in C/C++
fork() in C
Interesting Facts in C Programming
Precision of floating point numbers in C++ (floor(), ceil(), trunc(), round() and setprecision())
setjump() and longjump() in C
nextafter() and nexttoward() in C/C++
pthread_cancel() in C
pthread_equal() in C
pthread_self() in C
Local Labels in C
lvalue and rvalue in C
Get and set the stack size of thread attribute
Difference between fork() and exec()
Errors in C/C++
Why is C considered faster than other languages
Incompatibilities between C and C++
Convert C/C++ code to assembly language
Error Handling in C
Executing main() in C/C++ : Behind the scene
Hygienic Macros in C
Command line arguments in C/C++
scanf(), fscanf(), sscanf(), scanf_s(), fscanf_s(), sscanf_s()
Some Interesting Facts in C Programming
Database Connectivity using C/C++
Function Interposition in C
Macros vs Functions
Write your own memcpy() and memmove()











Array C/C++ Programs

C Program to find sum of elements in a given array

C program to find largest element in an array

Recursive C program to linearly search an element in a given array

C program to multiply two matrices

C/C++ Program for Given an array A[] and a number x, check for pair in A[] with sum as x

C/C++ Program for Majority Element



C/C++ Program for Find the Number Occurring Odd Number of Times

C/C++ Program for Largest Sum Contiguous Subarray

C/C++ Program for Find the Missing Number

C/C++ Program for Search an element in a sorted and pivoted array

C/C++ Program for Merge an array of size n into another array of size m+n

C/C++ Program for Median of two sorted arrays

C/C++ Program for Write a program to reverse an array

C/C++ Program for Program for array rotation

C/C++ Program for Reversal algorithm for array rotation

C/C++ Program for Block swap algorithm for array rotation

C/C++ Program for Maximum sum such that no two elements are adjacent

C/C++ Program for Leaders in an array

C/C++ Program for Sort elements by frequency | Set 1

C/C++ Program for Count Inversions in an array

C/C++ Program for Two elements whose sum is closest to zero

C/C++ Program for Find the smallest and second smallest element in an array

C/C++ Program for Check for Majority Element in a sorted array

C/C++ Program for Maximum and minimum of an array using minimum number of comparisons

C/C++ Program for Segregate 0s and 1s in an array

C/C++ Program for k largest(or smallest) elements in an array | added Min Heap method

C/C++ Program for Maximum size square sub-matrix with all 1s

C/C++ Program for Maximum difference between two elements such that larger element appears after the smaller number

C/C++ Program for Union and Intersection of two sorted arrays

C/C++ Program for Floor and Ceiling in a sorted array

C/C++ Program for A Product Array Puzzle

C/C++ Program for Segregate Even and Odd numbers

C/C++ Program for Find the two repeating elements in a given array

C/C++ Program for Sort an array of 0s, 1s and 2s

C/C++ Program for Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted

C/C++ Program for Find duplicates in O(n) time and O(1) extra space

C/C++ Program for Equilibrium index of an array

C/C++ Program for Which sorting algorithm makes minimum number of memory writes?

C/C++ Program for Turn an image by 90 degree

C/C++ Program for Search in a row wise and column wise sorted matrix

C/C++ Program for Next Greater Element

C/C++ Program for Check if array elements are consecutive | Added Method 3

C/C++ Program for Find the smallest missing number

C/C++ Program for Count the number of occurrences in a sorted array

C/C++ Program for Binary Search

C/C++ Program for Selection Sort

C/C++ Program for Bubble Sort

C/C++ Program for Insertion Sort

C/C++ Program for Merge Sort

C/C++ Program for Heap Sort

C/C++ Program for QuickSort

C/C++ Program for Given an array arr[], find the maximum j – i such that arr[j] > arr[i]

C/C++ Program for Maximum of all subarrays of size k (Added a O(n) method)

C/C++ Program for Find whether an array is subset of another array | Added Method 3

C/C++ Program for Find the minimum distance between two numbers

C/C++ Program for Find the repeating and the missing | Added 3 new methods

C/C++ Program for Print a given matrix in spiral form

C/C++ Program for A Boolean Matrix Question

C/C++ Program for Median in a stream of integers (running integers)

C/C++ Program for Find a Fixed Point in a given array

C/C++ Program for Maximum Length Bitonic Subarray

C/C++ Program for Find the maximum element in an array which is first increasing and then decreasing

C/C++ Program for Count smaller elements on right side

C/C++ Program for Minimum number of jumps to reach end

C/C++ Program for Implement two stacks in an array

C/C++ Program for Find subarray with given sum

C/C++ Program for Dynamic Programming | Set 14 (Maximum Sum Increasing Subsequence)

C/C++ Program for Longest Monotonically Increasing Subsequence Size (N log N)

C/C++ Program for Find a triplet that sum to a given value

C/C++ Program for Find the smallest positive number missing from an unsorted array

C/C++ Program for Find the two numbers with odd occurrences in an unsorted array

C/C++ Program for The Celebrity Problem

C/C++ Program for Dynamic Programming | Set 15 (Longest Bitonic Subsequence)

C/C++ Program for Find a sorted subsequence of size 3 in linear time

C/C++ Program for Largest subarray with equal number of 0s and 1s

C/C++ Program for Dynamic Programming | Set 18 (Partition problem)

C/C++ Program for Maximum Product Subarray

C/C++ Program for Find a pair with the given difference

C/C++ Program for Replace every element with the next greatest

C/C++ Program for Dynamic Programming | Set 20 (Maximum Length Chain of Pairs)

C/C++ Program for Find four elements that sum to a given value | Set 1 (n^3 solution)

C/C++ Program for Find four elements that sum to a given value | Set 2 ( O(n^2Logn) Solution)

C/C++ Program for Sort a nearly sorted (or K sorted) array

C/C++ Program for Maximum circular subarray sum

C/C++ Program for Find the row with maximum number of 1s

C/C++ Program for Median of two sorted arrays of different sizes

C/C++ Program for Print unique rows in a given boolean matrix

C/C++ Program for Shuffle a given array

C/C++ Program for Count the number of possible triangles

C/C++ Program for Iterative Quick Sort

C/C++ Program for Inplace M x N size matrix transpose | Updated

C/C++ Program for Find the number of islands

C/C++ Program for Construction of Longest Monotonically Increasing Subsequence (N log N)

C/C++ Program for Find the first circular tour that visits all petrol pumps

C/C++ Program for Arrange given numbers to form the biggest number

C/C++ Program for Dynamic Programming | Set 27 (Maximum sum rectangle in a 2D matrix)

C/C++ Program for Pancake sorting

C/C++ Program for A Pancake Sorting Problem

C/C++ Program for Tug of War

C/C++ Program for Print Matrix Diagonally

C/C++ Program for Divide and Conquer | Set 3 (Maximum Subarray Sum)

C/C++ Program for Counting Sort

C/C++ Program for Merge Overlapping Intervals

C/C++ Program for Find the maximum repeating number in O(n) time and O(1) extra space

C/C++ Program for Stock Buy Sell to Maximize Profit

C/C++ Program for Rearrange positive and negative numbers in O(n) time and O(1) extra space

C/C++ Program for Sort elements by frequency | Set 2

C/C++ Program for Find a peak element

C/C++ Program for Print all possible combinations of r elements in a given array of size n

C/C++ Program for Given an array of of size n and a number k, find all elements that appear more than n/k times

C/C++ Program for Find the point where a monotonically increasing function becomes positive first time

C/C++ Program for Find the Increasing subsequence of length three with maximum product

C/C++ Program for Find the minimum element in a sorted and rotated array

C/C++ Program for Stable Marriage Problem

C/C++ Program for Merge k sorted arrays | Set 1

C/C++ Program for Radix Sort

C/C++ Program for Move all zeroes to end of array

C/C++ Program for Find number of pairs such that x^y > y^x

C/C++ Program for Count all distinct pairs with difference equal to k

C/C++ Program for Count all possible paths from top left to bottom right of a mXn matrix

C/C++ Program for Suffix Array | Set 1 (Introduction)

C/C++ Program for Rearrange an array so that arr[i] becomes arr[arr[i]] with O(1) extra space

C/C++ Program for Sort n numbers in range from 0 to n^2 – 1 in linear time

C/C++ Program for Count all possible groups of size 2 or 3 that have sum as multiple of 3



Matrix C/C++ Programs

C Program to check if two given matrices are identical
C program to find transpose of a matrix
C program for subtraction of matrices
C program for addition of two matrices
C program to multiply two matrices
C/C++ Program for Print a given matrix in spiral form
C/C++ Program for A Boolean Matrix Question
C/C++ Program for Print Matrix Diagonally
C Program to find the number of islands
C Program to find maximum size square sub-matrix with all 1s
C/C++ program for the celebrity problem
C/C++ Program for Print a given matrix in spiral form

String C/C++ Programs

C program to swap two Strings

C Program to Check if a Given String is Palindrome

C Program to Sort an array of names or strings

C/C++ Program for Return maximum occurring character in the input string

C/C++ Program for Remove all duplicates from the input string.

C/C++ Program for Print all the duplicates in the input string.

C/C++ Program for Remove characters from the first string which are present in the second string

C/C++ Program for A Program to check if strings are rotations of each other or not

C/C++ Program for Print reverse of a string using recursion

C/C++ Program for Write a C program to print all permutations of a given string

C/C++ Program for Divide a string in N equal parts

C/C++ Program for Given a string, find its first non-repeating character

C/C++ Program for Print list items containing all characters of a given word

C/C++ Program for Reverse words in a given string

C/C++ Program for Run Length Encoding

C/C++ Program for Find the smallest window in a string containing all characters of another string

C/C++ Program for Searching for Patterns | Set 1 (Naive Pattern Searching)

C/C++ Program for Searching for Patterns | Set 2 (KMP Algorithm)

C/C++ Program for Searching for Patterns | Set 3 (Rabin-Karp Algorithm)

C/C++ Program for Searching for Patterns | Set 4 (A Naive Pattern Searching Question)

C/C++ Program for Length of the longest substring without repeating characters

C/C++ Program for Print all permutations with repetition of characters

C/C++ Program for Print all interleavings of given two strings

C/C++ Program for Check whether a given string is an interleaving of two other given strings

C/C++ Program for Check whether two strings are anagram of each other

C/C++ Program for Searching for Patterns | Set 5 (Finite Automata)

C/C++ Program for Pattern Searching | Set 6 (Efficient Construction of Finite Automata)

C/C++ Program for Pattern Searching | Set 7 (Boyer Moore Algorithm – Bad Character Heuristic)

C/C++ Program for Dynamic Programming | Set 17 (Palindrome Partitioning)

C/C++ Program for Lexicographic rank of a string

C/C++ Program for Print all permutations in sorted (lexicographic) order

C/C++ Program for Longest Palindromic Substring | Set 1

C/C++ Program for An in-place algorithm for String Transformation

C/C++ Program for Longest Palindromic Substring | Set 2

C/C++ Program for Given a sequence of words, print all anagrams together | Set 1

C/C++ Program for Given a sequence of words, print all anagrams together | Set 2

C/C++ Program for Count words in a given string

C/C++ Program for String matching where one string contains wildcard characters

C/C++ Program for Write your own atoi()

C/C++ Program for Dynamic Programming | Set 29 (Longest Common Substring)

C/C++ Program for Remove “b” and “ac” from a given string

C/C++ Program for Dynamic Programming | Set 33 (Find if a string is interleaved of two other strings)

C/C++ Program for Find the first non-repeating character from a stream of characters

C/C++ Program for Recursively remove all adjacent duplicates

C/C++ Program for Rearrange a string so that all same characters become d distance away

C program to find second most frequent character

Linked List C/C++ Programs:

C/C++ Program for Introduction to Linked List

C/C++ Program for Linked List Insertion

C/C++ Program for Write a function to get Nth node in a Linked List

C/C++ Program for Given only a pointer to a node to be deleted in a singly linked list, how do you delete it?

C/C++ Program to print the middle of a given linked list

C/C++ Program for Nth node from the end of a Linked List

C/C++ Program to delete a Linked List

C/C++ Program to counts the number of times a given int occurs in a Linked List

C/C++ Program for Given only a pointer to a node to be deleted in a singly linked list, how do you delete it?

C/C++ Program to reverse a linked list

C/C++ Program to detect loop in a linked list

C/C++ Program to check if a singly linked list is palindrome

C/C++ Program The Great Tree-List Recursion Problem.

C/C++ Program to Copy a linked list with next and arbit pointer

C/C++ Program for Given a linked list which is sorted, how will you insert in sorted way

C/C++ Program for Write a function to get the intersection point of two Linked Lists.

C/C++ Program for Write a recursive function to print reverse of a Linked List

C/C++ Program for Remove duplicates from a sorted linked list

C/C++ Program for Remove duplicates from an unsorted linked list

C/C++ Program for Reverse a Doubly Linked List

C/C++ Program for Split a Circular Linked List into two halves

C/C++ Program for Practice questions for Linked List and Recursion

C/C++ Program for Move last element to front of a given Linked List

C/C++ Program for Pairwise swap elements of a given linked list

C/C++ Program for Delete a node in a Doubly Linked List

C/C++ Program for Intersection of two Sorted Linked Lists

C/C++ Program for Delete alternate nodes of a Linked List

C/C++ Program for Alternating split of a given Singly Linked List

C/C++ Program for Merge two sorted linked lists

C/C++ Program for Identical Linked Lists

C/C++ Program for Merge Sort for Linked Lists

C/C++ Program for Reverse a Linked List in groups of given size

C/C++ Program for Sorted insert for circular linked list

C/C++ Program for Reverse alternate K nodes in a Singly Linked List

C/C++ Program for Delete nodes which have a greater value on right side

C/C++ Program for Segregate even and odd nodes in a Linked List

C/C++ Program for Detect and Remove Loop in a Linked List

C/C++ Program for XOR Linked List – A Memory Efficient Doubly Linked List | Set 1

C/C++ Program for Add two numbers represented by linked lists | Set 1

C/C++ Program for How to write C functions that modify head pointer of a Linked List?

C/C++ Program for Delete a given node in Linked List under given constraints

C/C++ Program for Sorted Linked List to Balanced BST

C/C++ Program for In-place conversion of Sorted DLL to Balanced BST

C/C++ Program for Union and Intersection of two Linked Lists

C/C++ Program for XOR Linked List – A Memory Efficient Doubly Linked List | Set 2

C/C++ Program for Find a triplet from three linked lists with sum equal to a given number

C/C++ Program for Rotate a Linked List

C/C++ Program for Implement LRU Cache

C/C++ Program for Flattening a Linked List

C/C++ Program for Add two numbers represented by linked lists | Set 2

C/C++ Program for Sort a linked list of 0s, 1s and 2s

C/C++ Program for Flatten a multilevel linked list

C/C++ Program for QuickSort on Doubly Linked List

C/C++ Program for Swap Kth node from beginning with Kth node from end in a Linked List

C/C++ Program for Design a stack with operations on middle element

C/C++ Program for Delete N nodes after M nodes of a linked list

C/C++ Program for QuickSort on Singly Linked List

C/C++ Program for Merge a linked list into another linked list at alternate positions

C/C++ Program for Pairwise swap elements of a given linked list by changing links

C/C++ Program for Given a linked list, reverse alternate nodes and append at the end

C Program for Bubble Sort on Linked List

Stack C/C++ Programs:

C/C++ Program for Introduction to Stack

C/C++ Program for Infix to Postfix Conversion using Stack


C/C++ Program for Evaluation of Postfix Expression

C/C++ Program for Reverse a Sting using Stack

C/C++ Program for Implement two stacks in an array

C/C++ Program for Check for balanced parentheses in an expression

C/C++ Program for Next Greater Element

C/C++ Program for Reverse a stack using recursion

C/C++ Program for The Stock Span Problem

C/C++ Program for Design and Implement Special Stack Data Structure

C/C++ Program for Implement Stack using Queues

C/C++ Program for Design a stack with operations on middle element



Queue C/C++ Programs:

C/C++ Program for Queue Introduction and Array Implementation

C/C++ Program for Linked List Implementation of Queue

C/C++ Program for Implement Queue using Stacks

C/C++ Program for Check whether a given Binary Tree is Complete or not

C/C++ Program for Find the largest multiple of 3

Tree C/C++ Programs:

C/C++ Program for Tree Traversals

C/C++ Program for Write a C program to Calculate Size of a tree

C/C++ Program for Write C Code to Determine if Two Trees are Identical

C/C++ Program for Write a C Program to Find the Maximum Depth or Height of a Tree

C/C++ Program for Write a C program to Delete a Tree.

C/C++ Program for Write an Efficient C Function to Convert a Binary Tree into its Mirror Tree

C/C++ Program for If you are given two traversal sequences, can you construct the binary tree?

C/C++ Program for Given a binary tree, print out all of its root-to-leaf paths one per line.

C/C++ Program for Lowest Common Ancestor in a Binary Search Tree.

C/C++ Program for The Great Tree-List Recursion Problem.

C/C++ Program for Find the node with minimum value in a Binary Search Tree

C/C++ Program for Level Order Tree Traversal

C/C++ Program for Program to count leaf nodes in a binary tree

C/C++ Program for A program to check if a binary tree is BST or not

C/C++ Program for Level order traversal in spiral form

C/C++ Program for Check for Children Sum Property in a Binary Tree.

C/C++ Program for Convert an arbitrary Binary Tree to a tree that holds Children Sum Property

C/C++ Program for Diameter of a Binary Tree

C/C++ Program for How to determine if a binary tree is height-balanced?

C/C++ Program for Inorder Tree Traversal without Recursion

C/C++ Program for Inorder Tree Traversal without recursion and without stack!

C/C++ Program for Root to leaf path sum equal to a given number

C/C++ Program for Construct Tree from given Inorder and Preorder traversals

C/C++ Program for Given a binary tree, print all root-to-leaf paths

C/C++ Program for Double Tree

C/C++ Program for Maximum width of a binary tree

C/C++ Program for Total number of possible Binary Search Trees with n keys

C/C++ Program for Foldable Binary Trees

C/C++ Program for Print nodes at k distance from root

C++ Program for Inorder predecessor and successor of a given key in BST

C/C++ Program for Sorted order printing of a given array that represents a BST

C/C++ Program for Applications of tree data structure

C/C++ Program for Inorder Successor in Binary Search Tree

C/C++ Program for Find k-th smallest element in BST (Order Statistics in BST)

C/C++ Program for Get Level of a node in a Binary Tree

C/C++ Program for Print Ancestors of a given node in Binary Tree

C/C++ Program for Print BST keys in the given range

C/C++ Program for Tournament Tree (Winner Tree) and Binary Heap

C/C++ Program for Check if a given Binary Tree is SumTree

C/C++ Program for Decision Trees – Fake (Counterfeit) Coin Puzzle (12 Coin Puzzle)

C/C++ Program for Check if a binary tree is subtree of another binary tree

C/C++ Program for Trie | (Insert and Search)

C/C++ Program for Trie | (Delete)

C/C++ Program for Connect nodes at same level

C/C++ Program for Connect nodes at same level using constant extra space

C/C++ Program for Sorted Array to Balanced BST

C/C++ Program for Populate Inorder Successor for all nodes

C/C++ Program for Convert a given tree to its Sum Tree

C/C++ Program for Find the largest BST subtree in a given Binary Tree

C/C++ Program for AVL Tree | Set 1 (Insertion)

C/C++ Program for Vertical Sum in a given Binary Tree

C/C++ Program for AVL Tree | Set 2 (Deletion)

C/C++ Program for Merge Two Balanced Binary Search Trees

C/C++ Program for Find the maximum sum leaf to root path in a Binary Tree

C/C++ Program for Merge two BSTs with limited extra space

C/C++ Program for Binary Tree to Binary Search Tree Conversion

C/C++ Program for Construct Special Binary Tree from given Inorder traversal

C/C++ Program for Construct a special tree from given preorder traversal

C/C++ Program for Check if each internal node of a BST has exactly one child

C/C++ Program for Check whether a given Binary Tree is Complete or not

C/C++ Program for Boundary Traversal of binary tree

C/C++ Program for Two nodes of a BST are swapped, correct the BST

C/C++ Program for Construct Full Binary Tree from given preorder and postorder traversals

C/C++ Program for Construct BST from given preorder traversal | Set 1

C/C++ Program for Construct BST from given preorder traversal | Set 2

C/C++ Program for Floor and Ceil from a BST

C/C++ Program for Iterative Preorder Traversal

C/C++ Program for Convert a BST to a Binary Tree such that sum of all greater keys is added to every key

C/C++ Program for Morris traversal for Preorder

C/C++ Program for Linked complete binary tree & its creation

C/C++ Program for Ternary Search Tree

C/C++ Program for Segment Tree | Set 1 (Sum of given range)

C/C++ Program for Segment Tree | Set 2 (Range Minimum Query)

C/C++ Program for Dynamic Programming | Set 26 (Largest Independent Set Problem)

C/C++ Program for Iterative Postorder Traversal | Set 1 (Using Two Stacks)

C/C++ Program for Iterative Postorder Traversal | Set 2 (Using One Stack)

C/C++ Program for Find if there is a triplet in a Balanced BST that adds to zero

C/C++ Program for Find a pair with given sum in a Balanced BST

C/C++ Program for Reverse Level Order Traversal

C/C++ Program for Construct Complete Binary Tree from its Linked List Representation

C/C++ Program for Remove BST keys outside the given range

C/C++ Program for Convert a given Binary Tree to Doubly Linked List | Set 1

C/C++ Program for B-Tree | Set 1 (Introduction)

C/C++ Program for B-Tree | Set 2 (Insert)

C/C++ Program for Longest prefix matching – A Trie based solution in Java

C/C++ Program for Tree Isomorphism Problem

C/C++ Program for Find all possible interpretations of an array of digits

C/C++ Program for Iterative Method to find Height of Binary Tree

C/C++ Program for Custom Tree Problem

C/C++ Program for Check for Identical BSTs without building the trees

C/C++ Program for Convert a given Binary Tree to Doubly Linked List | Set 2

C/C++ Program for Print ancestors of a given binary tree node without recursion

C/C++ Program for Difference between sums of odd level and even level nodes of a Binary Tree

C/C++ Program for Print Postorder traversal from given Inorder and Preorder traversals

C/C++ Program for Find depth of the deepest odd level leaf node

C/C++ Program for Check if all leaves are at same level

C/C++ Program for Print Left View of a Binary Tree

C/C++ Program for B-Tree | Set 3 (Delete)

C/C++ Program for Add all greater values to every node in a given BST

C/C++ Program for Remove all nodes which don’t lie in any path with sum>= k

C/C++ Program for Extract Leaves of a Binary Tree in a Doubly Linked List

C/C++ Program for Deepest left leaf node in a binary tree

C/C++ Program for Find next right node of a given key

C/C++ Program for Splay Tree | Set 1 (Search)

C/C++ Program for Splay Tree | Set 2 (Insert)

C/C++ Program for Sum of all the numbers that are formed from root to leaf paths

C/C++ Program for Red-Black Tree | Set 1 (Introduction)

C/C++ Program for Red-Black Tree | Set 2 (Insert)

C/C++ Program for Convert a given Binary Tree to Doubly Linked List | Set 3

C/C++ Program for Print all nodes that don’t have sibling

C/C++ Program for Lowest Common Ancestor in a Binary Tree | Set 1

C/C++ Program for Find distance between two given keys of a Binary Tree

C/C++ Program for Print all nodes that are at distance k from a leaf node

C/C++ Program for Check if a given Binary Tree is height balanced like a Red-Black Tree

C/C++ Program for Interval Tree

C/C++ Program for Print a Binary Tree in Vertical Order | Set 1

C/C++ Program for Print all nodes at distance k from a given node

C/C++ Program to find the maximum path sum between two leaves of a binary tree

Graph C/C++ Programs:

C/C++ Program for Depth First Traversal for a Graph

C/C++ Program for Breadth First Traversal for a Graph

C/C++ Program for Detect Cycle in a Directed Graph

C/C++ Program for Find if there is a path between two vertices in a directed graph

C/C++ Program for Hamiltonian Cycle Detection

C/C++ Program for Dynamic Programming | Set 16 (Floyd Warshall Algorithm)

C/C++ Program for Find the number of islands

C/C++ Program for Union-Find Algorithm | Set 1 (Detect Cycle in a an Undirected Graph)

C/C++ Program for Union-Find Algorithm | Set 2 (Union By Rank and Path Compression)

C/C++ Program for Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm)

C/C++ Program for Graph and its representations

C/C++ Program for Greedy Algorithms | Set 5 (Prim’s Minimum Spanning Tree (MST))

C/C++ Program for Greedy Algorithms | Set 6 (Prim’s MST for Adjacency List Representation)

C/C++ Program for Greedy Algorithms | Set 7 (Dijkstra’s shortest path algorithm)

C/C++ Program for Greedy Algorithms | Set 8 (Dijkstra’s Algorithm for Adjacency List Representation)

C/C++ Program for Dynamic Programming | Set 23 (Bellman–Ford Algorithm)

C/C++ Program for Transitive closure of a graph

C/C++ Program for Check whether a given graph is Bipartite or not

C/C++ Program for Topological Sorting

C/C++ Program for Shortest Path in Directed Acyclic Graph

C/C++ Program for Strongly Connected Components

C/C++ Program for Articulation Points (or Cut Vertices) in a Graph

C/C++ Program for Bridges in a graph

C/C++ Program for Biconnected graph

C/C++ Program for Connectivity in a directed graph

C/C++ Program for Eulerian path and circuit

C/C++ Program for Ford-Fulkerson Algorithm for Maximum Flow Problem

C/C++ Program for Maximum Bipartite Matching

C/C++ Program for Find minimum s-t cut in a flow network

C/C++ Program for Fleury’s Algorithm for printing Eulerian Path or Circuit

C/C++ Program for Longest Path in a Directed Acyclic Graph

C/C++ Program for Find maximum number of edge disjoint paths between two vertices

C/C++ Program for Detect cycle in an undirected graph

C/C++ Program for Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)

C/C++ Program for Travelling Salesman Problem | Set 2 (Approximate using MST)

C/C++ Program for Johnson’s algorithm for All-pairs shortest paths

C/C++ Program for Graph Coloring | Set 1 (Introduction and Applications)

C/C++ Program for Graph Coloring | Set 2 (Greedy Algorithm)

C/C++ Program for Some interesting shortest path questions | Set 1

C/C+ program to Reverse alternate levels of a perfect binary tree

C/C++ program to transform a BST to greater sum tree



Bit-Magic C/C++ Program:

C/C++ Program for Next Power of 2

C/C++ Program for Write an Efficient Method to Check if a Number is Multiple of 3

C/C++ Program for Write a C program to find the parity of an unsigned integer

C/C++ Program for Efficient way to multiply with 7

C/C++ Program for Write one line C function to find whether a no is power of two

C/C++ Program for Position of rightmost set bit

C/C++ Program for Find the Number Occurring Odd Number of Times

C/C++ Program for Check for Integer Overflow

C/C++ Program for Little and Big Endian Mystery

C/C++ Program for Write an Efficient C Program to Reverse Bits of a Number

C/C++ Program for Count set bits in an integer

C/C++ Program for Count number of bits to be flipped to convert A to B

C/C++ Program for Find the two non-repeating elements in an array of repeating elements

C/C++ Program for Rotate bits of a number

C/C++ Program for Compute the minimum or maximum of two integers without branching

C/C++ Program for Compute modulus division by a power-of-2-number

C/C++ Program for Compute the integer absolute value (abs) without branching

C/C++ Program for Find whether a given number is a power of 4 or not

C/C++ Program for Turn off the rightmost set bit

C/C++ Program for Multiply a given Integer with 3.5

C/C++ Program for Add 1 to a given number

C/C++ Program for Optimization Techniques | Set 1 (Modulus)

C/C++ Program for Next higher number with same number of set bits

C/C++ Program for Program to count number of set bits in an (big) array

C/C++ Program for A Boolean Array Puzzle

C/C++ Program for Smallest of three integers without comparison operators

C/C++ Program for Add two numbers without using arithmetic operators

C/C++ Program for Swap bits in a given number

C/C++ Program for Count total set bits in all numbers from 1 to n

C/C++ Program for Detect if two integers have opposite signs

C/C++ Program for Find the element that appears once

C/C++ Program for Binary representation of a given number

C/C++ Program for Write your own strcmp that ignores cases

C/C++ Program for Add two bit strings

C/C++ Program for Swap all odd and even bits

C/C++ Program for Find position of the only set bit

C/C++ Program for Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication)

C/C++ Program for How to swap two numbers without using a temporary variable?

C/C++ Program for Check if a number is multiple of 9 using bitwise operators

C/C++ Mathematical Programs

C/C++ Program for Write an Efficient Method to Check if a Number is Multiple of 3

C Program to print first n Fibonacci Numbers

C program to find area of a circle

C program to find area of a triangle

C program to calculate the value of nPr

C Program to find sum of series 1 + 1/2 + 1/3 + 1/4 + .. + 1/n

C/C++ Program for Efficient way to multiply with 7

C/C++ Program for Write a C program to print all permutations of a given string

C/C++ Program for Lucky Numbers

C/C++ Program for Write a program to add two numbers in base 14

C/C++ Program for Babylonian method for square root

C/C++ Program for Multiply two integers without using multiplication, division and bitwise operators, and no loops

C/C++ Program for Print all combinations of points that can compose a given number

C/C++ Program for Write you own Power without using multiplication(*) and division(/) operators

C/C++ Program for Fibonacci numbers

C/C++ Program for Average of a stream of numbers

C/C++ Program for Check whether a given point lies inside a triangle or not

C/C++ Program for Count numbers that don’t contain 3

C/C++ Program for Magic Square

C/C++ Program for Sieve of Eratosthenes

C/C++ Program for Find day of the week for a given date

C/C++ Program for DFA based division

C/C++ Program for Generate integer from 1 to 7 with equal probability

C/C++ Program for Given a number, find the next smallest palindrome

C/C++ Program for Make a fair coin from a biased coin

C/C++ Program for Check divisibility by 7

C/C++ Program for Find the largest multiple of 3

C/C++ Program for Lexicographic rank of a string

C/C++ Program for Print all permutations in sorted (lexicographic) order

C/C++ Program for Shuffle a given array

C/C++ Program for Space and time efficient Binomial Coefficient

C/C++ Program for Reservoir Sampling

C/C++ Program for Pascal’s Triangle

C/C++ Program for Select a random number from stream, with O(1) space

C/C++ Program for Find the largest multiple of 2, 3 and 5

C/C++ Program for Efficient program to calculate e^x

C/C++ Program for Measure one litre using two vessels and infinite water supply

C/C++ Program for Efficient program to print all prime factors of a given number

C/C++ Program for Print all possible combinations of r elements in a given array of size n

C/C++ Program for Random number generator in arbitrary probability distribution fashion

C/C++ Program for How to check if two given line segments intersect?

C/C++ Program for How to check if a given point lies inside or outside a polygon?

C/C++ Program for Convex Hull | Set 1 (Jarvis’s Algorithm or Wrapping)

C/C++ Program for Convex Hull | Set 2 (Graham Scan)

C/C++ Program for How to check if a given number is Fibonacci number?

C/C++ Program for Russian Peasant Multiplication

C Program to Draw a circle without floating point arithmetic

C++ Program to print all palindromes in a given range

C/C++ Dynamic Programming Programs

C/C++ Program for Largest Sum Contiguous Subarray

C/C++ Program for Ugly Numbers

C/C++ Program for Maximum size square sub-matrix with all 1s

C/C++ Program for Program for Fibonacci numbers

C/C++ Program for Overlapping Subproblems Property

C/C++ Program for Optimal Substructure Property

C/C++ Program for Longest Increasing Subsequence

C/C++ Program for Longest Common Subsequence)

C/C++ Program for Edit Distance

C/C++ Program for Min Cost Path

C/C++ Program for Length of the longest substring without repeating characters

C/C++ Program for Minimum number of jumps to reach end

C/C++ Program for Coin Change)

C/C++ Program for Matrix Chain Multiplication

C/C++ Program for Binomial Coefficient

C/C++ Program for 0-1 Knapsack Problem

C/C++ Program for Egg Dropping Puzzle

C/C++ Program for Longest Palindromic Subsequence

C/C++ Program for Cutting a Rod

C/C++ Program for Maximum Sum Increasing Subsequence

C/C++ Program for Longest Bitonic Subsequence

C/C++ Program for Floyd Warshall Algorithm

C/C++ Program for Palindrome Partitioning

C/C++ Program for Partition problem

C/C++ Program for Word Wrap Problem

C/C++ Program for Maximum Length Chain of Pairs

C/C++ Program for Box Stacking Problem

C/C++ Program for Longest Palindromic Substring

C/C++ Program for Bellman–Ford Algorithm

C/C++ Program for Optimal Binary Search Tree

C/C++ Program for Subset Sum Problem

C/C++ Program for Largest Independent Set Problem

C/C++ Program for Maximum sum rectangle in a 2D matrix

C/C++ Program for Minimum insertions to form a palindrome

C/C++ Program for Longest Common Substring

C/C++ Program for Dice Throw

C/C++ Program for Optimal Strategy for a Game

C/C++ Program for Word Break Problem

C/C++ Program for Find if a string is interleaved of two other strings

C/C++ Program for Assembly Line Scheduling

C/C++ Program for Longest Arithmetic Progression

C/C++ Program for Maximum Product Cutting

C/C++ Program for Count all possible paths from top left to bottom right of a mXn matrix



C/C++ Greedy Algorithm Programs

C/C++ Program Activity Selection Problem

C/C++ Program Kruskal’s Minimum Spanning Tree Algorithm

C/C++ Program for Huffman Coding

C/C++ Program for Efficient Huffman Coding for Sorted Input

C/C++ Program for Prim’s Minimum Spanning Tree (MST)

C/C++ Program for Prim’s MST for Adjacency List Representation

C/C++ Program for Dijkstra’s shortest path algorithm

C/C++ Program for Dijkstra’s Algorithm for Adjacency List Representation

C/C++ Program for Graph Coloring

C/C++ Program for Rearrange a string so that all same characters become d distance away

C/C++ Backtracking Programs

C/C++ Program to print all permutations of a given string

C/C++ Program The Knight’s tour problem

C/C++ Program for Rat in a Maze

C/C++ Program for N Queen Problem

C/C++ Program for Subset Sum

C/C++ Program for m Coloring Problem

C/C++ Program for Hamiltonian Cycle

C/C++ Program for Sudoku

C/C++ Program for Tug of War

C/C++ Program for (Solving Cryptarithmetic Puzzles

C/C++ Divide and Conquer Programs:

C/C++ Program for Write a C program to calculate pow(x,n)

C/C++ Program for Median of two sorted arrays

C/C++ Program for Count Inversions in an array

C/C++ Program for Check for Majority Element in a sorted array

C/C++ Program for Maximum and minimum of an array using minimum number of comparisons

C/C++ Program for Program to count number of set bits in an (big) array

C/C++ Program for Count the number of occurrences in a sorted array

C/C++ Program for Find a Fixed Point in a given array

C/C++ Program for Find the maximum element in an array which is first increasing and then decreasing

C/C++ Program for Median of two sorted arrays of different sizes

C/C++ Program for Closest Pair of Points

C/C++ Program for Maximum Subarray Sum

C/C++ Program for Largest Rectangular Area in a Histogram

C/C++ Program for Karatsuba algorithm for fast multiplication)

C/C++ Program for Find a peak element

C/C++ Program for Find the point where a monotonically increasing function becomes positive first time

C/C++ Program for Find the minimum element in a sorted and rotated array

C/C++ Program for Closest Pair of Points | O(nlogn) Implementation

C/C++ String Searching Programs:

C/C++ Program for Naive Pattern Searching

C/C++ Program for KMP Algorithm

C/C++ Program for Rabin-Karp Algorithm

C/C++ Program for A Naive Pattern Searching Question

C/C++ Program for Finite Automata

C/C++ Program for Efficient Construction of Finite Automata

C/C++ Program for Boyer Moore Algorithm – Bad Character Heuristic

C/C++ Program for String matching where one string contains wildcard characters

C/C++ Program for Suffix Array

C/C++ Geometric Algorithm Programs:

C/C++ Program for How to check if two given line segments intersect?

C/C++ Program for How to check if a given point lies inside or outside a polygon?

C/C++ Program for Convex Hull | (Jarvis’s Algorithm or Wrapping)

C/C++ Program for Convex Hull | (Graham Scan)

C/C++ Program for Given n line segments, find if any two segments intersect

C/C++ Program for Closest Pair of Points | O(nlogn) Implementation

C/C++ Program for Find if two rectangles overlap

C/C++ Misc Programs:

C Program to print environment variable

C Program for Tower of Hanoi

C Program to print Floyd’s triangle

C Program to Swap two Numbers

C program swap two numbers without using a temporary variable

C Program to check if a given year is leap year

C Program to sum the digits of a given number in single statement?

C program to print numbers from 1 to 100 without using loop?

C Program to print contents of file

C program to copy contents of one file to another file

C Program to list all files and sub-directories in a directory

C program to delete a file

C Program to merge contents of two files into a third file

C Program to count number of lines in a file

C/C++ Program for Check if a number is Palindrome

C/C++ Program for Print all possible combinations of r elements in a given array of size n

C/C++ Program for Print all possible strings of length k that can be formed from a set of n characters

C/C++ Program to Find Excel column name from a given column number

C/C++ Program to Find next greater number with same set of digits

C/C++ Program to Count Possible Decodings of a given Digit Sequence

C/C++ Program to calculate the angle between hour hand and minute hand














How to start learning Java
Setting up the environment
The Hello World Example(Practice)
Java Naming Conventions
JVM
JVM Stack Area
JVM Shutdown Hook
Java Class File
Differences between JDK, JRE and JVM
Does JVM create object of Main class?
How is Java platform independent?
JDBC Drivers
Is main method compulsory in Java?
File names and class names
How to run java class file which is in different directory?
Microservices Introduction
Using predefined class name as Class or Variable name in Java
How do I become a good Java programmer?
Basics
Java Identifiers
Data types
How to define our own data type in java(enum)
Enum with Customized Value
StringBuffer appendCodePoint() Method
Variables
Scope of Variables
Final variables
Bounded Type Parameters
Loops in Java(Practice)
For-each loop in Java
For Loop in Java | Important points
Decision Making(if, if-else, switch, break, continue, jump)(Practice)
Switch Statement in Java(Practice)
String in Switch Case in Java
Forward declarations
Widening Primitive Conversion 
Type conversion in Java
Comments in Java
Does Java support goto?
Interesting facts about null in Java
Using _ (underscore) as variable name
Currying Functions in Java with Examples
Using underscore in Numeric Literals
Binary search in Java
Sorting in Java


OOP concepts
Classes and Objects
Java object storage
Different ways to create objects in Java
How to swap or exchange objects
Inheritance in Java
Encapsulation in Java
Abstraction in Java
Run-time Polymorphism in Java
Association,Composition and Aggregation
Access and Non Access Modifiers in Java
Access Modifiers
this reference
Method Overloading
Output of Java program | Set 22 (Overloading)
Method Overriding
Output of Java program | Set 18 (Overriding)
Understanding “static” in “public static void main” in Java
Overloading or Overriding static methods
Shadowing of static methods(Also called Method Hiding)
Static methods vs Instance methods in Java
Assigning values to static final variables in Java
Covariant return types
Object class
Static class in Java
Flexible nature of java.lang.Object
Overriding equals method of Object class
Overriding toString() method of Object class
Instance Variable Hiding 
Static blocks in Java
initializer block in java
instance initializer block in java(non-static block)
Static vs Dynamic Binding
Why Java is not a purely Object-Oriented Language?
Understanding Classes and Objects in Java
Inheritance
Inheritance in Java
Multiple Inheritance
Why Java does’nt support Multiple Inheritance – The Diamond Problem
Java Object Creation of Inherited Class
Inheritance and constructors
Interfaces and Inheritance
Using final with Inheritance
Accessing Grandparent’s member
Override private methods
More restrictive access to a derived class method in Java
Parent and Child classes having same data member 
Object Serialization with Inheritance
Referencing Subclass objects with Subclass vs Superclass reference
Does overloading work with inheritance
Output of Java Program | Set 20 (Inheritance)
Operators
All Operators
Bitwise operators in Java
new operator
Bitwise right shift operators
Java instanceof operator and its applications
Autoboxed Integer objects
Addition and Concatenation
Numeric Promotion in Conditional Expression
Input and Output


Character Stream Vs Byte Stream
DoubleStream mapToObj() in Java
Command Line arguments
Scanner Class
Scanner and nextChar()
Scanner vs BufferReader Class
Formatted output
Fast I/O for Competitive Programming
Reading input from console
Strings in Java
String Class(Practice)
StringBuffer Class
StringBuilder Class
StringTokenizer class – Set 1, Set 2
StringJoiner in Java8
Implementations:
Initialize and Compare Strings 
String vs StringBuilder vs StringBuffer
When to use StringJoiner over StringBuilder?
Integer to String Conversions
String to Integer– parseInt()
Swap two Strings without using third variable 
Searching characters and substring in a String
Compare two Strings in Java
Reverse a string in Java (5 Different Ways)
Remove Leading Zeros From String in Java
Trim (Remove leading and trailing spaces) a string
Counting number of lines, words, characters and paragraphs in a text file using Java
Check if a string contains only alphabets in Java using Lambda expression
Remove elements from a List that satisfy given predicate in Java
Check if a string contains only alphabets in Java using ASCII values
Check if a string contains only alphabets in Java using Regex
More >>
Arrays in Java
Arrays in Java(Practice)
Default Array values
Util Arrays Class (Contains utility functions for Arrays)
Reflect Array class in Java
util.Arrays vs reflect.Array in Java
Final arrays
Interesting facts about Array assignment in Java
Jagged Array
Array IndexOutofbounds Exception
Array vs ArrayList in Java
Implementations:
Compare two arrays 
ArrayList to Array Conversion 
Merge arrays into a new object array in Java
More >>
Stream in Java
Java Stream
Java Stream.Builder
Java IntStream
Java IntStream.Builder
Java LongStream
Java LongStream.Builder
Java DoubleStream
Java DoubleStream.Builder
Java Stream Collectors
Implementations:
10 Ways to Create a Stream in Java
How to print elements of a Stream in Java 8
Program to Iterate over a Stream with Indices in Java 8
How to get ArrayList from Stream in Java 8
More >>
Important Keywords
List of all Java Keywords
Important Keywords in Java
this keyword
super Keyword
static keyword
final keyword
final, finally and finalize in Java
abstract Keyword
transient keyword in Java
volatile keyword in Java
strictfp keyword
C++ vs Java
C++ vs Java
Static keyword in C++ vs Java
Exception Handling in C++ vs Java
Inheritance in C++ vs Java
Virtual behavior differ in C++ vs Java
Foreach in C++ and Java
C/C++ Pointers vs Java References
Comparison of boolean data type in C++ and Java
Floating Point Operations & Associativity in C, C++ and Java
Methods in Java
Methods
Parameters passing
Returning Multiple values
Throwable fillInStackTrace() method in Java
Valid variants of main()
Variable Arguments (Varargs) method
Method Overloading
Different ways of Method Overloading in Java
Method overloading and null error
Method Overloading with Autoboxing and Widening
Method Overloading and Ambiguity in Varargs
Overloading main()
Overriding equals method
Overriding toString() method
Private and final methods
Java is Strictly Pass by Value
Clone() method
Remote Method Invocation
Default Methods
Passing and Returning Objects in Java
Date after() method in Java
System.exit() method
Constructors
Constructors in Java
Default constructor
Assigning values to static final variables
Copy Constructor
Constructor Chaining
Private Constructors and Singleton Classes
Java Interview Questions on Constructors
Singleton Class
Constructor Overloading
Output of Java Programs | Set 14 (Constructors)
Exception Handling
Exceptions
OutOfMemoryError Exception
3 Different ways to print Exception messages in Java
flow control in try-catch-finally
Types of Exceptions
Catching base and derived classes as exceptions
Checked vs Unchecked Exceptions
Throw and Throws
User-defined Custom Exception
Infinity or Exception?
Multicatch
Chained Exceptions
Null Pointer Exception
Output of Java program | Set 12(Exception Handling)
Interfaces and Abstract Classes
Interfaces
Access specifier for methods in interfaces
Access specifiers for classes or interfaces
Abstract Classes
Difference between Abstract Class and Interface in Java
Comparator Interface
Java Interface methods
Nested Interface
Nested Classes in Java
Inner class in java
Local Inner Class in Java
Anonymous Inner Class in Java
Functional Interfaces
What is a Marker interface
Questions on Abstract Classes and Interfaces
Output of Java program | Set 15 (Inner Classes)
Static method in Interface in Java
Function Interface in Java with Examples
Apache in Java

Apache POI | Introduction
Apache POI | Getting Started
Reading and Writing data to excel file using Apache POI
Creating Sheets in Excel File in Java using Apache POI
Creating a Cell at specific position in Excel file using Java
Opening Existing Excel sheet in Java using Apache POI
Java Packages
Packages Introduction
java.io package
java.lang package
java.util package
Collection in Java
Collection:
AbstractCollection
Collections Class in Java
Enumeration, Iterators and ListIterators
Convert an Iterable to Collection in Java
Using Iterators
Iterator vs Foreach
Types of iterator
Creating Sequential Stream from an Iterator in Java
Implementations:
Output of Java Program | Set 13(Collections)
Double Brace Initialization
List:
AbstractList
AbstractSequentialList
ArrayList (Practice)
LinkedList
Immutable List in Java (Guava)
java.util.Concurrent:
CopyOnWriteArrayList
Implementations:
Custom ArrayList in Java
Java Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayList
More >>
Queue:
AbstractQueue
java.util.Concurrent:
ArrayBlockingQueue
ConcurrentLinkedQueue
LinkedBlockingQueue
LinkedTransferQueue
PriorityBlockingQueue
Deque:
ArrayDeque
java.util.Concurrent:
ConcurrentLinkedDeque
LinkedBlockingDeque
Set:
AbstractSet
EnumSet
HashSet
TreeSet
java.util.Concurrent:
ConcurrentSkipListSet
CopyOnWriteArraySet
LinkedHashSet
Implementations:
Internal working of Set/HashSet
Merge two sets in Java
Disjoint Set Data Structures (Java Implementation)
More >>
Map:
EnumMap
HashMap
SortedMap
WeakHashMap
ImmutableMap (Guava)
LinkedHashMap
IdentityHashMap
Dictionary
java.util.Concurrent:
ConcurrentHashMap
Implementations:
Working of HashMap
Traverse through a HashMap in Java
Program to Convert HashMap to TreeMap in Java
More >>
HashTable
Stack
Vector
Collection Interview FAQ’s
Vector vs ArrayList
ArrayList vs LinkedList
Comparable vs Comparator
Differences between TreeMap, HashMap and LinkedHashMap
HashMap vs HashTable
Hashmap vs WeakHashMap in Java
How to Synchronize ArrayList in Java
ArrayList and LinkedList remove() methods
How to Remove an element from ArrayList
Java.nio
IntBuffer methods in Java
FloatBuffer methods in Java
DoubleBuffer methods in Java
ShortBuffer methods in Java
ByteBuffer methods in Java
CharBuffer methods in Java
Java.Security
Signature methods in Java
SecureRandom methods in Java
KeyPairGenerator methods in Java
KeyFactory methods in Java
AlgorithmParameterGenerator methods in Java
Provider methods in Java
Multithreading
Multithreading
Lifecycle and states of a thread
Main thread
Methods to prevent thread execution
inter thread communication
Java.lang.Thread class
Start() function in multithreading 
Java Thread Priority
Joining Threads in Java
Naming a thread and fetching name of current thread in Java
Synchronization
Method and Block Synchronization
Producer-Consumer solution
Thread Pools in Java
Semaphore in Java
Java.util.concurrent.Semaphore class in Java
CountDownLatch
Deadlock in java
Daemon thread
Reentrant Lock
Cyclic Barrier in Java
Callable and Future in Java
Runtime Class
Output of Java program | Set 16 (Threads)
Garbage Collection
Garbage Collection
How to make object eligible for garbage collection in Java?
Mark-and-Sweep
Island of Isolation
Automatic Resource Management
Output of Java programs | Set 10 (Garbage Collection)
Iterator vs Collection in Java
Wrapper Classes
Wrapper Classes in Java
Primitive Wrapper Classes are Immutable in Java
Number Class
Integer class
Byte class
Short class
Long class
Float class
Double class
Boolean Class
Character Class
Autoboxing and Unboxing in Java
Reflection in Java
Reflection in Java
Method Class in Java
Reflect Array class in Java
util.Arrays vs reflect.Array in Java
new operator vs newInstance()
instanceof operator vs isInstance() 
File Handling
File class
Ways of Reading a text file in Java
file permissions in java
Moving a file from one directory to another using Java
Copying file using FileStreams
Delete a file using Java
Java program to delete duplicate lines in text file
Java program to merge two files alternatively into third file
Java program to List all files in a directory and nested sub-directories | Recursive approach
Java program to delete certain text from a file
Check if a File is hidden in Java
Redirecting System.out.println() output to a file
Java Tuple
Introduction
Unit Class in JavaTuples
Pair Class in JavaTuples
Triplet Class in JavaTuples
Quartet Class in JavaTuples
Quintet Class in JavaTuples
Sextet Class in JavaTuples
Septet Class in JavaTuples
Octet Class in JavaTuples
Ennead Class in JavaTuples
Decade Class in JavaTuples
LabelValue Class in JavaTuples
KeyValue Class in JavaTuples
Implement Pair Class with Unit Class in Java using JavaTuples
Implement Quartet Class with Triplet Class in Java using JavaTuples
Implement Triplet Class with Pair Class in Java using JavaTuples
Implement Decade Class from Ennead Class in Java using JavaTuples
Implement Ennead Class from Octet Class in Java using JavaTuples
Implement Septet Class from Sextet Class in Java using JavaTuples
Implement Octet Class from Septet Class in Java using JavaTuples
Implement Sextet Class from Quintet Class in Java using JavaTuples
Implement Quintet Class with Quartet Class in Java using JavaTuples


Useful and/or Advanced Features 
Generics
Wildcards in Java
Assertions
Annotations
Serialization and Deserialization
Lambda Expressions – Java 8
Stream
BigInteger Class
Image Processing 
Set 1 (Read and Write)
Set 2 (Get and Set Pixels)
Set 3 (Colored image to greyscale image conversion)
Set 4 (Colored image to Negative image conversion)
Set 5 (Colored to Red Green Blue Image Conversion)
Set 6 (Colored image to Sepia image conversion)
 Set 7 (Creating a random pixel image)
Image Processing in Java | Set 8 (Creating mirror image)
Set 9 ( Face Detection )
Set 10 ( Watermarking an image )
Set 11 (Changing orientation of image)
Set 12 ( Contrast Enhancement )
Set 13 (Brightness Enhancement)
Set 14 ( Sharpness Enhancement )
Set 14 ( Comparison of two images )
Compressing and Decompressing files in Java
Networking in Java
Socket Programming
Introducing Threads in Socket Programming in Java
URL class in Java
HttpURLConnection Class
Reading from a URL using URLConnection Class
Inet Address Class
MD2 Hash In Java
SHA-1 Hash In Java
SHA-224 Hash In Java
SHA-256 Hash in Java
SHA-384 Hash In Java
SHA-512 Hash In Java
Java.Time Package
Clock Class in Java
Duration Class in Java
Instant Class in Java
LocalDate Class in Java
LocalDateTime Class in Java
LocalTime Class in Java
MonthDay Class in Java
Period Class in Java
Year Class in Java
YearMonth Class in Java
ZonedDateTime Class in Java
Java.Lang Package
Boolean Class in Java
Byte Class in Java
Character Class in Java
Character.Subset Class in Java
Character.UnicodeBlock Class in Java
Class Class in Java Set 1, Set 2
Compiler Class in Java
Double Class in Java
Enum Class in Java
Float Class in Java
InheritableThreadLocal Class in Java
Integer Class in Java
Long Class in Java
Math Class in Java Set 1, Set 2
Number Class in Java
Object Class in Java
Package Class in Java
Process Class in Java
ProcessBuilder Class in Java
Runtime Class in Java
Short Class in Java
StackTraceElement Class in Java
StrictMath Class in Java Set 1, Set 2
String Class in Java Set 1, Set 2
StringBuffer Class in Java
StringBuilder Class in Java
System Class in Java
Thread Class in Java
ThreadGroup Class in Java
ThreadLocal Class in Java
Throwable Class in Java
Void Class in Java
Java.Math Package
BigDecimal Class in Java
BigInteger Class in Java










1) OOPS concepts (inheritance , polymorphism , abstraction )
2) java programming syntax with hello world program in depth
3) access modifiers in java
4) study class , object , reference
5) some important keywords like - new , static , abstract
6) Interface
7) Object class
8) Constructors
9) java lang package
10) all string types(mutable and immutable)
11) method overloading / method overriding
12) Inner classes
13) I/O
14) Exception Handling
15) Collection (very imp)









1. Fibonacci series (solution)
Write a simple Java program which will print Fibonacci series, e.g. 1 1 2 3 5 8 13 ... . up to a given number. We prepare for cross questions like using iteration over recursion and how to optimize the solution using caching and memoization.

2. A prime number (solution)
Write a Java program to check if a given number is prime or not. Remember, a prime number is a number which is not divisible by any other number, e.g. 3, 5, 7, 11, 13, 17, etc. Be prepared for cross, e.g. checking till the square root of a number, etc.

3. String Palindrome (solution)
You need to write a simple Java program to check if a given String is palindrome or not. A Palindrome is a String which is equal to the reverse of itself, e.g., "Bob" is a palindrome because of the reverse of "Bob" is also "Bob."  Though be prepared with both recursive and iterative solution of this problem. The interviewer may ask you to solve without using any library method, e.g. indexOf() or subString() so be prepared for that.


4. Integer Palindrome (solution)
This is generally asked as follow-up or alternative of the previous program. This time you need to check if given Integer is palindrome or not. An integer is called palindrome if it's equal to its reverse, e.g. 1001 is a palindrome, but 1234 is not because the reverse of 1234 is 4321 which is not equal to 1234. You can use divide by 10 to reduce the number and modulus 10 to get the last digit. This trick is used to solve this problem.

5. Armstrong number (solution)
A number is called an Armstrong number if it is equal to the cube of its every digit. For example, 153 is an Armstrong number because of 153= 1+ 125+27, which is equal to 1^3+5^3+3^3. You need to write a program to check if the given number is Armstrong number or not.


6. Avoiding deadlock in Java (solution)
This is one of the interesting programs from Java Interviews, mostly asked to 2 to 3 years of experienced programmers or higher. The interviewer simply asked you to write code where a resource is accessed by multiple threads. You need to write code in such a way that no deadlock should occur. The trick to solving this problem is acquiring resources in order and release them in reverse order, e.g. first acquire resource R1 and only if you have got R1 to go for R2. This way, you can avoid deadlock.


7. Factorial (solution)
This is one of the simplest programs you can expect in interviews. It is generally asked to see if you can code or not. Sometimes interviewer may also ask about changing a recursive solution to iterative one or vice-versa.

8. Reverse a String (solution)
This problem is similar to the String Palindrome problem we have discussed above. If you can solve that problem, you can solve this as well. You can use indexOf() or substring() to reverse a String or alternatively, convert the problem to reverse an array by operating on character array instead of String. If you want to brush up your data structure skill you can also check Data Structures and Algorithms: Deep Dive Using Java course on Udemy before solving this question.


9. Remove duplicates from an array (solution)
Write a program to remove duplicates from an array in Java without using the Java Collection API. The array can be an array of String, Integer or Character, your solution should be independent of the type of array. If you want to practice more array-based questions, then see this list of top 30 array interview questions from Java interviews.

10. Printing patterns (solutions)

11. Print repeated characters of String? (solution)

12. GCD of two numbers (solution)

13. The square root of a number (solution)
You need to write a program to calculate the square root of a number without using the Math.sqrt() function of JDK. You need to write your logic and method to calculate the square root. You can though use the popular algorithm, like Newton's method.

14. Reverse array in place (solution)

15. Reverse words of a sentence (solution)

16. Leap year (solution)

17. Binary search (solution)

18. String Anagram (solution)
Write a program to check if two given String is Anagram of each other. Your function should return true if two Strings are Anagram, false otherwise. A string is said to be an anagram if it contains the same characters and same length, but in a different order, e.g. army and Mary are anagrams. You can ignore cases for this problem, but you should clarify that from your interview.



19. Design a Vending Machine (solution)
This one of the popular OOAD (object-oriented analysis and design) question from Java Interviews. You will be given 3 hours to design and code a vending machine satisfying some of the business requirements. You also need to write unit tests to prove your code satisfy those requirements. You can see this article for more object-oriented analysis questions.

20. Reverse a number (solution)

21. The first non-repeated character of String (solution)

22. Finding Middle element of linked list in one pass (solution)

23. Pre-order traversal (solution)

24. Pre-order traversal without recursion (solution)

25. In order traversal (solution)

26. In order traversal without recursion (solution)

27. Post-order traversal (solution)

28. Postorder traversal without recursion (solution)

29. Print all leaves of a binary tree (solution)


30. Sort array using quicksort (solution)
You need to write a Java program to sort an array of integers using a quick sort algorithm. You cannot use any library method, e.g. JDK or a third party library, which means, you need to first implement the quicksort algorithm and then sort the array.


31. Insertion sort (solution)
Write a program to implement the insertion sort algorithm in Java. The program should take an unsorted array and sort it using insertion sort algorithm Also explain the best case and worst case time and space complexity of the Insertion sort algorithm.

32. Bubble sort (solution)
Write a program to implement the bubble sort algorithm in Java. You can use basic operators and functions, but sorting functions from Java API is not allowed.

33. Transpose a matrix (solution)

34. Print all permutations of String (solution)
Write a Java program to print all permutations of a given String. For example, if given String is "GOD" then your program should print all 6 permutations of this string, e.g. "GOD," "OGD," "DOG," "GDO," "ODG," and "DGO."

Java Programming Interview Questions for 2 to 3 years


35. Reverse a String in place (solution)

36. Adding two matrices in Java (solution)

37. Matrix multiplication (solution)

38. Removal all white space from String (solution)

39. Reverse a linked list (solution)
Write a program to reverse a singly linked list in Java. You can use iteration and recursion to solve this problem, but you should reverse a linked list in place.

Java Programming Interview Questions for experienced


40. Find the length of the linked list (solution)
Just write a program in Java to find the length of a singly linked list in one pass, i.e. in just one iteration of a singly linked list.


41. Check if a linked list has a loop (solution)
Write a program to check if given linked list has a loop or not. Sometimes a linked list get corrupt, and two nodes point to the same node, which forms the loop or cycle in the linked list.

42. Find the start of loop in a linked list (solution)

43. Find the middle element of a linked list (solution)

44. Find the 3rd element from the tail linked list (solution)
You need to write a program to find the 3rd element from the tail of a singly linked list. You need to solve this problem without iterating twice. If you want more linked list questions, you can see the article about frequently asked linked list interview questions.

Java Coding Interview Questions



44. Convert a linked list to a binary tree (solution)
It's possible to convert a doubly-linked list to a binary tree, you need to write a Java program which takes a doubly-linked list and returns a binary tree.


45. Sort a linked list (solution)
You need to given an unsorted linked list, and you need to write a program in Java to sort them in ascending order of the values in each node.


46. Iterative Quicksort (solution)
You need to write a Java program to implement quicksort sorting algorithm without recursion. You can use essential JDK classes and programming constructs, but recursion is not allowed.


46. Bucket sort (solution)
This program is increasingly getting popular on Java interview because it sorts a given array in linear time. Though there is a lot of prerequisites, e.g. you must know the maximum value present in the array, it is a very interesting problem from interview point of view. You need to write a program to implement a bucket sort algorithm in Java. If you are not familiar with Bucket sort or any other linear sorting algorithm, I suggest you to first read a good on algorithms, e.g. Introduction to Algorithms by Thomas H. Cormen.

Top 50 Java Programs from Coding Interviews



47. Counting sort (solution)
This is another problem which is similar to the previous one because counting sort is also a linear sorting algorithm. Just remember that bucket sort, and counting sort are different algorithms, so it's also good to state how they are different.


48. Check if two string rotation of each other
Write a program which accepts two given String and checks if they are the rotation of each. If they then return true otherwise return false. A String is said to be a rotation of other string if they contain same characters and the sequence is rotated across any character, e.g. "dabc" is a rotation of "abcd" but "dbac" is not.  If you want to practice more string-based questions, you can also see my list of 20 String-based algorithm questions from Java interviews.


49. LRU cache in Java (solution)
Write a program to implement an LRU cache in Java.  An LRU cache means Least Recently Used Cache which removes the least recently used element if the cache is full. You can use LinkedHashMap to implement LRU cache in Java.

Java Programming Interview Questions



50. Merge sort
Implement the merge sort algorithm in Java. You can write a recursive or iterative solution, whichever you like. You also need to explain the time and space complexity for the best, worst, and average case.

Read more: https://javarevisited.blogspot.com/2017/07/top-50-java-programs-from-coding-Interviews.html#ixzz65Xg7paTJ















Q1. What is the difference between an Inner Class and a Sub-Class?

Ans: An Inner class is a class which is nested within another class. An Inner class has access rights for the class which is nesting it and it can access all variables and methods defined in the outer class.

A sub-class is a class which inherits from another class called super class. Sub-class can access all public and protected methods and fields of its super class.

Q2. What are the various access specifiers for Java classes?

Ans: In Java, access specifiers are the keywords used before a class name which defines the access scope. The types of access specifiers for classes are:

1. Public : Class,Method,Field is accessible from anywhere.

2. Protected:Method,Field can be accessed from the same class to which they belong or from the sub-classes,and from the class of same package,but not from outside.

3. Default: Method,Field,class can be accessed only from the same package and not from outside of it's native package.

4. Private: Method,Field can be accessed from the same class to which they belong.

Q3. What's the purpose of Static methods and static variables?

Ans: When there is a requirement to share a method or a variable between multiple objects of a class instead of creating separate copies for each object, we use static keyword to make a method or variable shared for all objects.

Q4. What is data encapsulation and what's its significance?

Ans: Encapsulation is a concept in Object Oriented Programming for combining properties and methods in a single unit.

Encapsulation helps programmers to follow a modular approach for software development as each object has its own set of methods and variables and serves its functions independent of other objects. Encapsulation also serves data hiding purpose.



Q5. What is a singleton class? Give a practical example of its usage.

A singleton class in java can have only one instance and hence all its methods and variables belong to just one instance. Singleton class concept is useful for the situations when there is a need to limit the number of objects for a class.

The best example of singleton usage scenario is when there is a limit of having only one connection to a database due to some driver limitations or because of any licensing issues.

Q6. What are Loops in Java? What are three types of loops?

Ans: Looping is used in programming to execute a statement or a block of statement repeatedly. There are three types of loops in Java:

1) For Loops

For loops are used in java to execute statements repeatedly for a given number of times. For loops are used when number of times to execute the statements is known to programmer.

2) While Loops

While loop is used when certain statements need to be executed repeatedly until a condition is fulfilled. In while loops, condition is checked first before execution of statements.

3) Do While Loops

Do While Loop is same as While loop with only difference that condition is checked after execution of block of statements. Hence in case of do while loop, statements are executed at least once.

Q7: What is an infinite Loop? How infinite loop is declared?

Ans: An infinite loop runs without any condition and runs infinitely. An infinite loop can be broken by defining any breaking logic in the body of the statement blocks.

Infinite loop is declared as follows:

for (;;)
{
    // Statements to execute

    // Add any loop breaking logic
}
Q8. What is the difference between continue and break statement?

Ans: break and continue are two important keywords used in Loops. When a break keyword is used in a loop, loop is broken instantly while when continue keyword is used, current iteration is broken and loop continues with next iteration.

In below example, Loop is broken when counter reaches 4.

for (counter = 0; counter & lt; 10; counter++)
    system.out.println(counter);

if (counter == 4) {

    break;
}

}
In the below example when counter reaches 4, loop jumps to next iteration and any statements after the continue keyword are skipped for current iteration.

for (counter = 0; counter < 10; counter++)
    system.out.println(counter);

if (counter == 4) {

    continue;
}
system.out.println("This will not get printed when counter is 4");
}
Q9. What is the difference between double and float variables in Java?

Ans: In java, float takes 4 bytes in memory while Double takes 8 bytes in memory. Float is single precision floating point decimal number while Double is double precision decimal number.

Q10. What is Final Keyword in Java? Give an example.

Ans: In java, a constant is declared using the keyword Final. Value can be assigned only once and after assignment, value of a constant can't be changed.

In below example, a constant with the name const_val is declared and assigned avalue:

Private Final int const_val=100

When a method is declared as final,it can NOT be overridden by the subclasses.This method are faster than any other method,because they are resolved at complied time.

When a class is declares as final,it cannot be subclassed. Example String,Integer and other wrapper classes.

Q11. What is ternary operator? Give an example.

Ans: Ternary operator , also called conditional operator is used to decide which value to assign to a variable based on a Boolean value evaluation. It's denoted as ?

In the below example, if rank is 1, status is assigned a value of "Done" else "Pending".

public class conditionTest {
    public static void main(String args[]) {
        String status;
        int rank = 3;
        status = (rank == 1) ? "Done" : "Pending";
        System.out.println(status);
    }
}
Q12: How can you generate random numbers in Java?

Ans:

Using Math.random() you can generate random numbers in the range greater than or equal to 0.1 and less than 1.0
Using Random class in package java.util
Q13. What is default switch case? Give example.

Ans: In a switch statement, default case is executed when no other switch condition matches. Default case is an optional case .It can be declared only once all other switch cases have been coded.

In the below example, when score is not 1 or 2, default case is used.

public class switchExample {
    int score = 4;
    public static void main(String args[]) {
        switch (score) {
            case 1:
                system.out.println("Score is 1");
                break;
            case 2:
                system.out.println("Score is 2");
                break;
            default:
                system.out.println("Default Case");
        }
    }
}
Q14. What's the base class in Java from which all classes are derived?

Ans: java.lang.object

Q15. Can main() method in Java can return any data?

Ans: In java, main() method can't return any data and hence, it's always declared with a void return type.

Q16. What are Java Packages? What's the significance of packages?

Ans: In Java, package is a collection of classes and interfaces which are bundled together as they are related to each other. Use of packages helps developers to modularize the code and group the code for proper re-use. Once code has been packaged in Packages, it can be imported in other classes and used.

Q17. Can we declare a class as Abstract without having any abstract method?

Ans: Yes we can create an abstract class by using abstract keyword before class name even if it doesn't have any abstract method. However, if a class has even one abstract method, it must be declared as abstract otherwise it will give an error.

Q18. What's the difference between an Abstract Class and Interface in Java?

Ans: The primary difference between an abstract class and interface is that an interface can only possess declaration of public static methods with no concrete implementation while an abstract class can have members with any access specifiers (public, private etc) with or without concrete implementation.

Another key difference in the use of abstract classes and interfaces is that a class which implements an interface must implement all the methods of the interface while a class which inherits from an abstract class doesn't require implementation of all the methods of its super class.

A class can implement multiple interfaces but it can extend only one abstract class.

Q19. What are the performance implications of Interfaces over abstract classes?

Ans: Interfaces are slower in performance as compared to abstract classes as extra indirections are required for interfaces. Another key factor for developers to take into consideration is that any class can extend only one abstract class while a class can implement many interfaces.

Use of interfaces also puts an extra burden on the developers as any time an interface is implemented in a class; developer is forced to implement each and every method of interface.

Q20. Does Importing a package imports its sub-packages as well in Java?

Ans: In java, when a package is imported, its sub-packages aren't imported and developer needs to import them separately if required.

For example, if a developer imports a package university.*, all classes in the package named university are loaded but no classes from the sub-package are loaded. To load the classes from its sub-package ( say department), developer has to import it explicitly as follows:

Import university.department.*

Q21. Can we declare the main method of our class as private?

Ans: In java, main method must be public static in order to run any application correctly. If main method is declared as private, developer won't get any compilation error however, it will not get executed and will give a runtime error.

Q22. How can we pass argument to a function by reference instead of pass by value?

Ans: In java, we can pass argument to a function only by value and not by reference.

Q23. How an object is serialized in java?

Ans: In java, to convert an object into byte stream by serialization, an interface with the name Serializable is implemented by the class. All objects of a class implementing serializable interface get serialized and their state is saved in byte stream.

Q24. When we should use serialization?

Ans: Serialization is used when data needs to be transmitted over the network. Using serialization, object's state is saved and converted into byte stream .The byte stream is transferred over the network and the object is re-created at destination.

Q25. Is it compulsory for a Try Block to be followed by a Catch Block in Java for Exception handling?

Ans: Try block needs to be followed by either Catch block or Finally block or both. Any exception thrown from try block needs to be either caught in the catch block or else any specific tasks to be performed before code abortion are put in the Finally block.

Q26. Is there any way to skip Finally block of exception even if some exception occurs in the exception block?

Ans: If an exception is raised in Try block, control passes to catch block if it exists otherwise to finally block. Finally block is always executed when an exception occurs and the only way to avoid execution of any statements in Finally block is by aborting the code forcibly by writing following line of code at the end of try block:

System.exit(0);
Q27. When the constructor of a class is invoked?

Ans: The constructor of a class is invoked every time an object is created with new keyword.

For example, in the following class two objects are created using new keyword and hence, constructor is invoked two times.

public class const_example {

    const_example() {

        system.out.println("Inside constructor");
    }
    public static void main(String args[]) {

        const_example c1 = new const_example();

        const_example c2 = new const_example();
    }
}
Q28. Can a class have multiple constructors?

Ans: Yes, a class can have multiple constructors with different parameters. Which constructor gets used for object creation depends on the arguments passed while creating the objects.

Q29. Can we override static methods of a class?

Ans: We cannot override static methods. Static methods belong to a class and not to individual objects and are resolved at the time of compilation (not at runtime).Even if we try to override static method,we will not get an complitaion error,nor the impact of overriding when running the code.

Q30. In the below example, what will be the output?

public class superclass {

    public void displayResult() {

        system.out.println("Printing from superclass");

    }

}

public class subclass extends superclass {

    public void displayResult() {

        system.out.println("Displaying from subClass");

        super.displayResult();

    }

    public static void main(String args[]) {

        subclass obj = new subclass();

        obj.displayResult();

    }

}
Ans: Output will be:

Displaying from subclass

Displaying from superclass

Q31. Is String a data type in java?

Ans: String is not a primitive data type in java. When a string is created in java, it's actually an object of Java.Lang.String class that gets created. After creation of this string object, all built-in methods of String class can be used on the string object.

Q32. In the below example, how many String Objects are created?

String s1="I am Java Expert";

String s2="I am C Expert";

String s3="I am Java Expert";
Ans: In the above example, two objects of Java.Lang.String class are created. s1 and s3 are references to same object.

Q33. Why Strings in Java are called as Immutable?

Ans: In java, string objects are called immutable as once value has been assigned to a string, it can't be changed and if changed, a new object is created.

In below example, reference str refers to a string object having value "Value one".

String str="Value One";
When a new value is assigned to it, a new String object gets created and the reference is moved to the new object.

str="New Value";
Q34. What's the difference between an array and Vector?

Ans: An array groups data of same primitive type and is static in nature while vectors are dynamic in nature and can hold data of different data types.

Q35. What is multi-threading?

Ans: Multi threading is a programming concept to run multiple tasks in a concurrent manner within a single program. Threads share same process stack and running in parallel. It helps in performance improvement of any program.

Q36. Why Runnable Interface is used in Java?

Ans: Runnable interface is used in java for implementing multi threaded applications. Java.Lang.Runnable interface is implemented by a class to support multi threading.

Q37. What are the two ways of implementing multi-threading in Java?

Ans: Multi threaded applications can be developed in Java by using any of the following two methodologies:

1. By using Java.Lang.Runnable Interface. Classes implement this interface to enable multi threading. There is a Run() method in this interface which is implemented.

2. By writing a class that extend Java.Lang.Thread class.

Q38. When a lot of changes are required in data, which one should be a preference to be used? String or StringBuffer?

Ans: Since StringBuffers are dynamic in nature and we can change the values of StringBuffer objects unlike String which is immutable, it's always a good choice to use StringBuffer when data is being changed too much. If we use String in such a case, for every data change a new String object will be created which will be an extra overhead.

Q39. What's the purpose of using Break in each case of Switch Statement?

Ans: Break is used after each case (except the last one) in a switch so that code breaks after the valid case and doesn't flow in the proceeding cases too.

If break isn't used after each case, all cases after the valid case also get executed resulting in wrong results.

Q40. How garbage collection is done in Java?

Ans: In java, when an object is not referenced any more, garbage collection takes place and the object is destroyed automatically. For automatic garbage collection java calls either System.gc() method or Runtime.gc() method.

Q41. How we can execute any code even before main method?

Ans: If we want to execute any statements before even creation of objects at load time of class, we can use a static block of code in the class. Any statements inside this static block of code will get executed once at the time of loading the class even before creation of objects in the main method.

Q42. Can a class be a super class and a sub-class at the same time? Give example.

Ans: If there is a hierarchy of inheritance used, a class can be a super class for another class and a sub-class for another one at the same time.

In the example below, continent class is sub-class of world class and it's super class of country class.

public class world {

..........

}
public class continenet extends world {

............

}
public class country extends continent {

......................

}
Q43. How objects of a class are created if no constructor is defined in the class?

Ans: Even if no explicit constructor is defined in a java class, objects get created successfully as a default constructor is implicitly used for object creation. This constructor has no parameters.

Q44. In multi-threading how can we ensure that a resource isn't used by multiple threads simultaneously?

Ans: In multi-threading, access to the resources which are shared among multiple threads can be controlled by using the concept of synchronization. Using synchronized keyword, we can ensure that only one thread can use shared resource at a time and others can get control of the resource only once it has become free from the other one using it.

Q45. Can we call the constructor of a class more than once for an object?

Ans: Constructor is called automatically when we create an object using new keyword. It's called only once for an object at the time of object creation and hence, we can't invoke the constructor again for an object after its creation.

Q46. There are two classes named classA and classB. Both classes are in the same package. Can a private member of classA can be accessed by an object of classB?

Ans: Private members of a class aren't accessible outside the scope of that class and any other class even in the same package can't access them.

Q47. Can we have two methods in a class with the same name?

Ans: We can define two methods in a class with the same name but with different number/type of parameters. Which method is to get invoked will depend upon the parameters passed.

For example in the class below we have two print methods with same name but different parameters. Depending upon the parameters, appropriate one will be called:

public class methodExample {

    public void print() {

        system.out.println("Print method without parameters.");

    }

    public void print(String name) {

        system.out.println("Print method with parameter");

    }

    public static void main(String args[]) {

        methodExample obj1 = new methodExample();

        obj1.print();

        obj1.print("xx");

    }

}
Q48. How can we make copy of a java object?

Ans: We can use the concept of cloning to create copy of an object. Using clone, we create copies with the actual state of an object.

Clone() is a method of Cloneable interface and hence, Cloneable interface needs to be implemented for making object copies.

Q49. What's the benefit of using inheritance?

Ans: Key benefit of using inheritance is reusability of code as inheritance enables sub-classes to reuse the code of its super class. Polymorphism (Extensibility ) is another great benefit which allow new functionality to be introduced without effecting existing derived classes.

Q50. What's the default access specifier for variables and methods of a class?

Ans: Default access specifier for variables and method is package protected i.e variables and class is available to any other class but in the same package,not outside the package.

Q51. Give an example of use of Pointers in Java class.

Ans: There are no pointers in Java. So we can't use concept of pointers in Java.

Q52. How can we restrict inheritance for a class so that no class can be inherited from it?

Ans: If we want a class not to be extended further by any class, we can use the keyword Final with the class name.

In the following example, Stone class is Final and can't be extend

public Final Class Stone {
	// Class methods and Variables
}
Q53. What's the access scope of Protected Access specifier?

Ans: When a method or a variable is declared with Protected access specifier, it becomes accessible in the same class,any other class of the same package as well as a sub-class.

Modifier

Class

Package

Subclass

World

public

Y

Y

Y

Y

protected

Y

Y

Y

N

no modifier

Y

Y

N

N

private

Y

N

N

N

Q54. What's difference between Stack and Queue?

Ans: Stack and Queue both are used as placeholder for a collection of data. The primary difference between a stack and a queue is that stack is based on Last in First out (LIFO) principle while a queue is based on FIFO (First In First Out) principle.

Q55. In java, how we can disallow serialization of variables?

Ans: If we want certain variables of a class not to be serialized, we can use the keyword transient while declaring them. For example, the variable trans_var below is a transient variable and can't be serialized:

public class transientExample { 
	private transient trans_var; 
    // rest of the code 
}
Q56. How can we use primitive data types as objects?

Ans: Primitive data types like int can be handled as objects by the use of their respective wrapper classes. For example, Integer is a wrapper class for primitive data type int. We can apply different methods to a wrapper class, just like any other object.

Q57. Which types of exceptions are caught at compile time?

Ans: Checked exceptions can be caught at the time of program compilation. Checked exceptions must be handled by using try catch block in the code in order to successfully compile the code.

Q58. Describe different states of a thread.

Ans: A thread in Java can be in either of the following states:

Ready: When a thread is created, it's in Ready state.
Running: A thread currently being executed is in running state.
Waiting: A thread waiting for another thread to free certain resources is in waiting state.
Dead: A thread which has gone dead after execution is in dead state.
Q59. Can we use a default constructor of a class even if an explicit constructor is defined?

Ans: Java provides a default no argument constructor if no explicit constructor is defined in a Java class. But if an explicit constructor has been defined, default constructor can't be invoked and developer can use only those constructors which are defined in the class.

Q60. Can we override a method by using same method name and arguments but different return types?

Ans: The basic condition of method overriding is that method name, arguments as well as return type must be exactly same as is that of the method being overridden. Hence using a different return type doesn't override a method.

Q61.What will be the output of following piece of code?

public class operatorExample {

    public static void main(String args[]) {

        int x = 4;

        system.out.println(x++);
	}
}
Ans: In this case postfix ++ operator is used which first returns the value and then increments. Hence it's output will be 4.

Q61. A person says that he compiled a java class successfully without even having a main method in it? Is it possible?

Ans: main method is an entry point of Java class and is required for execution of the program however; a class gets compiled successfully even if it doesn't have a main method. It can't be run though.

Q62. Can we call a non-static method from inside a static method?

Ans: Non-Static methods are owned by objects of a class and have object level scope and in order to call the non-Static methods from a static block (like from a static main method), an object of the class needs to be created first. Then using object reference, these methods can be invoked.

Q63. What are the two environment variables that must be set in order to run any Java programs?

Ans: Java programs can be executed in a machine only once following two environment variables have been properly set:

PATH variable
CLASSPATH variable
Q64. Can variables be used in Java without initialization?

Ans: In Java, if a variable is used in a code without prior initialization by a valid value, program doesn't compile and gives an error as no default value is assigned to variables in Java.

Q65. Can a class in Java be inherited from more than one class?

Ans: In Java, a class can be derived from only one class and not from multiple classes. Multiple inheritances is not supported by Java.

Q66. Can a constructor have different name than a Class name in Java?

Ans: Constructor in Java must have same name as the class name and if the name is different, it doesn't act as a constructor and compiler thinks of it as a normal method.

Q67. What will be the output of Round(3.7) and Ceil(3.7)?

Ans: Round(3.7) returns 4 and Ceil(3.7) returns 4.

Q68: Can we use goto in Java to go to a particular line?

Ans: In Java, there is not goto keyword and java doesn't support this feature of going to a particular labeled line.

Q69. Can a dead thread be started again?

Ans: In java, a thread which is in dead state can't be started again. There is no way to restart a dead thread.

Q70. Is the following class declaration correct?

Ans:

public abstract final class testClass {
	// Class methods and variables
}
Ans: The above class declaration is incorrect as an abstract class can't be declared as Final.

Q71. Is JDK required on each machine to run a Java program?

Ans: JDK is development Kit of Java and is required for development only and to run a Java program on a machine, JDK isn't required. Only JRE is required.

Q72. What's the difference between comparison done by equals method and == operator?

Ans: In Java, equals() method is used to compare the contents of two string objects and returns true if the two have same value while == operator compares the references of two string objects.

In the following example, equals() returns true as the two string objects have same values. However == operator returns false as both string objects are referencing to different objects:

public class equalsTest {

    public static void main(String args[]) {

        String str1 = new String("Hello World");

        String str2 = new String("Hello World");

        if (str1.equals(str2))

        { // this condition is true

            System.out.println("str1 and str2 are equal in terms of values");

        }

        if (str1 == str2) {

            //This condition is true

            System.out.println("Both strings are referencing same object");

        } else

        {

            // This condition is NOT true

            System.out.println("Both strings are referencing different objects");

        }

    }

}
Q73. Is it possible to define a method in Java class but provide it's implementation in the code of another language like C?

Ans: Yes, we can do this by use of native methods. In case of native method based development, we define public static methods in our Java class without its implementation and then implementation is done in another language like C separately.

Q74. How are destructors defined in Java?

Ans: In Java, there are no destructors defined in the class as there is no need to do so. Java has its own garbage collection mechanism which does the job automatically by destroying the objects when no longer referenced.

Q75. Can a variable be local and static at the same time?

Ans: No a variable can't be static as well as local at the same time. Defining a local variable as static gives compilation error.

Q76. Can we have static methods in an Interface?

Ans: Static methods can't be overridden in any class while any methods in an interface are by default abstract and are supposed to be implemented in the classes being implementing the interface. So it makes no sense to have static methods in an interface in Java.

Q77. In a class implementing an interface, can we change the value of any variable defined in the interface?

Ans: No, we can't change the value of any variable of an interface in the implementing class as all variables defined in the interface are by default public, static and Final and final variables are like constants which can't be changed later.

Q78. Is it correct to say that due to garbage collection feature in Java, a java program never goes out of memory?

Ans: Even though automatic garbage collection is provided by Java, it doesn't ensure that a Java program will not go out of memory as there is a possibility that creation of Java objects is being done at a faster pace compared to garbage collection resulting in filling of all the available memory resources.

So, garbage collection helps in reducing the chances of a program going out of memory but it doesn't ensure that.

Q79. Can we have any other return type than void for main method?

Ans: No, Java class main method can have only void return type for the program to get successfully executed.

Nonetheless , if you absolutely must return a value to at the completion of main method , you can use System.exit(int status)

Q80. I want to re-reach and use an object once it has been garbage collected. How it's possible?

Ans: Once an object has been destroyed by garbage collector, it no longer exists on the heap and it can't be accessed again. There is no way to reference it again.

Q81. In Java thread programming, which method is a must implementation for all threads?

Ans: Run() is a method of Runnable interface that must be implemented by all threads.

Q82. I want to control database connections in my program and want that only one thread should be able to make database connection at a time. How can I implement this logic?

Ans: This can be implemented by use of the concept of synchronization. Database related code can be placed in a method which hs synchronized keyword so that only one thread can access it at a time.

Q83. How can an exception be thrown manually by a programmer?

Ans: In order to throw an exception in a block of code manually, throw keyword is used. Then this exception is caught and handled in the catch block.

public void topMethod() {
    try {
        excMethod();
    } catch (ManualException e) {}
}

public void excMethod {
    String name = null;
    if (name == null) {
        throw (new ManualException("Exception thrown manually ");
        }
    }
Q84. I want my class to be developed in such a way that no other class (even derived class) can create its objects. How can I do so?

Ans: If we declare the constructor of a class as private, it will not be accessible by any other class and hence, no other class will be able to instantiate it and formation of its object will be limited to itself only.

Q85. How objects are stored in Java?

Ans: In java, each object when created gets a memory space from a heap. When an object is destroyed by a garbage collector, the space allocated to it from the heap is re-allocated to the heap and becomes available for any new objects.

Q86. How can we find the actual size of an object on the heap?

Ans: In java, there is no way to find out the exact size of an object on the heap.

Q87. Which of the following classes will have more memory allocated?

Class A: Three methods, four variables, no object

Class B: Five methods, three variables, no object

Ans: Memory isn't allocated before creation of objects. Since for both classes, there are no objects created so no memory is allocated on heap for any class.

Q88. What happens if an exception is not handled in a program?

Ans: If an exception is not handled in a program using try catch blocks, program gets aborted and no statement executes after the statement which caused exception throwing.

Q89. I have multiple constructors defined in a class. Is it possible to call a constructor from another constructor's body?

Ans: If a class has multiple constructors, it's possible to call one constructor from the body of another one using this().

Q90. What's meant by anonymous class?

Ans: An anonymous class is a class defined without any name in a single line of code using new keyword.

For example, in below code we have defined an anonymous class in one line of code:

public java.util.Enumeration testMethod()

{

    return new java.util.Enumeration()

    {

        @Override

        public boolean hasMoreElements()

        {

            // TODO Auto-generated method stub

            return false;

        }

        @Override

        public Object nextElement()

        {

            // TODO Auto-generated method stub

            return null;

        }

    }
Q91. Is there a way to increase the size of an array after its declaration?

Ans: Arrays are static and once we have specified its size, we can't change it. If we want to use such collections where we may require a change of size ( no of items), we should prefer vector over array.

Q92. If an application has multiple classes in it, is it okay to have a main method in more than one class?

Ans: If there is main method in more than one classes in a java application, it won't cause any issue as entry point for any application will be a specific class and code will start from the main method of that particular class only.

Q93. I want to persist data of objects for later use. What's the best approach to do so?

Ans: The best way to persist data for future use is to use the concept of serialization.

Q94. What is a Local class in Java?

Ans: In Java, if we define a new class inside a particular block, it's called a local class. Such a class has local scope and isn't usable outside the block where its defined.

Q95. String and StringBuffer both represent String objects. Can we compare String and StringBuffer in Java?

Ans: Although String and StringBuffer both represent String objects, we can't compare them with each other and if we try to compare them, we get an error.

Q96. Which API is provided by Java for operations on set of objects?

Ans: Java provides a Collection API which provides many useful methods which can be applied on a set of objects. Some of the important classes provided by Collection API include ArrayList, HashMap, TreeSet and TreeMap.

Q97. Can we cast any other type to Boolean Type with type casting?

Ans: No, we can neither cast any other primitive type to Boolean data type nor can cast Boolean data type to any other primitive data type.

Q98. Can we use different return types for methods when overridden?

Ans: The basic requirement of method overriding in Java is that the overridden method should have same name, and parameters.But a method can be overridden with a different return type as long as the new return type extends the original.

For example , method is returning a reference type.

Class B extends A {

    A method(int x) {

        //original method

    }

    B method(int x) {

        //overridden method

    }

}
Q99. What's the base class of all exception classes?

Ans: In Java, Java.lang.Throwable is the super class of all exception classes and all exception classes are derived from this base class.

Q100. What's the order of call of constructors in inheritiance?

Ans: In case of inheritance, when a new object of a derived class is created, first the constructor of the super class is invoked and then the constructor of the derived class is invoked.




























Q1. Explain JDK, JRE and JVM?
Q2. Explain public static void main(String args[]) in Java
Q3. Why Java is platform independent?
Q4. Why Java is not 100% Object-oriented?
Q5. What are wrapper classes in Java?
Q6. What are constructors in Java?
Q7. What is singleton class in Java and how can we make a class singleton?
Q8. What is the difference between Array list and vector in Java?
Q9. What is the difference between equals() and == in Java?
Q10. What are the differences between Heap and Stack Memory in Java?

Edureka 2019 Tech Career Guide is out! Hottest job roles, precise learning paths, industry outlook & more in the guide. Download now.
We have compiled a list of top Java interview questions which are classified into 7 sections, namely:
Basic Interview Questions
OOPs Interview Questions
JDBC Interview Questions
Spring Interview Questions
Hibernate Interview Questions
JSP Interview Questions
Exception and thread Interview Questions
Java Interview Questions and Answers | Edureka


As a Java professional, it is essential to know the right buzzwords, learn the right technologies and prepare the right answers to commonly asked Java Interview Questions. Here’s a definitive list of top Java Interview Questions that will guarantee a breeze-through to the next level.

In case you attended any Java interview recently, or have additional questions beyond what we covered, we encourage you to post them in our QnA Forum. Our expert team will get back to you at the earliest.  

So let’s get started with the first set of basic Java Interview Questions.


Basic Java Interview Questions
Q1. Explain JDK, JRE and JVM?
JDK vs JRE vs JVM
JDK	JRE	JVM
It stands for Java Development Kit.	It stands for Java Runtime Environment.	It stands for Java Virtual Machine.
It is the tool necessary to compile, document and package Java programs.	JRE refers to a runtime environment in which Java bytecode can be executed.	It is an abstract machine. It is a specification that provides a run-time environment in which Java bytecode can be executed.
It contains JRE + development tools.	It’s an implementation of the JVM which physically exists.	JVM follows three notations: Specification, Implementation, and Runtime Instance.

Q2. Explain public static void main(String args[]) in Java.
main() in Java is the entry point for any Java program. It is always written as public static void main(String[] args).

public: Public is an access modifier, which is used to specify who can access this method. Public means that this Method will be accessible by any Class.
static: It is a keyword in java which identifies it is class-based. main() is made static in Java so that it can be accessed without creating the instance of a Class. In case, main is not made static then the compiler will throw an error as main() is called by the JVM before any objects are made and only static methods can be directly invoked via the class. 
void: It is the return type of the method. Void defines the method which will not return any value.
main: It is the name of the method which is searched by JVM as a starting point for an application with a particular signature only. It is the method where the main execution occurs.
String args[]: It is the parameter passed to the main method.

Q3. Why Java is platform independent?
Java is called platform independent because of its byte codes which can run on any system irrespective of its underlying operating system.


Q4. Why Java is not 100% Object-oriented?

Java is not 100% Object-oriented because it makes use of eight primitive data types such as boolean, byte, char, int, float, double, long, short which are not objects.

Q5. What are wrapper classes in Java?

Wrapper classes convert the Java primitives into the reference types (objects). Every primitive data type has a class dedicated to it. These are known as wrapper classes because they “wrap” the primitive data type into an object of that class. Refer to the below image which displays different primitive type, wrapper class and constructor argument.


Q6. What are constructors in Java?
In Java, constructor refers to a block of code which is used to initialize an object. It must have the same name as that of the class. Also, it has no return type and it is automatically called when an object is created.

There are two types of constructors:

Default Constructor: In Java, a default constructor is the one which does not take any inputs. In other words, default constructors are the no argument constructors which will be created by default in case you no other constructor is defined by the user. Its main purpose is to initialize the instance variables with the default values. Also, it is majorly used for object creation. 
Parameterized Constructor: The parameterized constructor in Java, is the constructor which is capable of initializing the instance variables with the provided values. In other words, the constructors which take the arguments are called parameterized constructors.

Q7. What is singleton class in Java and how can we make a class singleton?
Singleton class is a class whose only one instance can be created at any given time, in one JVM. A class can be made singleton by making its constructor private.

Q8. What is the difference between Array list and vector in Java?
ArrayList	Vector
Array List is not synchronized.	 Vector is synchronized.
Array List is fast as it’s non-synchronized.	Vector is slow as it is thread safe.
If an element is inserted into the Array List, it increases its Array size by 50%.	Vector defaults to doubling size of its array.
Array List does not define the increment size.	Vector defines the increment size.
Array List can only use Iterator for traversing an Array List.	Vector can use both Enumeration and Iterator for traversing.

Q9. What is the difference between equals() and == in Java?
Equals() method is defined in Object class in Java and used for checking equality of two objects defined by business logic.

“==” or equality operator in Java is a binary operator provided by Java programming language and used to compare primitives and objects. public boolean equals(Object o) is the method provided by the Object class. The default implementation uses == operator to compare two objects. For example: method can be overridden like String class. equals() method is used to compare the values of two objects.

Q10. What are the differences between Heap and Stack Memory in Java?
The major difference between Heap and Stack memory are:

Features	Stack	Heap
Memory	Stack memory is used only by one thread of execution.	Heap memory is used by all the parts of the application.
Access	Stack memory can’t be accessed by other threads.	Objects stored in the heap are globally accessible.
Memory Management	Follows LIFO manner to free memory.	Memory management is based on the generation associated with each object.
Lifetime	Exists until the end of execution of the thread.	Heap memory lives from the start till the end of application execution.
Usage	Stack memory only contains local primitive and reference variables to objects in heap space.	Whenever an object is created, it’s always stored in the Heap space.
Q11. What is a package in Java? List down various advantages of packages.
Packages in Java, are the collection of related classes and interfaces which are bundled together. By using packages, developers can easily modularize the code and optimize its reuse. Also, the code within the packages can be imported by other classes and reused. Below I have listed down a few of its advantages:

Packages help in avoiding name clashes
They provide easier access control on the code
Packages can also contain hidden classes which are not visible to the outer classes and only used within the package
Creates a proper hierarchical structure which makes it easier to locate the related classes
Q12. Why pointers are not used in Java?
Java doesn’t use pointers because they are unsafe and increases the complexity of the program. Since, Java is known for its simplicity of code, adding the concept of pointers will be contradicting. Moreover, since JVM is responsible for implicit memory allocation, thus in order to avoid direct access to memory by the user,  pointers are discouraged in Java.

Q13. What is JIT compiler in Java?
JIT stands for Just-In-Time compiler in Java. It is a program that helps in converting the Java bytecode into instructions that are sent directly to the processor. By default, the JIT compiler is enabled in Java and is activated whenever a Java method is invoked. The JIT compiler then compiles the bytecode of the invoked method into native machine code, compiling it “just in time” to execute. Once the method has been compiled, the JVM summons the compiled code of that method directly rather than interpreting it. This is why it is often responsible for the performance optimization of Java applications at the run time.

Q14. What are access modifiers in Java?
In Java, access modifiers are special keywords which are used to restrict the access of a class, constructor, data member and method in another class. Java supports four types of access modifiers:

Default
Private
Protected
Public
Modifier	Default	Private	Protected	Public
Same class	YES	YES	YES	YES
Same Package subclass	YES	NO	YES	YES
Same Package non-subclass	YES	NO	YES	YES
Different package subclass	NO	NO	YES	YES
Different package non-subclass	NO	NO	NO	YES
Q15. Define a Java Class.
A class in Java is a blueprint which includes all your data.  A class contains fields (variables) and methods to describe the behavior of an object. Let’s have a look at the syntax of a class.

1
2
3
class Abc {
member variables // class body
methods}
Q16. What is an object in Java and how is it created?
An object is a real-world entity that has a state and behavior. An object has three characteristics:

State
Behavior
Identity
An object is created using the ‘new’ keyword. For example:

ClassName obj = new ClassName();

Q17. What is Object Oriented Programming?
Object-oriented programming or popularly known as OOPs is a programming model or approach where the programs are organized around objects rather than logic and functions. In other words, OOP mainly focuses on the objects that are required to be manipulated instead of logic. This approach is ideal for the programs large and complex codes and needs to be actively updated or maintained.

Q18. What are the main concepts of OOPs in Java?
Object-Oriented Programming or OOPs is a programming style that is associated with concepts like:

Inheritance: Inheritance is a process where one class acquires the properties of another.
Encapsulation: Encapsulation in Java is a mechanism of wrapping up the data and code together as a single unit.
Abstraction: Abstraction is the methodology of hiding the implementation details from the user and only providing the functionality to the users. 
Polymorphism: Polymorphism is the ability of a variable, function or object to take multiple forms.
Q19. What is the difference between a local variable and an instance variable?
In Java, a local variable is typically used inside a method, constructor, or a block and has only local scope. Thus, this variable can be used only within the scope of a block. The best benefit of having a local variable is that other methods in the class won’t be even aware of that variable.

Example

1
2
3
4
if(x > 100)
{
String test = "Edureka";
}
 

Whereas, an instance variable in Java, is a variable which is bounded to its object itself. These variables are declared within a class, but outside a method. Every object of that class will create it’s own copy of the variable while using it. Thus, any changes made to the variable won’t reflect in any other instances of that class and will be bound to that particular instance only.

1
2
3
4
class Test{
public String EmpName;
public int empAge;
}
Q20. Differentiate between the constructors and methods in Java?
Methods	Constructors
1. Used to represent the behavior of an object	1. Used to initialize the state of an object
2. Must have a return type	2. Do not have any return type
3. Needs to be invoked explicitly	3. Is invoked implicitly
4. No default method is provided by the compiler	4. A default constructor is provided by the compiler if the class has none
5. Method name may or may not be same as class name	5. Constructor name must always be the same as the class name
Q21. What is final keyword in Java?
final is a special keyword in Java that is used as a non-access modifier. A final variable can be used in different contexts such as:

final variable
When the final keyword is used with a variable then its value can’t be changed once assigned. In case the no value has been assigned to the final variable then using only the class constructor a value can be assigned to it.

final method
When a method is declared final then it can’t be overridden by the inheriting class.

final class
When a class is declared as final in Java, it can’t be extended by any subclass class but it can extend other class.

Powered by EdurekaMock Interview
80% INTERVIEW REJECTIONS HAPPEN IN FIRST 90 SECONDS
Take Java Mock Interview
Get Interviewed by Industry ExpertsPersonalized interview feedback
Q22. What is the difference between break and continue statements?
break	continue
1. Can be used in switch and loop (for, while, do while) statements	1. Can be only used with loop statements
2. It causes the switch or loop statements to terminate the moment it is executed	2. It doesn’t terminate the loop but causes the loop to jump to the next iteration
3. It terminates the innermost enclosing loop or switch immediately	3. A continue within a loop nested with a switch will cause the next loop iteration to execute
Example break:
1
2
3
4
5
6
7
8
for (int i = 0; i < 5; i++)
{
if (i == 3)
{
break;
}
System.out.println(i);
}
Example continue:
1
2
3
4
5
6
7
8
for (int i = 0; i < 5; i++)
{
if(i == 2)
{
continue;
}
System.out.println(i);
}
Q23.What is an infinite loop in Java? Explain with an example.
An infinite loop is an instruction sequence in Java that loops endlessly when a functional exit isn’t met. This type of loop can be the result of a programming error or may also be a deliberate action based on the application behavior. An infinite loop will terminate automatically once the application exits.

For example:


1
2
3
4
5
6
7
8
public class InfiniteForLoopDemo
{
public static void main(String[] arg) {
for(;;)
System.out.println("Welcome to Edureka!");
// To terminate this program press ctrl + c in the console.
}
}
 

Q24. What is the difference between this() and super() in Java?
In Java, super() and this(), both are special keywords that are used to call the constructor. 

this()	super()
1. this() represents the current instance of a class	1. super() represents the current instance of a parent/base class
2. Used to call the default constructor of the same class	2. Used to call the default constructor of the parent/base class
3. Used to access methods of the current class	3. Used to access methods of the base class
4.  Used for pointing the current class instance	4. Used for pointing the superclass instance
5. Must be the first line of a block	5. Must be the first line of a block
Q25. What is Java String Pool?
Java String pool refers to a collection of Strings which are stored in heap memory. In this, whenever a new object is created, String pool first checks whether the object is already present in the pool or not. If it is present, then the same reference is returned to the variable else new object will be created in the String pool and the respective reference will be returned.

String pool - Java Interview Questions - Edureka

Q26. Differentiate between static and non-static methods in Java.
Static Method	Non-Static Method
1. The static keyword must be used before the method name	1. No need to use the static keyword before the method name
2. It is called using the class (className.methodName) 	2. It is can be called like any general method
3. They can’t access any non-static instance variables or methods	3. It can access any static method and any static variable without creating an instance of the class
Q27. What is constructor chaining in Java?
In Java, constructor chaining is the process of calling one constructor from another with respect to the current object. Constructor chaining is possible only through legacy where a subclass constructor is responsible for invoking the superclass’ constructor first. There could be any number of classes in the constructor chain. Constructor chaining can be achieved in two ways:

Within the same class using this()
From base class using super()
Q28. Difference between String, String Builder, and String Buffer.

Factor	String	String Builder	String Buffer
Storage Area	Constant String Pool	Heap Area	Heap Area
Mutability	Immutable	Mutable	Mutable
Thread Safety	Yes	Yes	No
Performance	Fast	Slow	Fast
Q29. What is a classloader in Java?
The Java ClassLoader is a subset of JVM (Java Virtual Machine) that is responsible for loading the class files. Whenever a Java program is executed it is first loaded by the classloader. Java provides three built-in classloaders:

Bootstrap ClassLoader
Extension ClassLoader
System/Application ClassLoader
Q30. Why Java Strings are immutable in nature?
In Java, string objects are immutable in nature which simply means once the String object is created its state cannot be modified. Whenever you try to update the value of that object instead of updating the values of that particular object, Java creates a new string object. Java String objects are immutable as String objects are generally cached in the String pool. Since String literals are usually shared between multiple clients, action from one client might affect the rest. It enhances security, caching, synchronization, and performance of the application. 

Q31. What is the difference between an array and an array list?
Array	ArrayList
Cannot contain values of different data types	Can contain values of different data types.
Size must be defined at the time of declaration	Size can be dynamically changed
Need to specify the index in order to add data	No need to specify the index
Arrays are not type parameterized	Arraylists are type 
Arrays can contain primitive data types as well as objects	Arraylists can contain only objects, no primitive data types are allowed
Q32. What is a Map in Java?
In Java, Map is an interface of Util package which maps unique keys to values. The Map interface is not a subset of the main Collection interface and thus it behaves little different from the other collection types. Below are a few of the characteristics of Map interface: 

Map doesn’t contain duplicate keys.
Each key can map at max one value.

Q33. What is collection class in Java? List down its methods and interfaces.
In Java, the collection is a framework that acts as an architecture for storing and manipulating a group of objects. Using Collections you can perform various tasks like searching, sorting, insertion, manipulation, deletion, etc. Java collection framework includes the following:

Interfaces
Classes
Methods
The below image shows the complete hierarchy of the Java Collection.

FrameworkHierarchy - Java Collections - Edureka

 

In case you are facing any challenges with these java interview questions, please comment on your problems in the section below.

OOPS Java Interview Questions
Q1. What is Polymorphism?
Polymorphism is briefly described as “one interface, many implementations”. Polymorphism is a characteristic of being able to assign a different meaning or usage to something in different contexts – specifically, to allow an entity such as a variable, a function, or an object to have more than one form. There are two types of polymorphism:

Compile time polymorphism
Run time polymorphism
Compile time polymorphism is method overloading whereas Runtime time polymorphism is done using inheritance and interface.

Q2. What is runtime polymorphism or dynamic method dispatch?
In Java, runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time. In this process, an overridden method is called through the reference variable of a superclass. Let’s take a look at the example below to understand it better.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
class Car {
void run()
{
System.out.println(&ldquo;car is running&rdquo;); 
}
}
class Audi extends Car {
void run()
{
System.out.prinltn(&ldquo;Audi is running safely with 100km&rdquo;);
}
public static void main(String args[])
{
Car b= new Audi();    //upcasting
b.run();
}
}
Q3. What is abstraction in Java?
Abstraction refers to the quality of dealing with ideas rather than events. It basically deals with hiding the details and showing the essential things to the user. Thus you can say that abstraction in Java is the process of hiding the implementation details from the user and revealing only the functionality to them. Abstraction can be achieved in two ways:

Abstract Classes (0-100% of abstraction can be achieved)
Interfaces (100% of abstraction can be achieved)
Q4. What do you mean by an interface in Java?
An interface in Java is a blueprint of a class or you can say it is a collection of abstract methods and static constants. In an interface, each method is public and abstract but it does not contain any constructor. Thus, interface basically is a group of related methods with empty bodies. Example:

public interface Animal {
  public void eat();
  public void sleep();
  public void run();
}
Q5. What is the difference between abstract classes and interfaces?
Abstract Class	Interfaces
An abstract class can provide complete, default code and/or just the details that have to be overridden	An interface cannot provide any code at all, just the signature
In the case of an abstract class, a class may extend only one abstract class	A Class may implement several interfaces
An abstract class can have non-abstract methods	All methods of an Interface are abstract
An abstract class can have instance variables	An Interface cannot have instance variables
An abstract class can have any visibility: public, private, protected	An Interface visibility must be public (or) none
If we add a new method to an abstract class then we have the option of providing default implementation and therefore all the existing code might work properly	If we add a new method to an Interface then we have to track down all the implementations of the interface and define implementation for the new method
An abstract class can contain constructors	An Interface cannot contain constructors
Abstract classes are fast	Interfaces are slow as it requires extra indirection to find the corresponding method in the actual class
Q6. What is inheritance in Java?

Inheritance in Java is the concept where the properties of one class can be inherited by the other. It helps to reuse the code and establish a relationship between different classes. Inheritance is performed between two types of classes:

Parent class (Super or Base class)
Child class (Subclass or Derived class)

A class which inherits the properties is known as Child Class whereas a class whose properties are inherited is known as Parent class.

Q7. What are the different types of inheritance in Java?
Java supports four types of inheritance which are:

Single Inheritance: In single inheritance, one class inherits the properties of another i.e there will be only one parent as well as one child class.
Multilevel Inheritance: When a class is derived from a class which is also derived from another class, i.e. a class having more than one parent class but at different levels, such type of inheritance is called Multilevel Inheritance.
Hierarchical Inheritance: When a class has more than one child classes (subclasses) or in other words, more than one child classes have the same parent class, then such kind of inheritance is known as hierarchical.
Hybrid Inheritance: Hybrid inheritance is a combination of two or more types of inheritance.
Q8. What is method overloading and method overriding?
Method Overloading :
In Method Overloading, Methods of the same class shares the same name but each method must have a different number of parameters or parameters having different types and order.
Method Overloading is to “add” or “extend” more to the method’s behavior.
It is a compile-time polymorphism.
The methods must have a different signature.
It may or may not need inheritance in Method Overloading.
Let’s take a look at the example below to understand it better.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
class Adder {
Static int add(int a, int b)
{
return a+b;
}
Static double add( double a, double b)
{
return a+b;
}
public static void main(String args[])
{
System.out.println(Adder.add(11,11));
System.out.println(Adder.add(12.3,12.6));
}}
Method Overriding:  
In Method Overriding, the subclass has the same method with the same name and exactly the same number and type of parameters and same return type as a superclass.
Method Overriding is to “Change” existing behavior of the method.
It is a run time polymorphism.
The methods must have the same signature.
It always requires inheritance in Method Overriding.
Let’s take a look at the example below to understand it better.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
class Car {
void run(){
System.out.println(&ldquo;car is running&rdquo;); 
}
Class Audi extends Car{
void run()
{
System.out.prinltn("Audi is running safely with 100km");
}
public static void main( String args[])
{
Car b=new Audi();
b.run();
}
}
Q9. Can you override a private or static method in Java?
You cannot override a private or static method in Java. If you create a similar method with the same return type and same method arguments in child class then it will hide the superclass method; this is known as method hiding. Similarly, you cannot override a private method in subclass because it’s not accessible there. What you can do is create another private method with the same name in the child class. Let’s take a look at the example below to understand it better.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
class Base {
private static void display() {
System.out.println("Static or class method from Base");
}
public void print() {
System.out.println("Non-static or instance method from Base");
}
class Derived extends Base {
private static void display() {
System.out.println("Static or class method from Derived");
}
public void print() {
System.out.println("Non-static or instance method from Derived");
}
public class test {
public static void main(String args[])
{
Base obj= new Derived();
obj1.display();
obj1.print();
}
}
Q10. What is multiple inheritance? Is it supported by Java?
MultipleInheritance - Java Interview Questions - EdurekaIf a child class inherits the property from multiple classes is known as multiple inheritance. Java does not allow to extend multiple classes.

The problem with multiple inheritance is that if multiple parent classes have the same method name, then at runtime it becomes difficult for the compiler to decide which method to execute from the child class.

Therefore, Java doesn’t support multiple inheritance. The problem is commonly referred to as Diamond Problem.

Q11. What is encapsulation in Java?
Encapsulation is a mechanism where you bind your data(variables) and code(methods) together as a single unit. Here, the data is hidden from the outer world and can be accessed only via current class methods. This helps in protecting the data from any unnecessary modification. We can achieve encapsulation in Java by:

Declaring the variables of a class as private.
Providing public setter and getter methods to modify and view the values of the variables.
Q12. What is an association?
Association is a relationship where all object have their own lifecycle and there is no owner. Let’s take the example of Teacher and Student. Multiple students can associate with a single teacher and a single student can associate with multiple teachers but there is no ownership between the objects and both have their own lifecycle. These relationships can be one to one, one to many, many to one and many to many.

Q13. What do you mean by aggregation?
An aggregation is a specialized form of Association where all object has their own lifecycle but there is ownership and child object can not belong to another parent object. Let’s take an example of Department and teacher. A single teacher can not belong to multiple departments, but if we delete the department teacher object will not destroy. 

Q14. What is composition in Java?
Composition is again a specialized form of Aggregation and we can call this as a “death” relationship. It is a strong type of Aggregation. Child object does not have their lifecycle and if parent object deletes all child object will also be deleted. Let’s take again an example of a relationship between House and rooms. House can contain multiple rooms there is no independent life of room and any room can not belongs to two different houses if we delete the house room will automatically delete.

Q15. What is a marker interface?

A Marker interface can be defined as the interface having no data member and member functions. In simpler terms, an empty interface is called the Marker interface. The most common examples of Marker interface in Java are Serializable, Cloneable etc. The marker interface can be declared as follows.

1
2
public interface Serializable{
}
Q16. What is object cloning in Java?

Object cloning in Java is the process of creating an exact copy of an object. It basically means the ability to create an object with a similar state as the original object. To achieve this, Java provides a method clone() to make use of this functionality. This method creates a new instance of the class of the current object and then initializes all its fields with the exact same contents of corresponding fields. To object clone(), the marker interface java.lang.Cloneable must be implemented to avoid any runtime exceptions. One thing you must note is Object clone() is a protected method, thus you need to override it.

Q17. What is a copy constructor in Java?
Copy constructor is a member function that is used to initialize an object using another object of the same class. Though there is no need for copy constructor in Java since all objects are passed by reference. Moreover, Java does not even support automatic pass-by-value.

Q18. What is a constructor overloading in Java?
In Java, constructor overloading is a technique of adding any number of constructors to a class each having a different parameter list. The compiler uses the number of parameters and their types in the list to differentiate the overloaded constructors.

1
2
3
4
5
6
7
8
9
10
11
12
class Demo
{
int i;
public Demo(int a)
{
i=k;
}
public Demo(int a, int b)
{
//body
}
}
In case you are facing any challenges with these java interview questions, please comment on your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for a structured training from edureka!

Servlets Interview Questions  
Q1. What is a servlet?
Java Servlet is server-side technologies to extend the capability of web servers by providing support for dynamic response and data persistence.
The javax.servlet and javax.servlet.http packages provide interfaces and classes for writing our own servlets.
All servlets must implement the javax.servlet.Servlet interface, which defines servlet lifecycle methods. When implementing a generic service, we can extend the GenericServlet class provided with the Java Servlet API. The HttpServlet class provides methods, such as doGet() and doPost(), for handling HTTP-specific services.
Most of the times, web applications are accessed using HTTP protocol and thats why we mostly extend HttpServlet class. Servlet API hierarchy is shown in below image.
Servlet - Java Interview Questions - Edureka

Q2. What are the differences between Get and Post methods?
Get	Post
Limited amount of data can be sent because data is sent in header.	Large amount of data can be sent because data is sent in body.
 Not Secured because data is exposed in URL bar.	 Secured because data is not exposed in URL bar.
 Can be bookmarked	 Cannot be bookmarked
 Idempotent	 Non-Idempotent
 It is more efficient and used than Post	 It is less efficient and used
Q3. What is Request Dispatcher?
RequestDispatcher interface is used to forward the request to another resource that can be HTML, JSP or another servlet in same application. We can also use this to include the content of another resource to the response.

There are two methods defined in this interface:

1.void forward()

2.void include()

ForwardMethod - Java Interview Questions - Edureka
IncludeMethod - Java Interview Questions - Edureka
Q4. What are the differences between forward() method and sendRedirect() methods?

forward() method	SendRedirect() method
forward() sends the same request to another resource.	sendRedirect() method sends new request always because it uses the URL bar of the browser.
 forward() method works at server side.	 sendRedirect() method works at client side.
 forward() method works within the server only.	sendRedirect() method works within and outside the server.
Q5. What is the life-cycle of a servlet?
There are 5 stages in the lifecycle of a servlet:LifeCycleServlet - Java Interview Questions - Edureka

Servlet is loaded
Servlet is instantiated
Servlet is initialized
Service the request
Servlet is destroyed
Q6. How does cookies work in Servlets?
Cookies are text data sent by server to the client and it gets saved at the client local machine.
Servlet API provides cookies support through javax.servlet.http.Cookie class that implements Serializable and Cloneable interfaces.
HttpServletRequest getCookies() method is provided to get the array of Cookies from request, since there is no point of adding Cookie to request, there are no methods to set or add cookie to request.
Similarly HttpServletResponse addCookie(Cookie c) method is provided to attach cookie in response header, there are no getter methods for cookie.
Q7. What are the differences between ServletContext vs ServletConfig?
The difference between ServletContext and ServletConfig in Servlets JSP is in below tabular format.

ServletConfig	ServletContext
Servlet config object represent single servlet	It represent whole web application running on particular JVM and common for all the servlet
Its like local parameter associated with particular servlet	Its like global parameter associated with whole application
It’s a name value pair defined inside the servlet section of web.xml file so it has servlet wide scope	ServletContext has application wide scope so define outside of servlet tag in web.xml file.
getServletConfig() method is used to get the config object	getServletContext() method is  used to get the context object.
for example shopping cart of a user is a specific to particular user so here we can use servlet config	To get the MIME type of a file or application session related information is stored using servlet context object.

Q8. What are the different methods of session management in servlets?
Session is a conversational state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response.

Some of the common ways of session management in servlets are:

User Authentication
HTML Hidden Field
Cookies
URL Rewriting
Session Management API

SessionManagement - Java Interview Questions - Edureka
In case you are facing any challenges with these java interview questions, please comment your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for a structured training from edureka! Click below to know more.

JDBC Interview Questions 
1. What is JDBC Driver?
JDBC Driver is a software component that enables java application to interact with the database. There are 4 types of JDBC drivers:

JDBC-ODBC bridge driver
Native-API driver (partially java driver)
Network Protocol driver (fully java driver)
Thin driver (fully java driver)
2. What are the steps to connect to a database in java?
Registering the driver class
Creating connection
Creating statement
Executing queries
Closing connection
3. What are the JDBC API components?
The java.sql package contains interfaces and classes for JDBC API.

Interfaces:
Connection
Statement
PreparedStatement
ResultSet
ResultSetMetaData
DatabaseMetaData
CallableStatement etc.
Classes:
DriverManager
Blob
Clob
Types
SQLException etc.
4. What is the role of JDBC DriverManager class?
The DriverManager class manages the registered drivers. It can be used to register and unregister drivers. It provides factory method that returns the instance of Connection.

5. What is JDBC Connection interface?
The Connection interface maintains a session with the database. It can be used for transaction management. It provides factory methods that returns the instance of Statement, PreparedStatement, CallableStatement and DatabaseMetaData.

ConnectionInterface - Java Interview Questions - Edureka
6.  What is the purpose of JDBC ResultSet interface?
The ResultSet object represents a row of a table. It can be used to change the cursor pointer and get the information from the database.

7. What is JDBC ResultSetMetaData interface?
The ResultSetMetaData interface returns the information of table such as total number of columns, column name, column type etc.

8. What is JDBC DatabaseMetaData interface?
The DatabaseMetaData interface returns the information of the database such as username, driver name, driver version, number of tables, number of views etc.

9. What do you mean by batch processing in JDBC?
Batch processing helps you to group related SQL statements into a batch and execute them instead of executing a single query. By using batch processing technique in JDBC, you can execute multiple queries which makes the performance faster.

Powered by EdurekaMock Interview
Java Mock interviews for you
Interviews by Industry ExpertsPersonalized detailed interview feedbackAccess to exclusive and curated content
10. What is the difference between execute, executeQuery, executeUpdate?
Statement execute(String query) is used to execute any SQL query and it returns TRUE if the result is an ResultSet such as running Select queries. The output is FALSE when there is no ResultSet object such as running Insert or Update queries. We can use getResultSet() to get the ResultSet and getUpdateCount() method to retrieve the update count.

Statement executeQuery(String query) is used to execute Select queries and returns the ResultSet. ResultSet returned is never null even if there are no records matching the query. When executing select queries we should use executeQuery method so that if someone tries to execute insert/update statement it will throw java.sql.SQLException with message “executeQuery method can not be used for update”.

Statement executeUpdate(String query) is used to execute Insert/Update/Delete (DML) statements or DDL statements that returns nothing. The output is int and equals to the row count for SQL Data Manipulation Language (DML) statements. For DDL statements, the output is 0.

You should use execute() method only when you are not sure about the type of statement else use executeQuery or executeUpdate method.

Q11. What do you understand by JDBC Statements?
JDBC statements are basically the statements which are used to send SQL commands to the database and retrieve data back from the database. Various methods like execute(), executeUpdate(), executeQuery, etc. are provided by JDBC to interact with the database.

JDBC supports 3 types of statements:

Statement: Used for general purpose access to the database and executes a static SQL query at runtime.
PreparedStatement: Used to provide input parameters to the query during execution.
CallableStatement: Used to access the database stored procedures and helps in accepting runtime parameters.
In case you are facing any challenges with these java interview questions, please comment your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for a structured training from edureka!

Spring Interview Questions 
Q1. What is Spring?
Wikipedia defines the Spring framework as “an application framework and inversion of control container for the Java platform. The framework’s core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE platform.” Spring is essentially a lightweight, integrated framework that can be used for developing enterprise applications in java.

Q2. Name the different modules of the Spring framework.
Some of the important Spring Framework modules are:

Spring Context – for dependency injection.
Spring AOP – for aspect oriented programming.
Spring DAO – for database operations using DAO pattern
Spring JDBC – for JDBC and DataSource support.
Spring ORM – for ORM tools support such as Hibernate
Spring Web Module – for creating web applications.
Spring MVC – Model-View-Controller implementation for creating web applications, web services etc.
SpringFramework - Java Interview Questions - EdurekaQ3. List some of the important annotations in annotation-based Spring configuration.
The important annotations are:

@Required
@Autowired
@Qualifier
@Resource
@PostConstruct
@PreDestroy
Q4. Explain Bean in Spring and List the different Scopes of Spring bean.
Beans are objects that form the backbone of a Spring application. They are managed by the Spring IoC container. In other words, a bean is an object that is instantiated, assembled, and managed by a Spring IoC container.

There are five Scopes defined in Spring beans.

SpringBean - Java Interview Questions - Edureka

Singleton: Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure spring bean doesn’t have shared instance variables otherwise it might lead to data inconsistency issues because it’s not thread-safe.
Prototype: A new instance will be created every time the bean is requested.
Request: This is same as prototype scope, however it’s meant to be used for web applications. A new instance of the bean will be created for each HTTP request.
Session: A new bean will be created for each HTTP session by the container.
Global-session: This is used to create global session beans for Portlet applications.
Q5. Explain the role of DispatcherServlet and ContextLoaderListener.
DispatcherServlet is basically the front controller in the Spring MVC application as it loads the spring bean configuration file and initializes all the beans that have been configured. If annotations are enabled, it also scans the packages to configure any bean annotated with @Component, @Controller, @Repository or @Service annotations.

DispatcherServlet - Java Interview Questions - EdurekaContextLoaderListener, on the other hand, is the listener to start up and shut down the WebApplicationContext in Spring root. Some of its important functions includes tying up the lifecycle of Application Context to the lifecycle of the ServletContext and automating the creation of ApplicationContext.

ContextLoader - Java Interview Questions - Edureka
Q6. What are the differences between constructor injection and setter injection?
No.	Constructor Injection	Setter Injection
 1)	 No Partial Injection	 Partial Injection
 2)	 Doesn’t override the setter property	 Overrides the constructor property if both are defined.
 3)	Creates a new instance if any modification occurs	Doesn’t create a new instance if you change the property value
 4) 	 Better for too many properties	 Better for a few properties.
Q7. What is autowiring in Spring? What are the autowiring modes?
Autowiring enables the programmer to inject the bean automatically. We don’t need to write explicit injection logic. Let’s see the code to inject bean using dependency injection.

<bean id=“emp” class=“com.javatpoint.Employee” autowire=“byName” />  
The autowiring modes are given below:

No.	Mode	Description
 1)	 no	 this is the default mode, it means autowiring is not enabled.
 2)	 byName	 Injects the bean based on the property name. It uses setter method.
 3)	 byType	 Injects the bean based on the property type. It uses setter method.
 4)	 constructor	 It injects the bean using constructor
Q8. How to handle exceptions in Spring MVC Framework?
Spring MVC Framework provides the following ways to help us achieving robust exception handling.

Controller Based:
We can define exception handler methods in our controller classes. All we need is to annotate these methods with @ExceptionHandler annotation.

Global Exception Handler:
Exception Handling is a cross-cutting concern and Spring provides @ControllerAdvice annotation that we can use with any class to define our global exception handler.

HandlerExceptionResolver implementation: 
For generic exceptions, most of the times we serve static pages. Spring Framework provides HandlerExceptionResolver interface that we can implement to create global exception handler. The reason behind this additional way to define global exception handler is that Spring framework also provides default implementation classes that we can define in our spring bean configuration file to get spring framework exception handling benefits.


Q9. What are some of the important Spring annotations which you have used?
Some of the Spring annotations that I have used in my project are:

@Controller – for controller classes in Spring MVC project.

@RequestMapping – for configuring URI mapping in controller handler methods. This is a very important annotation, so you should go through Spring MVC RequestMapping Annotation Examples

@ResponseBody – for sending Object as response, usually for sending XML or JSON data as response.

@PathVariable – for mapping dynamic values from the URI to handler method arguments.

@Autowired – for autowiring dependencies in spring beans.

@Qualifier – with @Autowired annotation to avoid confusion when multiple instances of bean type is present.

@Service – for service classes.

@Scope – for configuring the scope of the spring bean.

@Configuration, @ComponentScan and @Bean – for java based configurations.

AspectJ annotations for configuring aspects and advices , @Aspect, @Before, @After, @Around, @Pointcut, etc.

Q10. How to integrate Spring and Hibernate Frameworks?
We can use Spring ORM module to integrate Spring and Hibernate frameworks if you are using Hibernate 3+ where SessionFactory provides current session, then you should avoid using HibernateTemplate or HibernateDaoSupport classes and better to use DAO pattern with dependency injection for the integration.

Also, Spring ORM provides support for using Spring declarative transaction management, so you should utilize that rather than going for hibernate boiler-plate code for transaction management. 

Q11. Name the types of transaction management that Spring supports.
Two types of transaction management are supported by Spring. They are:

Programmatic transaction management: In this, the transaction is managed with the help of programming. It provides you extreme flexibility, but it is very difficult to maintain.
Declarative transaction management: In this, transaction management is separated from the business code. Only annotations or XML based configurations are used to manage the transactions.
In case you are facing any challenges with these java interview questions, please comment your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for structured training from edureka!

Hibernate Interview Questions
1. What is Hibernate Framework?
Object-relational mapping or ORM is the programming technique to map application domain model objects to the relational database tables. Hibernate is Java-based ORM tool that provides a framework for mapping application domain objects to the relational database tables and vice versa.

Hibernate provides a reference implementation of Java Persistence API, that makes it a great choice as ORM tool with benefits of loose coupling. We can use the Hibernate persistence API for CRUD operations. Hibernate framework provide option to map plain old java objects to traditional database tables with the use of JPA annotations as well as XML based configuration.

Similarly, hibernate configurations are flexible and can be done from XML configuration file as well as programmatically.

2. What are the important benefits of using Hibernate Framework?
Some of the important benefits of using hibernate framework are:

Hibernate eliminates all the boiler-plate code that comes with JDBC and takes care of managing resources, so we can focus on business logic.
Hibernate framework provides support for XML as well as JPA annotations, that makes our code implementation independent.
Hibernate provides a powerful query language (HQL) that is similar to SQL. However, HQL is fully object-oriented and understands concepts like inheritance, polymorphism, and association.
Hibernate is an open source project from Red Hat Community and used worldwide. This makes it a better choice than others because learning curve is small and there are tons of online documentation and help is easily available in forums.
Hibernate is easy to integrate with other Java EE frameworks, it’s so popular that Spring Framework provides built-in support for integrating hibernate with Spring applications.
Hibernate supports lazy initialization using proxy objects and perform actual database queries only when it’s required.
Hibernate cache helps us in getting better performance.
For database vendor specific feature, hibernate is suitable because we can also execute native sql queries.
Overall hibernate is the best choice in current market for ORM tool, it contains all the features that you will ever need in an ORM tool.

3. Explain Hibernate architecture.
HibernateArchitecture - Java Interview Questions - Edureka

4. What are the differences between get and load methods?
The differences between get() and load() methods are given below.

No.	get()	load()
 1)	 Returns null if object is not found.	Throws ObjectNotFoundException if an object is not found.
 2)	 get() method always hit the database.	 load() method doesn’t hit the database.
 3)	 It returns a real object, not a proxy.	 It returns a proxy object.
 4)	It should be used if you are not sure about the existence of instance.	It should be used if you are sure that the instance exists.
5. What are the advantages of Hibernate over JDBC?
Some of the important advantages of Hibernate framework over JDBC are:

Hibernate removes a lot of boiler-plate code that comes with JDBC API, the code looks cleaner and readable.
Hibernate supports inheritance, associations, and collections. These features are not present with JDBC API.
Hibernate implicitly provides transaction management, in fact, most of the queries can’t be executed outside transaction. In JDBC API, we need to write code for transaction management using commit and rollback. 
JDBC API throws SQLException that is a checked exception, so we need to write a lot of try-catch block code. Most of the times it’s redundant in every JDBC call and used for transaction management. Hibernate wraps JDBC exceptions and throw JDBCException or HibernateException un-checked exception, so we don’t need to write code to handle it. Hibernate built-in transaction management removes the usage of try-catch blocks.
Hibernate Query Language (HQL) is more object-oriented and close to Java programming language. For JDBC, we need to write native SQL queries.
Hibernate supports caching that is better for performance, JDBC queries are not cached hence performance is low.
Hibernate provides option through which we can create database tables too, for JDBC tables must exist in the database.
Hibernate configuration helps us in using JDBC like connection as well as JNDI DataSource for the connection pool. This is a very important feature in enterprise application and completely missing in JDBC API.
Hibernate supports JPA annotations, so the code is independent of the implementation and easily replaceable with other ORM tools. JDBC code is very tightly coupled with the application.

In case you are facing any challenges with these Java interview questions, please comment on your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for structured training from edureka!

Java Interview Questions: JSP
1. What are the life-cycle methods for a jsp?
Methods	Description
 public void jspInit()	It is invoked only once, same as init method of servlet.
public void _jspService(ServletRequest request,ServletResponse)throws ServletException,IOException	It is invoked at each request, same as service() method of servlet.
 public void jspDestroy()	It is invoked only once, same as destroy() method of servlet.
2. What are the JSP implicit objects?
JSP provides 9 implicit objects by default. They are as follows:

Powered by EdurekaMock Interview
NEED HELP FOR YOUR UPCOMING INTERVIEW?
Take Java Mock Interview
Get Interviewed by Industry ExpertsPersonalized interview feedback
Object	Type
1) out	 JspWriter
2) request	 HttpServletRequest
3) response	 HttpServletResponse
4) config	 ServletConfig
5) session	 HttpSession
6) application	 ServletContext
7) pageContext	 PageContext
8) page	 Object
9) exception	 Throwable
3. What are the differences between include directive and include action?
include directive	include action
The include directive includes the content at page translation time.	The include action includes the content at request time.
The include directive includes the original content of the page so page size increases at runtime.	The include action doesn’t include the original content rather invokes the include() method of Vendor provided class.
 It’s better for static pages.	 It’s better for dynamic pages.
4. How to disable caching on back button of the browser?
<%
response.setHeader(“Cache-Control”,”no-store”);
response.setHeader(“Pragma”,”no-cache”);
response.setHeader (“Expires”, “0”);                    //prevents caching at the proxy server
%>   

5. What are the different tags provided in JSTL?
There are 5 type of JSTL tags.

core tags
sql tags
xml tags
internationalization tags
functions tags
6. How to disable session in JSP?
<%@ page session=“false” %>   
7.  How to delete a Cookie in a JSP?
The following code explains how to delete a Cookie in a JSP :

1
2
3
4
5
6
7
8
9
10
11
Cookie mycook = new Cookie("name1","value1");
 
response.addCookie(mycook1);
 
Cookie killmycook = new Cookie("mycook1","value1");
 
killmycook . set MaxAge ( 0 );
 
killmycook . set Path ("/");
 
killmycook . addCookie ( killmycook 1 );
8. Explain the jspDestroy() method.
jspDestry() method is invoked from javax.servlet.jsp.JspPage interface whenever a JSP page is about to be destroyed. Servlets destroy methods can be easily overridden to perform cleanup, like when closing a database connection.

9.  How is JSP better than Servlet technology?
JSP is a technology on the server’s side to make content generation simple. They are document-centric, whereas servlets are programs. A Java server page can contain fragments of Java program, which execute and instantiate Java classes. However, they occur inside an HTML template file. It provides the framework for the development of a Web Application.

10. Why should we not configure JSP standard tags in web.xml?

We don’t need to configure JSP standard tags in web.xml because when container loads the web application and find TLD files, it automatically configures them to be used directly in the application JSP pages. We just need to include it in the JSP page using taglib directive.

11. How will you use JSP EL in order to get the HTTP method name?
Using pageContext JSP EL implicit object you can get the request object reference and make use of the dot operator to retrieve the HTTP method name in the JSP page. The JSP EL code for this purpose will look like ${pageContext.request.method}.

In case you are facing any challenges with these java interview questions, please comment on your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for structured training from edureka!

Exception and Thread Java Interview Questions
Q1. What is the difference between Error and Exception?
An error is an irrecoverable condition occurring at runtime. Such as OutOfMemory error. These JVM errors you cannot repair them at runtime. Though error can be caught in the catch block but the execution of application will come to a halt and is not recoverable.

While exceptions are conditions that occur because of bad input or human error etc. e.g. FileNotFoundException will be thrown if the specified file does not exist. Or a NullPointerException will take place if you try using a null reference. In most of the cases it is possible to recover from an exception (probably by giving the user feedback for entering proper values etc.

Q2. How can you handle Java exceptions?
There are five keywords used to handle exceptions in Java: 

try
catch
finally
throw
throws
Q3. What are the differences between Checked Exception and Unchecked Exception?
Checked Exception
The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions. 
Checked exceptions are checked at compile-time.
Example: IOException, SQLException etc.
Unchecked Exception
The classes that extend RuntimeException are known as unchecked exceptions. 
Unchecked exceptions are not checked at compile-time.
Example: ArithmeticException, NullPointerException etc.
Q4. What purpose do the keywords final, finally, and finalize fulfill? 
Final:
Final is used to apply restrictions on class, method, and variable. A final class can’t be inherited, final method can’t be overridden and final variable value can’t be changed. Let’s take a look at the example below to understand it better.

1
2
3
4
5
6
class FinalVarExample {
public static void main( String args[])
{
final int a=10;   // Final variable
a=50;             //Error as value can't be changed
}
Finally
Finally is used to place important code, it will be executed whether the exception is handled or not. Let’s take a look at the example below to understand it better.

1
2
3
4
5
6
7
8
9
10
11
12
class FinallyExample {
public static void main(String args[]){
try {
int x=100;
}
catch(Exception e) {
System.out.println(e);
}
finally {
System.out.println("finally block is executing");}
}}
}
Finalize
Finalize is used to perform clean up processing just before the object is garbage collected. Let’s take a look at the example below to understand it better.

1
2
3
4
5
6
7
8
9
10
11
12
13
class FinalizeExample {
public void finalize() {
System.out.println("Finalize is called");
}
public static void main(String args[])
{
FinalizeExample f1=new FinalizeExample();
FinalizeExample f2=new FinalizeExample();
f1= NULL;
f2=NULL;
System.gc();
}
}
 Q5. What are the differences between throw and throws? 
throw keyword	throws keyword
Throw is used to explicitly throw an exception.	Throws is used to declare an exception.
Checked exceptions can not be propagated with throw only.	Checked exception can be propagated with throws.
Throw is followed by an instance.	Throws is followed by class.
Throw is used within the method.	Throws is used with the method signature.
You cannot throw multiple exception	You can declare multiple exception e.g. public void method()throws IOException,SQLException.
Q6. What is exception hierarchy in java?
The hierarchy is as follows:

Throwable is a parent class of all Exception classes. There are two types of Exceptions: Checked exceptions and UncheckedExceptions or RunTimeExceptions. Both type of exceptions extends Exception class whereas errors are further classified into Virtual Machine error and Assertion error.

ExceptionHierarchy - Java Interview Questions - Edureka

Q7. How to create a custom Exception?
To create you own exception extend the Exception class or any of its subclasses.

class New1Exception extends Exception { }               // this will create Checked Exception
class NewException extends IOException { }             // this will create Checked exception
class NewException extends NullPonterExcpetion { }  // this will create UnChecked exception
Q8. What are the important methods of Java Exception Class?
Exception and all of it’s subclasses doesn’t provide any specific methods and all of the methods are defined in the base class Throwable.

String getMessage() – This method returns the message String of Throwable and the message can be provided while creating the exception through it’s constructor.
String getLocalizedMessage() – This method is provided so that subclasses can override it to provide locale specific message to the calling program. Throwable class implementation of this method simply use getMessage() method to return the exception message.
Synchronized Throwable getCause() – This method returns the cause of the exception or null id the cause is unknown.
String toString() – This method returns the information about Throwable in String format, the returned String contains the name of Throwable class and localized message.
void printStackTrace() – This method prints the stack trace information to the standard error stream, this method is overloaded and we can pass PrintStream or PrintWriter as an argument to write the stack trace information to the file or stream.
Q9. What are the differences between processes and threads?
 	Process	Thread
Definition	An executing instance of a program is called a process.	A thread is a subset of the process.
Communication	Processes must use inter-process communication to communicate with sibling processes.	Threads can directly communicate with other threads of its process.
Control	Processes can only exercise control over child processes.	Threads can exercise considerable control over threads of the same process.
Changes	Any change in the parent process does not affect child processes.	Any change in the main thread may affect the behavior of the other threads of the process.
Memory	Run in separate memory spaces.	Run in shared memory spaces.
Controlled by	Process is controlled by the operating system.	Threads are controlled by programmer in a program.
Dependence	Processes are independent.	Threads are dependent.
Q10. What is a finally block? Is there a case when finally will not execute?
Finally block is a block which always executes a set of statements. It is always associated with a try block regardless of any exception that occurs or not. 
Yes, finally will not be executed if the program exits either by calling System.exit() or by causing a fatal error that causes the process to abort.

Q11. What is synchronization?
Synchronization refers to multi-threading. A synchronized block of code can be executed by only one thread at a time. As Java supports execution of multiple threads, two or more threads may access the same fields or objects. Synchronization is a process which keeps all concurrent threads in execution to be in sync. Synchronization avoids memory consistency errors caused due to inconsistent view of shared memory. When a method is declared as synchronized the thread holds the monitor for that method’s object. If another thread is executing the synchronized method the thread is blocked until that thread releases the monitor.

Synchronization - Java Interview Questions - Edureka

 Q12. Can we write multiple catch blocks under single try block? 
Yes we can have multiple catch blocks under single try block but the approach should be from specific to general. Let’s understand this with a programmatic example.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
public class Example {
public static void main(String args[]) {
try {
int a[]= new int[10];
a[10]= 10/0;
}
catch(ArithmeticException e)
{
System.out.println("Arithmetic exception in first catch block");
}
catch(ArrayIndexOutOfBoundsException e)
{
System.out.println("Array index out of bounds in second catch block");
}
catch(Exception e)
{
System.out.println("Any exception in third catch block");
}
}
Q13. What are the important methods of Java Exception Class?
Methods are defined in the base class Throwable. Some of the important methods of Java exception class are stated below. 

String getMessage() – This method returns the message String about the exception. The message can be provided through its constructor.
public StackTraceElement[] getStackTrace() – This method returns an array containing each element on the stack trace. The element at index 0 represents the top of the call stack whereas the last element in the array represents the method at the bottom of the call stack.
Synchronized Throwable getCause() – This method returns the cause of the exception or null id as represented by a Throwable object.

String toString() – This method returns the information in String format. The returned String contains the name of Throwable class and localized message.
void printStackTrace() – This method prints the stack trace information to the standard error stream. 
Q14. What is OutOfMemoryError in Java?
OutOfMemoryError is the subclass of java.lang.Error which generally occurs when our JVM runs out of memory.

Q15. What is a Thread?
A thread is the smallest piece of programmed instructions which can be executed independently by a scheduler. In Java, all the programs will have at least one thread which is known as the main thread. This main thread is created by the JVM when the program starts its execution. The main thread is used to invoke the main() of the program.

Q16. What are the two ways to create a thread?
In Java, threads can be created in the following two ways:- 

By implementing the Runnable interface.
By extending the Thread
Q17. What are the different types of garbage collectors in Java?
Garbage collection in Java a program which helps in implicit memory management. Since in Java, using the new keyword you can create objects dynamically, which once created will consume some memory. Once the job is done and there are no more references left to the object, Java using garbage collection destroys the object and relieves the memory occupied by it. Java provides four types of garbage collectors:

Serial Garbage Collector
Parallel Garbage Collector
CMS Garbage Collector
G1 Garbage Collector
In case you are facing any challenges with these java interview questions, please comment your problems in the section below. Apart from this Java Interview Questions Blog, if you want to get trained from professionals on this technology, you can opt for structured training from edureka!

So this brings us to the end of the Java interview questions blog. The topics that you learned in this Java Interview Questions blog are the most sought-after skill sets that recruiters look for in a Java Professional. These set of Java Interview Questions will definitely help you ace your job interview. Good luck with your interview!

Check out the Java Training by Edureka, a trusted online learning company with a network of more than 250,000 satisfied learners spread across the globe. We are here to help you with every step on your journey, for becoming a besides this java interview questions, we come up with a curriculum which is designed for students and professionals who want to be a Java Developer. The course is designed to give you a head start into Java programming and train you for both core and advanced Java concepts along with various Java frameworks like Hibernate & Spring.

Got a question for us? Please mention it in the comments section of this “Java Interview Questions” and we will get back to you as soon as possible.













1) What is Python? What are the benefits of using Python?

Python is a programming language with objects, modules, threads, exceptions and automatic memory management. The benefits of pythons are that it is simple and easy, portable, extensible, build-in data structure and it is an open source.

2) What is PEP 8?

PEP 8 is a coding convention, a set of recommendation, about how to write your Python code more readable.

3) What is pickling and unpickling?

Pickle module accepts any Python object and converts it into a string representation and dumps it into a file by using dump function, this process is called pickling. While the process of retrieving original Python objects from the stored string representation is called unpickling.

4) How Python is interpreted?

Python language is an interpreted language. Python program runs directly from the source code. It converts the source code that is written by the programmer into an intermediate language, which is again translated into machine language that has to be executed.

5) How memory is managed in Python?

Python memory is managed by Python private heap space. All Python objects and data structures are located in a private heap. The programmer does not have an access to this private heap and interpreter takes care of this Python private heap.
The allocation of Python heap space for Python objects is done by Python memory manager. The core API gives access to some tools for the programmer to code.
Python also have an inbuilt garbage collector, which recycle all the unused memory and frees the memory and makes it available to the heap space.
6) What are the tools that help to find bugs or perform static analysis?

PyChecker is a static analysis tool that detects the bugs in Python source code and warns about the style and complexity of the bug. Pylint is another tool that verifies whether the module meets the coding standard.

7) What are Python decorators?

A Python decorator is a specific change that we make in Python syntax to alter functions easily.

8) What is the difference between list and tuple?

The difference between list and tuple is that list is mutable while tuple is not. Tuple can be hashed for e.g as a key for dictionaries.

9) How are arguments passed by value or by reference?

Everything in Python is an object and all variables hold references to the objects. The references values are according to the functions; as a result you cannot change the value of the references. However, you can change the objects if it is mutable.

10) What is Dict and List comprehensions are?

They are syntax constructions to ease the creation of a Dictionary or List based on existing iterable.

11) What are the built-in type does python provides?

There are mutable and Immutable types of Pythons built in types Mutable built-in types

List
Sets
Dictionaries
Immutable built-in types

Strings
Tuples
Numbers
12) What is namespace in Python?

In Python, every name introduced has a place where it lives and can be hooked for. This is known as namespace. It is like a box where a variable name is mapped to the object placed. Whenever the variable is searched out, this box will be searched, to get corresponding object.

13) What is lambda in Python?

It is a single expression anonymous function often used as inline function.

14) Why lambda forms in python does not have statements?

A lambda form in python does not have statements as it is used to make new function object and then return them at runtime.

15) What is pass in Python?

Pass means, no-operation Python statement, or in other words it is a place holder in compound statement, where there should be a blank left and nothing has to be written there.

16) In Python what are iterators?

In Python, iterators are used to iterate a group of elements, containers like list.

17) What is unittest in Python?

A unit testing framework in Python is known as unittest. It supports sharing of setups, automation testing, shutdown code for tests, aggregation of tests into collections etc.

18) In Python what is slicing?

A mechanism to select a range of items from sequence types like list, tuple, strings etc. is known as slicing.

19) What are generators in Python?

The way of implementing iterators are known as generators. It is a normal function except that it yields expression in the function.

20) What is docstring in Python?

A Python documentation string is known as docstring, it is a way of documenting Python functions, modules and classes.

21) How can you copy an object in Python?

To copy an object in Python, you can try copy.copy () or copy.deepcopy() for the general case. You cannot copy all objects but most of them.

22) What is negative index in Python?

Python sequences can be index in positive and negative numbers. For positive index, 0 is the first index, 1 is the second index and so forth. For negative index, (-1) is the last index and (-2) is the second last index and so forth.

23) How you can convert a number to a string?

In order to convert a number into a string, use the inbuilt function str(). If you want a octal or hexadecimal representation, use the inbuilt function oct() or hex().

24) What is the difference between Xrange and range?

Xrange returns the xrange object while range returns the list, and uses the same memory and no matter what the range size is.

25) What is module and package in Python?

In Python, module is the way to structure program. Each Python program file is a module, which imports other modules like objects and attributes.

The folder of Python program is a package of modules. A package can have modules or subfolders.

26) Mention what are the rules for local and global variables in Python?

Local variables: If a variable is assigned a new value anywhere within the function's body, it's assumed to be local.

Global variables: Those variables that are only referenced inside a function are implicitly global.

27) How can you share global variables across modules?

To share global variables across modules within a single program, create a special module. Import the config module in all modules of your application. The module will be available as a global variable across modules.

28) Explain how can you make a Python Script executable on Unix?

To make a Python Script executable on Unix, you need to do two things,

Script file's mode must be executable and
the first line must begin with # ( #!/usr/local/bin/python)
29) Explain how to delete a file in Python?

By using a command os.remove (filename) or os.unlink(filename)

30) Explain how can you generate random numbers in Python?

To generate random numbers in Python, you need to import command as

import random

random.random()

This returns a random floating point number in the range [0,1)

31) Explain how can you access a module written in Python from C?

You can access a module written in Python from C by following method,

Module = =PyImport_ImportModule("<modulename>");

32) Mention the use of // operator in Python?

It is a Floor Divisionoperator , which is used for dividing two operands with the result as quotient showing only digits before the decimal point. For instance, 10//5 = 2 and 10.0//5.0 = 2.0.

33) Mention five benefits of using Python?

Python comprises of a huge standard library for most Internet platforms like Email, HTML, etc.
Python does not require explicit memory management as the interpreter itself allocates the memory to new variables and free them automatically
Provide easy readability due to use of square brackets
Easy-to-learn for beginners
Having the built-in data types saves programming time and effort from declaring variables
34) Mention the use of the split function in Python?

The use of the split function in Python is that it breaks a string into shorter strings using the defined separator. It gives a list of all words present in the string.

35) Explain what is Flask & its benefits?

Flask is a web micro framework for Python based on "Werkzeug, Jinja 2 and good intentions" BSD licensed. Werkzeug and jingja are two of its dependencies.

Flask is part of the micro-framework. Which means it will have little to no dependencies on external libraries. It makes the framework light while there is little dependency to update and less security bugs.

36) Mention what is the difference between Django, Pyramid, and Flask?

Flask is a "microframework" primarily build for a small application with simpler requirements. In flask, you have to use external libraries. Flask is ready to use.

Pyramid are build for larger applications. It provides flexibility and lets the developer use the right tools for their project. The developer can choose the database, URL structure, templating style and more. Pyramid is heavy configurable.

Like Pyramid, Django can also used for larger applications. It includes an ORM.

37) Mention what is Flask-WTF and what are their features?

Flask-WTF offers simple integration with WTForms. Features include for Flask WTF are

Integration with wtforms
Secure form with csrf token
Global csrf protection
Internationalization integration
Recaptcha supporting
File upload that works with Flask Uploads
38) Explain what is the common way for the Flask script to work?

The common way for the flask script to work is

Either it should be the import path for your application
Or the path to a Python file
39) Explain how you can access sessions in Flask?

A session basically allows you to remember information from one request to another. In a flask, it uses a signed cookie so the user can look at the session contents and modify. The user can modify the session if only it has the secret key Flask.secret_key.

40) Is Flask an MVC model and if yes give an example showing MVC pattern for your application?

Basically, Flask is a minimalistic framework which behaves same as MVC framework. So MVC is a perfect fit for Flask, and the pattern for MVC we will consider for the following example

from flask import Flask

app = Flask(_name_)

@app.route("/")

Def hello():

return "Hello World"

app.run(debug = True)

In this code your,

Configuration part will be
from flask import Flask

app = Flask(_name_)

View part will be
@app.route("/")

Def hello():

return "Hello World"

While you model or main part will be
app.run(debug = True)

41) Explain database connection in Python Flask?

Flask supports database powered application (RDBS). Such system requires creating a schema, which requires piping the shema.sql file into a sqlite3 command. So you need to install sqlite3 command in order to create or initiate the database in Flask.

Flask allows to request database in three ways

before_request() : They are called before a request and pass no arguments
after_request() : They are called after a request and pass the response that will be sent to the client
teardown_request(): They are called in situation when exception is raised, and response are not guaranteed. They are called after the response been constructed. They are not allowed to modify the request, and their values are ignored.
42) You are having multiple Memcache servers running Python, in which one of the memcacher server fails, and it has your data, will it ever try to get key data from that one failed server?

The data in the failed server won't get removed, but there is a provision for auto-failure, which you can configure for multiple nodes. Fail-over can be triggered during any kind of socket or Memcached server level errors and not during normal client errors like adding an existing key, etc.

43) Explain how you can minimize the Memcached server outages in your Python Development?

When one instance fails, several of them goes down, this will put larger load on the database server when lost data is reloaded as client make a request. To avoid this, if your code has been written to minimize cache stampedes then it will leave a minimal impact
Another way is to bring up an instance of Memcached on a new machine using the lost machines IP address
Code is another option to minimize server outages as it gives you the liberty to change the Memcached server list with minimal work
Setting timeout value is another option that some Memcached clients implement for Memcached server outage. When your Memcached server goes down, the client will keep trying to send a request till the time-out limit is reached
44) Explain what is Dogpile effect? How can you prevent this effect?

Dogpile effect is referred to the event when cache expires, and websites are hit by the multiple requests made by the client at the same time. This effect can be prevented by using semaphore lock. In this system when value expires, first process acquires the lock and starts generating new value.

45) Explain how Memcached should not be used in your Python project?

Memcached common misuse is to use it as a data store, and not as a cache
Never use Memcached as the only source of the information you need to run your application. Data should always be available through another source as well
Memcached is just a key or value store and cannot perform query over the data or iterate over the contents to extract information
Memcached does not offer any form of security either in encryption or authentication























Q1. What is the difference between list and tuples in Python?
Q2. What are the key features of Python?
Q3. What type of language is python?
Q4. How is Python an interpreted language?
Q5. What is pep 8?
Q6. How is memory managed in Python?
Q7. What is name space in Python?
Q8. What is PYTHON PATH?
Q9. What are python modules?
Q10. What are local variables and global variables in Python?

We have compiled a list of top Python interview questions which are classified into 7 sections, namely:
Basic Interview Questions
OOPS Interview Questions
Basic Python Programs
Python Libraries Interview Questions
Web Scraping Interview Questions
Data Analysis Interview Questions
Multiple Choice Questions (MCQ)
Before moving ahead, you may go through the recording of Python Interview Questions where our instructor has shared his experience and expertise that will help you to crack any Python Interview:
Python Interview Questions And Answers | Python Training | Edureka



If you have other doubts regarding Python, feel free to post them in our QnA Forum. Our expert team will get back to you at the earliest.

Basic Python Interview Questions
Q1. What is the difference between list and tuples in Python?
LIST vs TUPLES
LIST	TUPLES
Lists are mutable i.e they can be edited.	Tuples are immutable (tuples are lists which can’t be edited).
Lists are slower than tuples.	Tuples are faster than list.
Syntax: list_1 = [10, ‘Chelsea’, 20]	Syntax: tup_1 = (10, ‘Chelsea’ , 20)
Q2. What are the key features of Python?
Python is an interpreted language. That means that, unlike languages like C and its variants, Python does not need to be compiled before it is run. Other interpreted languages include PHP and Ruby.
Python is dynamically typed, this means that you don’t need to state the types of variables when you declare them or anything like that. You can do things like x=111 and then x="I'm a string" without error
Python is well suited to object orientated programming in that it allows the definition of classes along with composition and inheritance. Python does not have access specifiers (like C++’s public, private).
In Python, functions are first-class objects. This means that they can be assigned to variables, returned from other functions and passed into functions. Classes are also first class objects
Writing Python code is quick but running it is often slower than compiled languages. Fortunately，Python allows the inclusion of C based extensions so bottlenecks can be optimized away and often are. The numpy package is a good example of this, it’s really quite quick because a lot of the number crunching it does isn’t actually done by Python
Python finds use in many spheres – web applications, automation, scientific modeling, big data applications and many more. It’s also often used as “glue” code to get other languages and components to play nice.
Q3. What type of language is python? Programming or scripting?
Ans: Python is capable of scripting, but in general sense, it is considered as a general-purpose programming language. To know more about Scripting, you can refer to the Python Scripting Tutorial.

Q4.How is Python an interpreted language?
Ans: An interpreted language is any programming language which is not in machine level code before runtime. Therefore, Python is an interpreted language.

Q5.What is pep 8?
Ans: PEP stands for Python Enhancement Proposal. It is a set of rules that specify how to format Python code for maximum readability.

Q6. How is memory managed in Python?
Ans: 

Memory management in python is managed by Python private heap space. All Python objects and data structures are located in a private heap. The programmer does not have access to this private heap. The python interpreter takes care of this instead.
The allocation of heap space for Python objects is done by Python’s memory manager. The core API gives access to some tools for the programmer to code.
Python also has an inbuilt garbage collector, which recycles all the unused memory and so that it can be made available to the heap space.
Q7. What is namespace in Python?
Ans: A namespace is a naming system used to make sure that names are unique to avoid naming conflicts.

Q8. What is PYTHONPATH?
Ans: It is an environment variable which is used when a module is imported. Whenever a module is imported, PYTHONPATH is also looked up to check for the presence of the imported modules in various directories. The interpreter uses it to determine which module to load.

Q9. What are python modules? Name some commonly used built-in modules in Python?
Ans: Python modules are files containing Python code. This code can either be functions classes or variables. A Python module is a .py file containing executable code.

Some of the commonly used built-in modules are:

os
sys
math
random
data time
JSON
Q10.What are local variables and global variables in Python?
Global Variables:

Variables declared outside a function or in global space are called global variables. These variables can be accessed by any function in the program.

Local Variables:

Any variable declared inside a function is known as a local variable. This variable is present in the local space and not in the global space.

Example:

1
2
3
4
5
6
a=2
def add():
b=3
c=a+b
print(c)
add()
Output: 5

When you try to access the local variable outside the function add(), it will throw an error.

Q11. Is python case sensitive?
Ans: Yes. Python is a case sensitive language.

Q12.What is type conversion in Python?
Ans: Type conversion refers to the conversion of one data type iinto another.

int() – converts any data type into integer type

float() – converts any data type into float type

ord() – converts characters into integer

hex() – converts integers to hexadecimal

oct() – converts integer to octal

tuple() – This function is used to convert to a tuple.

set() – This function returns the type after converting to set.

list() – This function is used to convert any data type to a list type.

dict() – This function is used to convert a tuple of order (key,value) into a dictionary.

str() – Used to convert integer into a string.

complex(real,imag) – This functionconverts real numbers to complex(real,imag) number.

Q13. How to install Python on Windows and set path variable?

Ans: To install Python on Windows, follow the below steps:

Install python from this link: https://www.python.org/downloads/
After this, install it on your PC. Look for the location where PYTHON has been installed on your PC using the following command on your command prompt: cmd python. 
Then go to advanced system settings and add a new variable and name it as PYTHON_NAME and paste the copied path.
Look for the path variable, select its value and select ‘edit’.
Add a semicolon towards the end of the value if it’s not present and then type %PYTHON_HOME% 
Q14. Is indentation required in python?
Ans: Indentation is necessary for Python. It specifies a block of code. All code within loops, classes, functions, etc is specified within an indented block. It is usually done using four space characters. If your code is not indented necessarily, it will not execute accurately and will throw errors as well.

Q15. What is the difference between Python Arrays and lists?
Ans: Arrays and lists, in Python, have the same way of storing data. But, arrays can hold only a single data type elements whereas lists can hold any data type elements.

Example:

1
2
3
4
5
import array as arr
My_Array=arr.array('i',[1,2,3,4])
My_list=[1,'abc',1.20]
print(My_Array)
print(My_list)
Output:

array(‘i’, [1, 2, 3, 4]) [1, ‘abc’, 1.2]

Q16. What are functions in Python?
Ans: A function is a block of code which is executed only when it is called. To define a Python function, the def keyword is used.

Example:

1
2
3
def Newfunc():
print("Hi, Welcome to Edureka")
Newfunc(); #calling the function
Output: Hi, Welcome to Edureka

Q17.What is __init__?
Ans: __init__ is a method or constructor in Python. This method is automatically called to allocate memory when a new object/ instance of a class is created. All classes have the __init__ method.

Here is an example of how to use it.

1
2
3
4
5
6
7
8
9
10
11
class Employee:
def __init__(self, name, age,salary):
self.name = name
self.age = age
self.salary = 20000
E1 = Employee("XYZ", 23, 20000)
# E1 is the instance of class Employee.
#__init__ allocates memory for E1. 
print(E1.name)
print(E1.age)
print(E1.salary)
Output:

Powered by EdurekaMock Interview
80% INTERVIEW REJECTIONS HAPPEN IN FIRST 90 SECONDS
Take Python Mock Interview
Get Interviewed by Industry ExpertsPersonalized interview feedback
XYZ

23

20000

Q18.What is a lambda function?
Ans: An anonymous function is known as a lambda function. This function can have any number of parameters but, can have just one statement.

Example:

1
2
a = lambda x,y : x+y
print(a(5, 6))
Output: 11

Q19. What is self in Python?
Ans: Self is an instance or an object of a class. In Python, this is explicitly included as the first parameter. However, this is not the case in Java where it’s optional.  It helps to differentiate between the methods and attributes of a class with local variables.

The self variable in the init method refers to the newly created object while in other methods, it refers to the object whose method was called.

Q20. How does break, continue and pass work?
Break	Allows loop termination when some condition is met and the control is transferred to the next statement.
Continue	Allows skipping some part of a loop when some specific condition is met and the control is transferred to the beginning of the loop
Pass	Used when you need some block of code syntactically, but you want to skip its execution. This is basically a null operation. Nothing happens when this is executed.
Q21. What does [::-1} do?
Ans: [::-1] is used to reverse the order of an array or a sequence.
For example:
1
2
3
import array as arr
My_Array=arr.array('i',[1,2,3,4,5])
My_Array[::-1]
Output: array(‘i’, [5, 4, 3, 2, 1])

[::-1] reprints a reversed copy of ordered data structures such as an array or a list. the original array or list remains unchanged.
 

Q22. How can you randomize the items of a list in place in Python?
Ans: Consider the example shown below:

1
2
3
4
from random import shuffle
x = ['Keep', 'The', 'Blue', 'Flag', 'Flying', 'High']
shuffle(x)
print(x)
The output of the following code is as below.

['Flying', 'Keep', 'Blue', 'High', 'The', 'Flag']
Q23. What are python iterators?
Ans: Iterators are objects which can be traversed though or iterated upon.

Q24. How can you generate random numbers in Python?
Ans: Random module is the standard module that is used to generate a random number. The method is defined as:

1
2
import random
random.random
The statement random.random() method return the floating point number that is in the range of [0, 1). The function generates random float numbers. The methods that are used with the random class are the bound methods of the hidden instances. The instances of the Random can be done to show the multi-threading programs that creates a different instance of individual threads. The other random generators that are used in this are:

randrange(a, b): it chooses an integer and define the range in-between [a, b). It returns the elements by selecting it randomly from the range that is specified. It doesn’t build a range object.
uniform(a, b): it chooses a floating point number that is defined in the range of [a,b).Iyt returns the floating point number
normalvariate(mean, sdev): it is used for the normal distribution where the mu is a mean and the sdev is a sigma that is used for standard deviation.
The Random class that is used and instantiated creates an independent multiple random number generators.
Q25. What is the difference between range & xrange?
Ans: For the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a list of integers for you to use, however you please. The only difference is that range returns a Python list object and x range returns an xrange object.

This means that xrange doesn’t actually generate a static list at run-time like range does. It creates the values as you need them with a special technique called yielding. This technique is used with a type of object known as generators. That means that if you have a really gigantic range you’d like to generate a list for, say one billion, xrange is the function to use.

This is especially true if you have a really memory sensitive system such as a cell phone that you are working with, as range will use as much memory as it can to create your array of integers, which can result in a Memory Error and crash your program. It’s a memory hungry beast.

Q26. How do you write comments in python?
Ans: Comments in Python start with a # character. However, alternatively at times, commenting is done using docstrings(strings enclosed within triple quotes).

Example:

#Comments in Python start like this
print("Comments in Python start with a #")
Output:  Comments in Python start with a #

Q27. What is pickling and unpickling?
Ans: Pickle module accepts any Python object and converts it into a string representation and dumps it into a file by using dump function, this process is called pickling. While the process of retrieving original Python objects from the stored string representation is called unpickling.

Q28. What are the generators in python?
Ans: Functions that return an iterable set of items are called generators.

Q29. How will you capitalize the first letter of string?
Ans: In Python, the capitalize() method capitalizes the first letter of a string. If the string already consists of a capital letter at the beginning, then, it returns the original string.

Q30. How will you convert a string to all lowercase?
Ans: To convert a string to lowercase, lower() function can be used.

Example:

1
2
stg='ABCD'
print(stg.lower())
Output: abcd

Q31. How to comment multiple lines in python?
Ans: Multi-line comments appear in more than one line. All the lines to be commented are to be prefixed by a #. You can also a very good shortcut method to comment multiple lines. All you need to do is hold the ctrl key and left click in every place wherever you want to include a # character and type a # just once. This will comment all the lines where you introduced your cursor.

Q32.What are docstrings in Python?
Ans: Docstrings are not actually comments, but, they are documentation strings. These docstrings are within triple quotes. They are not assigned to any variable and therefore, at times, serve the purpose of comments as well.

Example:

1
2
3
4
5
6
7
8
"""
Using docstring as a comment.
This code divides 2 numbers
"""
x=8
y=4
z=x/y
print(z)
Output: 2.0

Q33. What is the purpose of is, not and in operators?
Ans: Operators are special functions. They take one or more values and produce a corresponding result.

is: returns true when 2 operands are true  (Example: “a” is ‘a’)

not: returns the inverse of the boolean value

in: checks if some element is present in some sequence

Q34. What is the usage of help() and dir() function in Python?
Ans: Help() and dir() both functions are accessible from the Python interpreter and used for viewing a consolidated dump of built-in functions. 

Help() function: The help() function is used to display the documentation string and also facilitates you to see the help related to modules, keywords, attributes, etc.
Dir() function: The dir() function is used to display the defined symbols.
Q35. Whenever Python exits, why isn’t all the memory de-allocated?
Ans: 

Whenever Python exits, especially those Python modules which are having circular references to other objects or the objects that are referenced from the global namespaces are not always de-allocated or freed.
It is impossible to de-allocate those portions of memory that are reserved by the C library.
On exit, because of having its own efficient clean up mechanism, Python would try to de-allocate/destroy every other object.
Q36. What is a dictionary in Python?
Ans: The built-in datatypes in Python is called dictionary. It defines one-to-one relationship between keys and values. Dictionaries contain pair of keys and their corresponding values. Dictionaries are indexed by keys.

Let’s take an example:

The following example contains some keys. Country, Capital & PM. Their corresponding values are India, Delhi and Modi respectively.

1
dict={'Country':'India','Capital':'Delhi','PM':'Modi'}
1
print dict[Country]
India
1
print dict[Capital]
Delhi
1
print dict[PM]
Modi
Q37. How can the ternary operators be used in python?
Ans: The Ternary operator is the operator that is used to show the conditional statements. This consists of the true or false values with a statement that has to be evaluated for it.

Syntax:

The Ternary operator will be given as:
[on_true] if [expression] else [on_false]x, y = 25, 50big = x if x < y else y

Example:

The expression gets evaluated like if x<y else y, in this case if x<y is true then the value is returned as big=x and if it is incorrect then big=y will be sent as a result.

Q38. What does this mean: *args, **kwargs? And why would we use it?
Ans: We use *args when we aren’t sure how many arguments are going to be passed to a function, or if we want to pass a stored list or tuple of arguments to a function. **kwargs is used when we don’t know how many keyword arguments will be passed to a function, or it can be used to pass the values of a dictionary as keyword arguments. The identifiers args and kwargs are a convention, you could also use *bob and **billy but that would not be wise.

Q39. What does len() do?
Ans: It is used to determine the length of a string, a list, an array, etc.

Example:

1
2
stg='ABCD'
len(stg)
Q40. Explain split(), sub(), subn() methods of “re” module in Python.
Ans: To modify the strings, Python’s “re” module is providing 3 methods. They are:

split() – uses a regex pattern to “split” a given string into a list.
sub() – finds all substrings where the regex pattern matches and then replace them with a different string
subn() – it is similar to sub() and also returns the new string along with the no. of replacements.
Q41. What are negative indexes and why are they used?
Ans: The sequences in Python are indexed and it consists of the positive as well as negative numbers. The numbers that are positive uses ‘0’ that is uses as first index and ‘1’ as the second index and the process goes on like that.

The index for the negative number starts from ‘-1’ that represents the last index in the sequence and ‘-2’ as the penultimate index and the sequence carries forward like the positive number.

The negative index is used to remove any new-line spaces from the string and allow the string to except the last character that is given as S[:-1]. The negative index is also used to show the index to represent the string in correct order.

Q42. What are Python packages?
Ans: Python packages are namespaces containing multiple modules.

Q43.How can files be deleted in Python?
Ans: To delete a file in Python, you need to import the OS Module. After that, you need to use the os.remove() function.

Example:

1
2
import os
os.remove("xyz.txt")
Q44. What are the built-in types of python?
Ans: Built-in types in Python are as follows –

Integers
Floating-point
Complex numbers
Strings
Boolean
Built-in functions
Q45. What advantages do NumPy arrays offer over (nested) Python lists?
Ans: 

Python’s lists are efficient general-purpose containers. They support (fairly) efficient insertion, deletion, appending, and concatenation, and Python’s list comprehensions make them easy to construct and manipulate.
They have certain limitations: they don’t support “vectorized” operations like elementwise addition and multiplication, and the fact that they can contain objects of differing types mean that Python must store type information for every element, and must execute type dispatching code when operating on each element.
NumPy is not just more efficient; it is also more convenient. You get a lot of vector and matrix operations for free, which sometimes allow one to avoid unnecessary work. And they are also efficiently implemented.
NumPy array is faster and You get a lot built in with NumPy, FFTs, convolutions, fast searching, basic statistics, linear algebra, histograms, etc. 
Q46. How to add values to a python array?
Ans: Elements can be added to an array using the append(), extend() and the insert (i,x) functions.

Example:

1
2
3
4
5
6
7
a=arr.array('d', [1.1 , 2.1 ,3.1] )
a.append(3.4)
print(a)
a.extend([4.5,6.3,6.8])
print(a)
a.insert(2,3.8)
print(a)
Output:

array(‘d’, [1.1, 2.1, 3.1, 3.4])

array(‘d’, [1.1, 2.1, 3.1, 3.4, 4.5, 6.3, 6.8])

array(‘d’, [1.1, 2.1, 3.8, 3.1, 3.4, 4.5, 6.3, 6.8])

Q47. How to remove values to a python array?
Ans: Array elements can be removed using pop() or remove() method. The difference between these two functions is that the former returns the deleted value whereas the latter does not.

Example:

Powered by EdurekaMock Interview
Python Mock interviews for you
Interviews by Industry ExpertsPersonalized detailed interview feedbackAccess to exclusive and curated content
1
2
3
4
5
a=arr.array('d', [1.1, 2.2, 3.8, 3.1, 3.7, 1.2, 4.6])
print(a.pop())
print(a.pop(3))
a.remove(1.1)
print(a)
Output:

4.6

3.1

array(‘d’, [2.2, 3.8, 3.7, 1.2])

Q48. Does Python have OOps concepts?
Ans: Python is an object-oriented programming language. This means that any program can be solved in python by creating an object model. However, Python can be treated as procedural as well as structural language.

Q49. What is the difference between deep and shallow copy?
Ans: Shallow copy is used when a new instance type gets created and it keeps the values that are copied in the new instance. Shallow copy is used to copy the reference pointers just like it copies the values. These references point to the original objects and the changes made in any member of the class will also affect the original copy of it. Shallow copy allows faster execution of the program and it depends on the size of the data that is used.

Deep copy is used to store the values that are already copied. Deep copy doesn’t copy the reference pointers to the objects. It makes the reference to an object and the new object that is pointed by some other object gets stored. The changes made in the original copy won’t affect any other copy that uses the object. Deep copy makes execution of the program slower due to making certain copies for each object that is been called.

Q50. How is Multithreading achieved in Python?
Ans: 

Python has a multi-threading package but if you want to multi-thread to speed your code up, then it’s usually not a good idea to use it.
Python has a construct called the Global Interpreter Lock (GIL). The GIL makes sure that only one of your ‘threads’ can execute at any one time. A thread acquires the GIL, does a little work, then passes the GIL onto the next thread.
This happens very quickly so to the human eye it may seem like your threads are executing in parallel, but they are really just taking turns using the same CPU core.
All this GIL passing adds overhead to execution. This means that if you want to make your code run faster then using the threading package often isn’t a good idea.
Q51. What is the process of compilation and linking in python?
Ans: The compiling and linking allows the new extensions to be compiled properly without any error and the linking can be done only when it passes the compiled procedure. If the dynamic loading is used then it depends on the style that is being provided with the system. The python interpreter can be used to provide the dynamic loading of the configuration setup files and will rebuild the interpreter.

The steps that are required in this as:

Create a file with any name and in any language that is supported by the compiler of your system. For example file.c or file.cpp
Place this file in the Modules/ directory of the distribution which is getting used.
Add a line in the file Setup.local that is present in the Modules/ directory.
Run the file using spam file.o
After a successful run of this rebuild the interpreter by using the make command on the top-level directory.
If the file is changed then run rebuildMakefile by using the command as ‘make Makefile’.
Q52. What are Python libraries? Name a few of them.
Python libraries are a collection of Python packages. Some of the majorly used python libraries are – Numpy, Pandas, Matplotlib, Scikit-learn and many more.

Q53. What is split used for?
The split() method is used to separate a given string in Python.

Example:

1
2
a="edureka python"
print(a.split())
Output:  [‘edureka’, ‘python’]

Q54. How to import modules in python?

Modules can be imported using the import keyword.  You can import modules in three ways-

Example:

1
2
3
import array           #importing using the original module name
import array as arr    # importing using an alias name
from array import *    #imports everything present in the array module
OOPS Interview Questions
Q55. Explain Inheritance in Python with an example.
Ans: Inheritance allows One class to gain all the members(say attributes and methods) of another class. Inheritance provides code reusability, makes it easier to create and maintain an application. The class from which we are inheriting is called super-class and the class that is inherited is called a derived / child class.

They are different types of inheritance supported by Python:

Single Inheritance – where a derived class acquires the members of a single super class.
Multi-level inheritance – a derived class d1 in inherited from base class base1, and d2 are inherited from base2.
Hierarchical inheritance – from one base class you can inherit any number of child classes
Multiple inheritance – a derived class is inherited from more than one base class.
Q56. How are classes created in Python? 
Ans: Class in Python is created using the class keyword.

Example:

1
2
3
4
5
class Employee:
def __init__(self, name):
self.name = name
E1=Employee("abc")
print(E1.name)
Output: abc

Q57. What is monkey patching in Python?
Ans: In Python, the term monkey patch only refers to dynamic modifications of a class or module at run-time.

Consider the below example:

1
2
3
4
# m.py
class MyClass:
def f(self):
print "f()"
We can then run the monkey-patch testing like this:

1
2
3
4
5
6
7
import m
def monkey_f(self):
print "monkey_f()"
 
m.MyClass.f = monkey_f
obj = m.MyClass()
obj.f()
The output will be as below:

monkey_f()
As we can see, we did make some changes in the behavior of f() in MyClass using the function we defined, monkey_f(), outside of the module m.

Q58. Does python support multiple inheritance?
Ans: Multiple inheritance means that a class can be derived from more than one parent classes. Python does support multiple inheritance, unlike Java.

Q59. What is Polymorphism in Python?
Ans: Polymorphism means the ability to take multiple forms. So, for instance, if the parent class has a method named ABC then the child class also can have a method with the same name ABC having its own parameters and variables. Python allows polymorphism.

Q60. Define encapsulation in Python?
Ans: Encapsulation means binding the code and the data together. A Python class in an example of encapsulation.

Q61. How do you do data abstraction in Python?
Ans: Data Abstraction is providing only the required details and hiding the implementation from the world. It can be achieved in Python by using interfaces and abstract classes.

Q62.Does python make use of access specifiers?
Ans: Python does not deprive access to an instance variable or function. Python lays down the concept of prefixing the name of the variable, function or method with a single or double underscore to imitate the behavior of protected and private access specifiers.  
Q63. How to create an empty class in Python? 
Ans: An empty class is a class that does not have any code defined within its block. It can be created using the pass keyword. However, you can create objects of this class outside the class itself. IN PYTHON THE PASS command does nothing when its executed. it’s a null statement. 
For example-
1
2
3
4
5
class a:
    pass
obj=a()
obj.name="xyz"
print("Name = ",obj.name)
Output: 

Name =  xyz
Q64. What does an object() do?

Ans: It returns a featureless object that is a base for all classes. Also, it does not take any parameters.
Basic Python Programs
Q65. Write a program in Python to execute the Bubble sort algorithm.
1
2
3
4
5
6
7
8
9
10
def bs(a):             # a = name of list
    b=len(a)-1         # minus 1 because we always compare 2 adjacent values
                             
    for x in range(b):
        for y in range(b-x):
            if a[y]>a[y+1]:
                a[y],a[y+1]=a[y+1],a[y]
    return a
a=[32,5,3,6,7,54,87]
bs(a)
Output:  [3, 5, 6, 7, 32, 54, 87]

Q66. Write a program in Python to produce Star triangle.
1
2
3
4
def pyfunc(r):
    for x in range(r):
        print(' '*(r-x-1)+'*'*(2*x+1))    
pyfunc(9)
Output:

        *
       ***
      *****
     *******
    *********
   ***********
  *************
 ***************
*****************

Q67. Write a program to produce Fibonacci series in Python.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
# Enter number of terms needed                   #0,1,1,2,3,5....
a=int(input("Enter the terms"))
f=0                                         #first element of series
s=1                                         #second element of series
if a<=0:
    print("The requested series is
",f)
else:
    print(f,s,end=" ")
    for x in range(2,a):
        next=f+s                           
        print(next,end=" ")
        f=s
        s=next</pre>
 

Output: Enter the terms 5 0 1 1 2 3

Q68. Write a program in Python to check if a number is prime.
1
2
3
4
5
6
7
8
9
10
a=int(input("enter number"))     
if a>1:
    for x in range(2,a):
        if(a%x)==0:
            print("not prime")
            break
    else:
        print("Prime")
else:
    print("not prime")
Output:

enter number 3

Prime

Q69. Write a program in Python to check if a sequence is a Palindrome.
1
2
3
4
5
6
a=input("enter sequence")
b=a[::-1]
if a==b:
    print("palindrome")
else:
    print("Not a Palindrome")
Output:

enter sequence 323 palindrome

Q70. Write a one-liner that will count the number of capital letters in a file. Your code should work even if the file is too big to fit in memory.
Ans:  Let us first write a multiple line solution and then convert it to one-liner code.

1
2
3
4
5
6
with open(SOME_LARGE_FILE) as fh:
count = 0
text = fh.read()
for character in text:
    if character.isupper():
count += 1
We will now try to transform this into a single line.

1
count sum(1 for line in fh for character in line if character.isupper())
Q71. Write a sorting algorithm for a numerical dataset in Python.
Ans: The following code can be used to sort a list in Python:

1
2
3
4
list = ["1", "4", "0", "6", "9"]
list = [int(i) for i in list]
list.sort()
print (list)
Q72. Looking at the below code, write down the final values of A0, A1, …An.
1
2
3
4
5
6
7
A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))
A1 = range(10)A2 = sorted([i for i in A1 if i in A0])
A3 = sorted([A0[s] for s in A0])
A4 = [i for i in A1 if i in A3]
A5 = {i:i*i for i in A1}
A6 = [[i,i*i] for i in A1]
print(A0,A1,A2,A3,A4,A5,A6)
Ans: The following will be the final outputs of A0, A1, … A6


A0 = {'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4} # the order may vary
A1 = range(0, 10) 
A2 = []
A3 = [1, 2, 3, 4, 5]
A4 = [1, 2, 3, 4, 5]
A5 = {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
A6 = [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]
Python Libraries Interview Questions
Q73. Explain what Flask is and its benefits?
Ans: Flask is a web microframework for Python based on “Werkzeug, Jinja2 and good intentions” BSD license. Werkzeug and Jinja2 are two of its dependencies. This means it will have little to no dependencies on external libraries.  It makes the framework light while there is a little dependency to update and fewer security bugs.

A session basically allows you to remember information from one request to another. In a flask, a session uses a signed cookie so the user can look at the session contents and modify. The user can modify the session if only it has the secret key Flask.secret_key.

Q74. Is Django better than Flask?
Ans: Django and Flask map the URL’s or addresses typed in the web browsers to functions in Python. 

Flask is much simpler compared to Django but, Flask does not do a lot for you meaning you will need to specify the details, whereas Django does a lot for you wherein you would not need to do much work. Django consists of prewritten code, which the user will need to analyze whereas Flask gives the users to create their own code, therefore, making it simpler to understand the code. Technically both are equally good and both contain their own pros and cons.

Q75. Mention the differences between Django, Pyramid and Flask.
Ans: 

Flask is a “microframework” primarily build for a small application with simpler requirements. In flask, you have to use external libraries. Flask is ready to use.
Pyramid is built for larger applications. It provides flexibility and lets the developer use the right tools for their project. The developer can choose the database, URL structure, templating style and more. Pyramid is heavy configurable.
Django can also be used for larger applications just like Pyramid. It includes an ORM.
Q76. Discuss Django architecture.
Ans: Django MVT Pattern:

Django Architecture - Python Interview Questions - EdurekaFigure:  Python Interview Questions – Django Architecture

The developer provides the Model, the view and the template then just maps it to a URL and Django does the magic to serve it to the user.

Q77. Explain how you can set up the Database in Django.
Ans: You can use the command edit mysite/setting.py, it is a normal python module with module level representing Django settings.

Django uses SQLite by default; it is easy for Django users as such it won’t require any other type of installation. In the case your database choice is different that you have to the following keys in the DATABASE ‘default’ item to match your database connection settings.

Engines: you can change the database by using ‘django.db.backends.sqlite3’ , ‘django.db.backeneds.mysql’, ‘django.db.backends.postgresql_psycopg2’, ‘django.db.backends.oracle’ and so on
Name: The name of your database. In the case if you are using SQLite as your database, in that case, database will be a file on your computer, Name should be a full absolute path, including the file name of that file.
If you are not choosing SQLite as your database then settings like Password, Host, User, etc. must be added.
Django uses SQLite as a default database, it stores data as a single file in the filesystem. If you do have a database server—PostgreSQL, MySQL, Oracle, MSSQL—and want to use it rather than SQLite, then use your database’s administration tools to create a new database for your Django project. Either way, with your (empty) database in place, all that remains is to tell Django how to use it. This is where your project’s settings.py file comes in.

We will add the following lines of code to the setting.py file:

1
2
3
4
5
6
DATABASES = {
     'default': {
          'ENGINE' : 'django.db.backends.sqlite3',
          'NAME' : os.path.join(BASE_DIR, 'db.sqlite3'),
     }
}
Q78. Give an example how you can write a VIEW in Django?
Ans: This is how we can use write a view in Django:

1
2
3
4
5
6
7
from django.http import HttpResponse
import datetime
 
def Current_datetime(request):
     now = datetime.datetime.now()
     html = "<html><body>It is now %s</body></html> % now
     return HttpResponse(html)
Returns the current date and time, as an HTML document

Q79. Mention what the Django templates consist of.
Ans: The template is a simple text file.  It can create any text-based format like XML, CSV, HTML, etc.  A template contains variables that get replaced with values when the template is evaluated and tags (% tag %) that control the logic of the template.

Django Template - Python Interview Questions - EdurekaFigure: Python Interview Questions – Django Template

Q80. Explain the use of session in Django framework?
Ans: Django provides a session that lets you store and retrieve data on a per-site-visitor basis. Django abstracts the process of sending and receiving cookies, by placing a session ID cookie on the client side, and storing all the related data on the server side.

Django Framework - Python Interview Questions - EdurekaFigure: Python Interview Questions – Django Framework

Powered by EdurekaMock Interview
NEED HELP FOR YOUR UPCOMING INTERVIEW?
Take Python Mock Interview
Get Interviewed by Industry ExpertsPersonalized interview feedback
So the data itself is not stored client side. This is nice from a security perspective.

Q81.  List out the inheritance styles in Django.

Ans: In Django, there are three possible inheritance styles:

Abstract Base Classes: This style is used when you only want parent’s class to hold information that you don’t want to type out for each child model.
Multi-table Inheritance: This style is used If you are sub-classing an existing model and need each model to have its own database table.
Proxy models: You can use this model, If you only want to modify the Python level behavior of the model, without changing the model’s fields.
Web Scraping – Python Interview Questions
Q82. How To Save An Image Locally Using Python Whose URL Address I Already Know?
Ans: We will use the following code to save an image locally from an URL address

1
2
import urllib.request
urllib.request.urlretrieve("URL", "local-filename.jpg")
Q83. How can you Get the Google cache age of any URL or web page?
Ans: Use the following URL format:

http://webcache.googleusercontent.com/search?q=cache:URLGOESHERE

Be sure to replace “URLGOESHERE” with the proper web address of the page or site whose cache you want to retrieve and see the time for. For example, to check the Google Webcache age of edureka.co you’d use the following URL:

http://webcache.googleusercontent.com/search?q=cache:edureka.co

Q84. You are required to scrap data from IMDb top 250 movies page. It should only have fields movie name, year, and rating.
Ans: We will use the following lines of code:


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
from bs4 import BeautifulSoup
 
import requests
import sys
 
url = '<a href="http://www.imdb.com/chart/top">http://www.imdb.com/chart/top</a>'
response = requests.get(url)
soup = BeautifulSoup(response.text)
tr = soup.findChildren("tr")
tr = iter(tr)
next(tr)
 
for movie in tr:
title = movie.find('td', {'class': 'titleColumn'} ).find('a').contents[0]
year = movie.find('td', {'class': 'titleColumn'} ).find('span', {'class': 'secondaryInfo'}).contents[0]
rating = movie.find('td', {'class': 'ratingColumn imdbRating'} ).find('strong').contents[0]
row = title + ' - ' + year + ' ' + ' ' + rating
 
print(row)
The above code will help scrap data from IMDb’s top 250 list

Data Analysis – Python Interview Questions
Q85. What is map function in Python?
Ans: map function executes the function given as the first argument on all the elements of the iterable given as the second argument. If the function given takes in more than 1 arguments, then many iterables are given. #Follow the link to know more similar functions.

Q86. Is python numpy better than lists?
Ans: We use python numpy array instead of a list because of the below three reasons:

Less Memory
Fast
Convenient
For more information on these parameters, you can refer to this section – Numpy Vs List.

Q87. How to get indices of N maximum values in a NumPy array?
Ans: We can get the indices of N maximum values in a NumPy array using the below code:

1
2
3
import numpy as np
arr = np.array([1, 3, 2, 4, 5])
print(arr.argsort()[-3:][::-1])
Output

[ 4 3 1 ]
Q88. How do you calculate percentiles with Python/ NumPy?
Ans: We can calculate percentiles with the following code

1
2
3
4
import numpy as np
a = np.array([1,2,3,4,5])
p = np.percentile(a, 50) #Returns 50th percentile, e.g. median
print(p)
Output

3
Q89. What is the difference between NumPy and SciPy?
Ans: 

In an ideal world, NumPy would contain nothing but the array data type and the most basic operations: indexing, sorting, reshaping, basic elementwise functions, et cetera.
All numerical code would reside in SciPy. However, one of NumPy’s important goals is compatibility, so NumPy tries to retain all features supported by either of its predecessors.
Thus NumPy contains some linear algebra functions, even though these more properly belong in SciPy. In any case, SciPy contains more fully-featured versions of the linear algebra modules, as well as many other numerical algorithms.
If you are doing scientific computing with python, you should probably install both NumPy and SciPy. Most new features belong in SciPy rather than NumPy.
Q90. How do you make 3D plots/visualizations using NumPy/SciPy?

Ans: Like 2D plotting, 3D graphics is beyond the scope of NumPy and SciPy, but just as in the 2D case, packages exist that integrate with NumPy. Matplotlib provides basic 3D plotting in the mplot3d subpackage, whereas Mayavi provides a wide range of high-quality 3D visualization features, utilizing the powerful VTK engine.

Multiple Choice Questions (MCQ)
Q91. Which of the following statements create a dictionary? (Multiple Correct Answers Possible)
a) d = {}
b) d = {“john”:40, “peter”:45}
c) d = {40:”john”, 45:”peter”}
d) d = (40:”john”, 45:”50”)
Answer: b, c & d. 

Dictionaries are created by specifying keys and values.

Q92. Which one of these is floor division?
a) /
b) //
c) %
d) None of the mentioned
Answer: b) //

When both of the operands are integer then python chops out the fraction part and gives you the round off value, to get the accurate answer use floor division. For ex, 5/2 = 2.5 but both of the operands are integer so answer of this expression in python is 2. To get the 2.5 as the answer, use floor division using //. So, 5//2 = 2.5

Q93. What is the maximum possible length of an identifier?
a) 31 characters
b) 63 characters
c) 79 characters
d) None of the above
Answer: d) None of the above

Identifiers can be of any length.

Q94. Why are local variable names beginning with an underscore discouraged?
a) they are used to indicate a private variables of a class
b) they confuse the interpreter
c) they are used to indicate global variables
d) they slow down execution
Answer: a) they are used to indicate a private variable of a class

As Python has no concept of private variables, leading underscores are used to indicate variables that must not be accessed from outside the class.

Q95. Which of the following is an invalid statement?
a) abc = 1,000,000
b) a b c = 1000 2000 3000
c) a,b,c = 1000, 2000, 3000
d) a_b_c = 1,000,000
Answer: b) a b c = 1000 2000 3000

Spaces are not allowed in variable names.

Q96. What is the output of the following?
1
2
3
4
5
6
7
try:
    if '1' != 1:
        raise "someError"
    else:
        print("someError has not occured")
except "someError":
    print ("someError has occured")
a) someError has occured
b) someError has not occured
c) invalid code
d) none of the above
Answer: c) invalid code

A new exception class must inherit from a BaseException. There is no such inheritance here.

Q97. Suppose list1 is [2, 33, 222, 14, 25], What is list1[-1] ?
a) Error
b) None
c) 25
d) 2
Answer: c) 25

The index -1 corresponds to the last index in the list.

Q98. To open a file c:scores.txt for writing, we use
a) outfile = open(“c:scores.txt”, “r”)
b) outfile = open(“c:scores.txt”, “w”)
c) outfile = open(file = “c:scores.txt”, “r”)
d) outfile = open(file = “c:scores.txt”, “o”)
Answer: b) The location contains double slashes ( ) and w is used to indicate that file is being written to.

Q99. What is the output of the following?
1
2
3
4
5
6
7
8
f = None
 
for i in range (5):
    with open("data.txt", "w") as f:
        if i > 2:
            break
 
print f.closed
a) True
b) False
c) None
d) Error
Answer: a) True 

The WITH statement when used with open file guarantees that the file object is closed when the with block exits.

Q100. When will the else part of try-except-else be executed?
a) always
b) when an exception occurs
c) when no exception occurs
d) when an exception occurs into except block
Answer: c) when no exception occurs

















Q.1. What are the key features of Python?

If it makes for an introductory language to programming, Python must mean something. These are its qualities:

Interpreted
Dynamically-typed
Object-oriented
Concise and simple
Free
Has a large community
Q.2. Differentiate between lists and tuples.

The major difference is that a list is mutable, but a tuple is immutable. Examples:

>>> mylist=[1,3,3]
>>> mylist[1]=2
>>> mytuple=(1,3,3)
>>> mytuple[1]=2
Traceback (most recent call last):

File “<pyshell#97>”, line 1, in <module>

mytuple[1]=2

TypeError: ‘tuple’ object does not support item assignment

Python Tuples vs Lists – A Detailed Comparison

Q.3. Explain the ternary operator in Python.

Unlike C++, we don’t have ?: in Python, but we have this:

[on true] if [expression] else [on false]

If the expression is True, the statement under [on true] is executed. Else, that under [on false] is executed.

Below is how you would use it:

>>> a,b=2,3
>>> min=a if a<b else b
>>> min
2

>>> print("Hi") if a<b else print("Bye")
Hi

Q.4. What are negative indices?

Let’s take a list for this.

>>> mylist=[0,1,2,3,4,5,6,7,8]
A negative index, unlike a positive one, begins searching from the right.

>>> mylist[-3]
6

This also helps with slicing from the back:

>>> mylist[-6:-1]
[3, 4, 5, 6, 7]

Q.5. Is Python case-sensitive?

A language is case-sensitive if it distinguishes between identifiers like myname and Myname. In other words, it cares about case- lowercase or uppercase. Let’s try this with Python.

>>> myname='Ayushi'
>>> Myname
Traceback (most recent call last):

File “<pyshell#3>”, line 1, in <module>

Myname

NameError: name ‘Myname’ is not defined

As you can see, this raised a NameError. This means that Python is indeed case-sensitive.

Q.6. How long can an identifier be in Python?

According to the official Python documentation, an identifier can be of any length. However, PEP 8 suggests that you should limit all lines to a maximum of 79 characters. Also, PEP 20 says ‘readability counts’. So, a very long identifier will violate PEP-8 and PEP-20.

Apart from that, there are certain rules we must follow to name one:

It can only begin with an underscore or a character from A-Z or a-z.
The rest of it can contain anything from the following: A-Z/a-z/_/0-9.
Python is case-sensitive, as we discussed in the previous question.
Keywords cannot be used as identifiers. Python has the following keywords:
and	def	False	import	not	True
as	del	finally	in	or	try
assert	elif	for	is	pass	while
break	else	from	lambda	print	with
class	except	global	None	raise	yield
continue	exec	if	nonlocal	return
Learn everything about Python Identifiers

Q.7. How would you convert a string into lowercase?

We use the lower() method for this.

>>> 'AyuShi'.lower()
‘ayushi’

To convert it into uppercase, then, we use upper().

>>> 'AyuShi'.upper()
‘AYUSHI’

Also, to check if a string is in all uppercase or all lowercase, we use the methods isupper() and islower().

>>> 'AyuShi'.isupper()
False

>>> 'AYUSHI'.isupper()
True

>>> 'ayushi'.islower()
True

>>> '@yu$hi'.islower()
True

>>> '@YU$HI'.isupper()
True

So, characters like @ and $ will suffice for both cases

Also, istitle() will tell us if a string is in title case.

>>> 'The Corpse Bride'.istitle()
True

Q.8. What is the pass statement in Python?

There may be times in our code when we haven’t decided what to do yet, but we must type something for it to be syntactically correct. In such a case, we use the pass statement.

>>> def func(*args):
pass
>>>
Similarly, the break statement breaks out of a loop.

>>> for i in range(7):
if i==3: break
print(i)
1

2

Finally, the continue statement skips to the next iteration.

>>> for i in range(7):
if i==3: continue
print(i)
1

2

4

5

6

Hope you have read all the basic Python Interview Questions and Answers. Now, let’s move towards the second part of the blog – Most asked Python Interview Questions and Answers for freshers

Frequently Asked Python Interview Questions and Answers for Freshers
While solving or answering these questions, if you feel any difficulty, comment us. DataFlair is always ready to help you.

Q.9. Explain help() and dir() functions in Python.

The help() function displays the documentation string and help for its argument.

>>> import copy
>>> help(copy.copy)
Help on function copy in module copy:

copy(x)

Shallow copy operation on arbitrary Python objects.

See the module’s __doc__ string for more info.

The dir() function displays all the members of an object(any kind).

>>> dir(copy.copy)
[‘__annotations__’, ‘__call__’, ‘__class__’, ‘__closure__’, ‘__code__’, ‘__defaults__’, ‘__delattr__’, ‘__dict__’, ‘__dir__’, ‘__doc__’, ‘__eq__’, ‘__format__’, ‘__ge__’, ‘__get__’, ‘__getattribute__’, ‘__globals__’, ‘__gt__’, ‘__hash__’, ‘__init__’, ‘__init_subclass__’, ‘__kwdefaults__’, ‘__le__’, ‘__lt__’, ‘__module__’, ‘__name__’, ‘__ne__’, ‘__new__’, ‘__qualname__’, ‘__reduce__’, ‘__reduce_ex__’, ‘__repr__’, ‘__setattr__’, ‘__sizeof__’, ‘__str__’, ‘__subclasshook__’]

Q.10. How do you get a list of all the keys in a dictionary?

Be specific in these type of Python Interview Questions and Answers.

For this, we use the function keys().

>>> mydict={'a':1,'b':2,'c':3,'e':5}
>>> mydict.keys()
dict_keys([‘a’, ‘b’, ‘c’, ‘e’])

Wait!! Have you developed any Python Project yet?

Practice with Top Python Projects with source code and become job-ready

Q.11. What is slicing?

Slicing is a technique that allows us to retrieve only a part of a list, tuple, or string. For this, we use the slicing operator [].

>>> (1,2,3,4,5)[2:4]
(3, 4)

>>> [7,6,8,5,9][2:]
[8, 5, 9]

>>> 'Hello'[:-1]
‘Hell’

Q.12. How would you declare a comment in Python?

Unlike languages like C++, Python does not have multiline comments. All it has is octothorpe (#). Anything following a hash is considered a comment, and the interpreter ignores it.

>>> #line 1 of comment
>>> #line 2 of comment
In fact, you can place a comment anywhere in your code. You can use it to explain your code.

Q.13. How will you check if all characters in a string are alphanumeric?

For this, we use the method isalnum().

Q.14. How will you capitalize the first letter of a string?

Simply using the method capitalize().

>>> 'ayushi'.capitalize()
‘Ayushi’

>>> type(str.capitalize)
<class ‘method_descriptor’>

However, it will let other characters be.

>>> '@yushi'.capitalize()
‘@yushi’

>>> 'Ayushi123'.isalnum()
True

>>> 'Ayushi123!'.isalnum()
False

Other methods that we have include:

>>> '123.3'.isdigit()
False

>>> '123'.isnumeric()
True

>>> 'ayushi'.islower()
True

>>> 'Ayushi'.isupper()
False

>>> 'Ayushi'.istitle()
True

>>> ' '.isspace()
True

>>> '123F'.isdecimal()
False

Q.15. We know Python is all the rage these days. But to be truly accepting of a great technology, you must know its pitfalls as well. Would you like to talk about this?

Of course. To be truly yourself, you must be accepting of your flaws. Only then can you move forward to work on them. Python has its flaws too:

Python Interview Question - limitations of Python

Python’s interpreted nature imposes a speed penalty on it.
While Python is great for a lot of things, it is weak in mobile computing, and in browsers.
Being dynamically-typed, Python uses duck-typing (If it looks like a duck, it must be a duck). This can raise runtime errors.
Python has underdeveloped database access layers. This renders it a less-than-perfect choice for huge database applications.
And then, well, of course. Being easy makes it addictive. Once a Python-coder, always a Python coder.
Q.16. With Python, how do you find out which directory you are currently in?

To find this, we use the function/method getcwd(). We import it from the module os.

>>> import os
>>> os.getcwd()
‘C:\\Users\\lifei\\AppData\\Local\\Programs\\Python\\Python36-32’

>>> type(os.getcwd)
<class ‘builtin_function_or_method’>

We can also change the current working directory with chdir().

>>> os.chdir('C:\\Users\\lifei\\Desktop')
>>> os.getcwd()
‘C:\\Users\\lifei\\Desktop’

Q.17. How do you insert an object at a given index in Python?

Let’s build a list first.

>>> a=[1,2,4]
Now, we use the method insert. The first argument is the index at which to insert, the second is the value to insert.

>>> a.insert(2,3)
>>> a
[1, 2, 3, 4]

Q.18. And how do you reverse a list?

Using the reverse() method.

>>> a.reverse()
>>> a
[4, 3, 2, 1]

You can also do it via slicing from right to left:

>>> a[::-1]
>>> a
[1, 2, 3, 4]

This gives us the original list because we already reversed it once. However, this does not modify the original list to reverse it.

Q.19. What is the Python interpreter prompt?

This is the following sign for Python Interpreter:

>>>
If you have worked with the IDLE, you will see this prompt.

Q.20. How does a function return values?

A function uses the ‘return’ keyword to return a value. Take a look:

>>> def add(a,b):
return a+b
Q.21. How would you define a block in Python?

For any kind of statements, we possibly need to define a block of code under them. However, Python does not support curly braces. This means we must end such statements with colons and then indent the blocks under those with the same amount.

>>> if 3>1:
print("Hello")
print("Goodbye")
Hello

Goodbye

Q.22. Why do we need break and continue in Python?

Both break and continue are statements that control flow in Python loops. break stops the current loop from executing further and transfers the control to the next block. continue jumps to the next iteration of the loop without exhausting it.

Q.23. Will the do-while loop work if you don’t end it with a semicolon?

Trick question! Python does not support an intrinsic do-while loop. Secondly, to terminate do-while loops is a necessity for languages like C++.

Q.24. In one line, show us how you’ll get the max alphabetical character from a string.

For this, we’ll simply use the max function.

>>> max('flyiNg')
‘y’

The following are the ASCII values for all the letters of this string-

f- 102

l- 108

y- 121

i- 105

N- 78

g- 103

By this logic, try to explain the following line of code-

>>> max('fly{}iNg')
‘}’

(Bonus: } – 125)

Q.25. What is Python good for?

Python is a jack of many trades, check out Applications of Python to find out more.

Meanwhile, we’ll say we can use it for:

Web and Internet Development
Desktop GUI
Scientific and Numeric Applications
Software Development Applications
Applications in Education
Applications in Business
Database Access
Network Programming
Games, 3D Graphics
Other Python Applications
Q.26. Can you name ten built-in functions in Python and explain each in brief?

Ten Built-in Functions, you say? Okay, here you go.

complex()- Creates a complex number.

>>> complex(3.5,4)
(3.5+4j)

eval()- Parses a string as an expression.

>>> eval('print(max(22,22.0)-min(2,3))')
20

filter()- Filters in items for which the condition is true.

>>> list(filter(lambda x:x%2==0,[1,2,0,False]))
[2, 0, False]

format()- Lets us format a string.

>>> print("a={0} but b={1}".format(a,b))
a=2 but b=3

hash()- Returns the hash value of an object.

>>> hash(3.7)
644245917

hex()- Converts an integer to a hexadecimal.

>>> hex(14)
‘0xe’

input()- Reads and returns a line of string.

>>> input('Enter a number')
Enter a number7

‘7’
len()- Returns the length of an object.

>>> len('Ayushi')
6

locals()- Returns a dictionary of the current local symbol table.

>>> locals()
{‘__name__’: ‘__main__’, ‘__doc__’: None, ‘__package__’: None, ‘__loader__’: <class ‘_frozen_importlib.BuiltinImporter’>, ‘__spec__’: None, ‘__annotations__’: {}, ‘__builtins__’: <module ‘builtins’ (built-in)>, ‘a’: 2, ‘b’: 3}

open()- Opens a file.

>>> file=open('tabs.txt')
Q.27. What will the following code output?

>>> word=’abcdefghij’
>>> word[:3]+word[3:]
The output is ‘abcdefghij’. The first slice gives us ‘abc’, the next gives us ‘defghij’.

Q.28. How will you convert a list into a string?

We will use the join() method for this.

>>> nums=['one','two','three','four','five','six','seven']
>>> s=' '.join(nums)
>>> s
‘one two three four five six seven’

Q.29. How will you remove a duplicate element from a list?

We can turn it into a set to do that.

>>> list=[1,2,1,3,4,2]
>>> set(list)
{1, 2, 3, 4}

Q.30. Can you explain the life cycle of a thread?

python scripting interview questions

To create a thread, we create a class that we make override the run method of the thread class. Then, we instantiate it.
A thread that we just created is in the new state. When we make a call to start() on it, it forwards the threads for scheduling. These are in the ready state.
When execution begins, the thread is in the running state.
Calls to methods like sleep() and join() make a thread wait. Such a thread is in the waiting/blocked state.
When a thread is done waiting or executing, other waiting threads are sent for scheduling.
A running thread that is done executing terminates and is in the dead state.
Basic Python Program Interview Questions and Answers
Q.31. What is a dictionary in Python?

A python dictionary is something I have never seen in other languages like C++ or Java programming. It holds key-value pairs.

>>> roots={25:5,16:4,9:3,4:2,1:1}
>>> type(roots)
<class ‘dict’>

>>> roots[9]
3

A dictionary is mutable, and we can also use a comprehension to create it.

>>> roots={x**2😡 for x in range(5,0,-1)}
>>> roots
{25: 5, 16: 4, 9: 3, 4: 2, 1: 1}

Q.32. Explain the //, %, and ** operators in Python.

The // operator performs floor division. It will return the integer part of the result on division.

>>> 7//2
3

Normal division would return 3.5 here.

Similarly, ** performs exponentiation. a**b returns the value of a raised to the power b.

>>> 2**10
1024

Finally, % is for modulus. This gives us the value left after the highest achievable division.

>>> 13%7
6

>>> 3.5%1.5
0.5

Q.33. What do you know about relational operators in Python.

Top python interview questions with answers

 

Relational operators compare values.

Less than (<) If the value on the left is lesser, it returns True.

>>> 'hi'<'Hi'
False
Greater than (>) If the value on the left is greater, it returns True.

>>> 1.1+2.2>3.3
True

This is because of the flawed floating-point arithmetic in Python, due to hardware dependencies.

Less than or equal to (<=) If the value on the left is lesser than or equal to, it returns True.

>>> 3.0<=3
True

Greater than or equal to (>=) If the value on the left is greater than or equal to, it returns True.

>>> True>=False
True

Equal to (==) If the two values are equal, it returns True.

>>> {1,3,2,2}=={1,2,3}
True

Not equal to (!=) If the two values are unequal, it returns True.

>>> True!=0.1
True

>>> False!=0.1
True

You will surely face a question from Python Operators. There are chances that question may be in an indirect way. Prepare yourself for it with the best guide – Python Operators

Q.34. What are assignment operators in Python?

python coding interview questions

We can combine all arithmetic operators with the assignment symbol.

>>> a=7
>>> a+=1
>>> a
8

>>> a-=1
>>> a
7

>>> a*=2
>>> a
14

>>> a/=2
>>> a
7.0

>>> a**=2
>>> a
49.0

>>> a//=3
>>> a
16.0

>>> a%=4
>>> a
0.0

Q.35. Explain logical operators in Python.

We have three logical operators- and, or, not.

>>> False and True
False

>>> 7<7 or True
True

>>> not 2==2
False

Q.36. What are membership operators?

With the operators ‘in’ and ‘not in’, we can confirm if a value is a member in another.

>>> 'me' in 'disappointment'
True

>>> 'us' not in 'disappointment'
True

Q.37. Explain identity operators in Python.

The operators ‘is’ and ‘is not’ tell us if two values have the same identity.

>>> 10 is '10'
False

>>> True is not False
True

Q.38. Finally, tell us about bitwise operators in Python.

python interview questions for freshers

These operate on values bit by bit.

AND (&) This performs & on each bit pair.

>>> 0b110 & 0b010
2

OR (|) This performs | on each bit pair.

>>> 3|2
3

XOR (^) This performs an exclusive-OR operation on each bit pair.

>>> 3^2
1

Binary One’s Complement (~) This returns the one’s complement of a value.

>>> ~2
-3

Binary Left-Shift (<<) This shifts the bits to the left by the specified amount.

>>> 1<<2
4

Here, 001 was shifted to the left by two places to get 100, which is binary for 4.

Binary Right-Shift (>>)

>>> 4>>2
1

Q.39. What data types does Python support?

Python provides us with five kinds of data types:

Numbers – Numbers use to hold numerical values.

>>> a=7.0
>>>
Strings – A string is a sequence of characters. We declare it using single or double quotes.

>>> title="Ayushi's Book"
Lists – A list is an ordered collection of values, and we declare it using square brackets.

>>> colors=['red','green','blue']
>>> type(colors)
<class ‘list’>

Tuples – A tuple, like a list, is an ordered collection of values. The difference. However, is that a tuple is immutable. This means that we cannot change a value in it.

>>> name=('Ayushi','Sharma')
>>> name[0]='Avery'
Traceback (most recent call last):

File “<pyshell#129>”, line 1, in <module>

name[0]=’Avery’

TypeError: ‘tuple’ object does not support item assignment

Dictionary – A dictionary is a data structure that holds key-value pairs. We declare it using curly braces.

>>> squares={1:1,2:4,3:9,4:16,5:25}
>>> type(squares)
<class ‘dict’>

>>> type({})
<class ‘dict’>

We can also use a dictionary comprehension:

>>> squares={x:x**2 for x in range(1,6)}
>>> squares
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

Don’t miss the complete guide for Python Data Types and Variables

Q.40. What is a docstring?

A docstring is a documentation string that we use to explain what a construct does. We place it as the first thing under a function, class, or a method, to describe what it does. We declare a docstring using three sets of single or double-quotes.

>>> def sayhi():
"""
The function prints Hi
"""
print("Hi")
>>> sayhi()
Hi

To get a function’s docstring, we use its __doc__ attribute.

>>> sayhi.__doc__
‘\n\tThis function prints Hi\n\t’

A docstring, unlike a comment, is retained at runtime.

Q.41. How would you convert a string into an int in Python?

If a string contains only numerical characters, you can convert it into an integer using the int() function.

>>> int('227')
227

Let’s check the types:

>>> type('227')
<class ‘str’>

>>> type(int('227'))
<class ‘int’>

Q.42. How do you take input in Python?

For taking input from the user, we have the function input(). In Python 2, we had another function raw_input().

The input() function takes, as an argument, the text to be displayed for the task:

>>> a=input('Enter a number')
Enter a number7

But if you have paid attention, you know that it takes input in the form of a string.

>>> type(a)
<class ‘str’>

Multiplying this by 2 gives us this:

>>> a*=2
>>> a
’77’

So, what if we need to work on an integer instead?

We use the int() function for this.

>>> a=int(input('Enter a number'))
Enter a number7

Now when we multiply it by 2, we get this:

>>> a*=2
>>> a
14

Q.43. What is a function?

When we want to execute a sequence of statements, we can give it a name. Let’s define a function to take two numbers and return the greater number.

>>> def greater(a,b):
return a is a>b else b
>>> greater(3,3.5)
3.5

Q.44. What is recursion?

When a function makes a call to itself, it is termed recursion. But then, in order for it to avoid forming an infinite loop, we must have a base condition.

Let’s take an example.

>>> def facto(n):
if n==1: return 1
return n*facto(n-1)
>>> facto(4)
24

Q.45. What does the function zip() do?

One of the less common functions with beginners, zip() returns an iterator of tuples.

>>> list(zip(['a','b','c'],[1,2,3]))
[(‘a’, 1), (‘b’, 2), (‘c’, 3)]

Here, it pairs items from the two lists and creates tuples with those. But it doesn’t have to be lists.

>>> list(zip(('a','b','c'),(1,2,3)))
[(‘a’, 1), (‘b’, 2), (‘c’, 3)]

Q.46. How do you calculate the length of a string?

This is simple. We call the function len() on the string we want to calculate the length of.

>>> len('Ayushi Sharma')
13

Q.47. Explain Python List Comprehension.

The list comprehension in python is a way to declare a list in one line of code. Let’s take a look at one such example.

>>> [i for i in range(1,11,2)]
[1, 3, 5, 7, 9]

>>> [i*2 for i in range(1,11,2)]
[2, 6, 10, 14, 18]

Q.48. How do you get all values from a Python dictionary?

We saw previously, to get all keys from a dictionary, we make a call to the keys() method. Similarly, for values, we use the method values().

>>> 'd' in {'a':1,'b':2,'c':3,'d':4}.values()
False

>>> 4 in {'a':1,'b':2,'c':3,'d':4}.values()
True

Q.49. What if you want to toggle case for a Python string?

We have the swapcase() method from the str class to do just that.

>>> 'AyuShi'.swapcase()
‘aYUsHI’

Let’s apply some concepts now, shall we? Questions 50 through 52 assume the string ‘I love Python’. You need to do the needful.

Q.50. Write code to print only upto the letter t.

>>> i=0
>>> while s[i]!='t':
print(s[i],end=’’)
i+=1
I love Py

Q.51. Write code to print everything in the string except the spaces.

>>> for i in s:
if i==' ': continue
print(i,end='')
IlovePython

Q.52. Now, print this string five times in a row.

>>> for i in range(6):
print(s)
I love Python

I love Python

I love Python

I love Python

I love Python

I love Python

Okay, moving on to more domains to conquer.

Q.53. What is the purpose of bytes() in Python?

bytes() is a built-in function in Python that returns an immutable bytes object. Let’s take an example.

>>> bytes([2,4,8])
b’\x02\x04\x08′

>>> bytes(5)
b’\x00\x00\x00\x00\x00′

>>> bytes('world','utf-8')
b’world’

Q.54. What is a control flow statement?

A Python program usually starts to execute from the first line. From there, it moves through each statement just once and as soon as it’s done with the last statement, it transactions the program. However, sometimes, we may want to take a more twisted path through the code. Control flow statements let us disturb the normal execution flow of a program and bend it to our will.

Q.55. Create a new list to convert the following list of number strings to a list of numbers.

nums=[‘22’,’68’,’110’,’89’,’31’,’12’]

We will use the int() function with a list comprehension to convert these strings into integers and put them in a list.

>>> [int(i) for i in nums]
[22, 68, 110, 89, 31, 12]

Q.56. Given the first and last names of all employees in your firm, what data type will you use to store it?

I can use a dictionary to store that. It would be something like this-

{‘first_name’:’Ayushi’,’second_name’:’Sharma’

Top Python Interview Questions and Answers
Q.57.  How would you work with numbers other than those in the decimal number system?

With Python, it is possible to type numbers in binary, octal, and hexadecimal.

Binary numbers are made of 0 and 1. To type in binary, we use the prefix 0b or 0B.

>>> int(0b1010)
10

To convert a number into its binary form, we use bin().

>>> bin(0xf)
‘0b1111’

Octal numbers may have digits from 0 to 7. We use the prefix 0o or 0O.

>>> oct(8)
‘0o10’

Hexadecimal numbers may have digits from 0 to 15. We use the prefix 0x or 0X.

>>> hex(16)
‘0x10’

>>> hex(15)
‘0xf’

DataFlair’s latest article on Python Numbers with Examples

Q.58. What does the following code output?

>>> def extendList(val, list=[]):
list.append(val)
return list
>>> list1 = extendList(10)
>>> list2 = extendList(123,[])
>>> list3 = extendList('a')
>>> list1,list2,list3
([10, ‘a’], [123], [10, ‘a’])

You’d expect the output to be something like this:

([10],[123],[‘a’])

Well, this is because the list argument does not initialize to its default value ([]) every time we make a call to the function. Once we define the function, it creates a new list. Then, whenever we call it again without a list argument, it uses the same list. This is because it calculates the expressions in the default arguments when we define the function, not when we call it.

Q.59.  How many arguments can the range() function take?

The range() function in Python can take up to 3 arguments. Let’s see this one by one.

a. One argument

When we pass only one argument, it takes it as the stop value. Here, the start value is 0, and the step value is +1.

>>> list(range(5))
[0, 1, 2, 3, 4]

>>> list(range(-5))
[]

>>> list(range(0))
[]

b. Two arguments

When we pass two arguments, the first one is the start value, and the second is the stop value.

>>> list(range(2,7))
[2, 3, 4, 5, 6]

>>> list(range(7,2))
[]

>>> list(range(-3,4))
[-3, -2, -1, 0, 1, 2, 3]

c. Three arguments

Here, the first argument is the start value, the second is the stop value, and the third is the step value.

>>> list(range(2,9,2))
[2, 4, 6, 8]

>>> list(range(9,2,-1))
[9, 8, 7, 6, 5, 4, 3]

Q.60. What is PEP 8?

PEP 8 is a coding convention that lets us write more readable code. In other words, it is a set of recommendations.

Q.61. How is Python different from Java?

Python vs Java - Which is best for Beginners

Following is the comparison of Python vs Java –

Java is faster than Python
Python mandates indentation. Java needs braces.
Python is dynamically-typed; Java is statically typed.
Python is simple and concise; Java is verbose
Python is interpreted
Java is platform-independent
Java has stronger database-access with JDBC
Python vs Java, the most commonly asked python interview question for freshers.

Learn it in detail – Python vs Java for Interview

Q.62. What is the best code you can write to swap two numbers?

I can perform the swapping in one statement.

>>> a,b=b,a
Here’s the entire code, though-

>>> a,b=2,3
>>> a,b=b,a
>>> a,b
(3, 2)

Q.63. How can you declare multiple assignments in one statement?

This is one of the most asked interview questions for Python freshers –

There are two ways to do this:

First – 

>>> a,b,c=3,4,5 #This assigns 3, 4, and 5 to a, b, and c respectively
Second – 

>>> a=b=c=3 #This assigns 3 to a, b, and c
Q.64. If you are ever stuck in an infinite loop, how will you break out of it?

For this, we press Ctrl+C. This interrupts the execution. Let’s create an infinite loop to demonstrate this.

>>> def counterfunc(n):
while(n==7):print(n)
>>> counterfunc(7)
7

7

7

7

7

7

7

7

7

7

7

7

7

7

7

7

7

Traceback (most recent call last):

File “<pyshell#332>”, line 1, in <module>

counterfunc(7)

File “<pyshell#331>”, line 2, in counterfunc

while(n==7):print(n)

KeyboardInterrupt

Technical Python Interview Questions and Answers
Q.65. How do we execute Python?

Python files first compile to bytecode. Then, the host executes them.

Revise the concept of Python Compiler

Q.66. Explain Python’s parameter-passing mechanism.

To pass its parameters to a function, Python uses pass-by-reference. If you change a parameter within a function, the change reflects in the calling function. This is its default behavior. However, when we pass literal arguments like strings, numbers, or tuples, they pass by value. This is because they are immutable.

Q.67. What is the with statement in Python?

The with statement in Python ensures that cleanup code is executed when working with unmanaged resources by encapsulating common preparation and cleanup tasks. It may be used to open a file, do something, and then automatically close the file at the end. It may be used to open a database connection, do some processing, then automatically close the connection to ensure resources are closed and available for others. with will cleanup the resources even if an exception is thrown. This statement is like the using statement in C#.
Consider you put some code in a try block, then in the finally block, you close any resources used. The with statement is like syntactic sugar for that.

The syntax of this control-flow structure is:

with expression [as variable]:
….with-block

>>> with open('data.txt') as data:
#processing statements
Q.68. How is a .pyc file different from a .py file?

While both files hold bytecode, .pyc is the compiled version of a Python file. It has platform-independent bytecode. Hence, we can execute it on any platform that supports the .pyc format. Python automatically generates it to improve performance(in terms of load time, not speed).

Python OOPS Interview Questions and Answers
Q.69. What makes Python object-oriented?

Again the frequently asked Python Interview Question

Python is object-oriented because it follows the Object-Oriented programming paradigm. This is a paradigm that revolves around classes and their instances (objects). With this kind of programming, we have the following features:

Encapsulation
Abstraction
Inheritance
Polymorphism
Data hiding
Q.70. How many types of objects does Python support?

Objects in Python are mutable and immutable. Let’s talk about these.

Immutable objects- Those which do not let us modify their contents. Examples of these will be tuples, booleans, strings, integers, floats, and complexes. Iterations on such objects are faster.

>>> tuple=(1,2,4)
>>> tuple
(1, 2, 4)

>>> 2+4j
(2+4j)

Mutable objects – Those that let you modify their contents. Examples of these are lists, sets, and dicts. Iterations on such objects are slower.

>>> [2,4,9]
[2, 4, 9]

>>> dict1={1:1,2:2}
>>> dict1
{1: 1, 2: 2}

While two equal immutable objects’ reference variables share the same address, it is possible to create two mutable objects with the same content.

Open-ended Python Interview Questions
Q.71 Why do you want to work for this company?

Q.72 Where do you see yourself in 10 years?

Q.73 What will you bring to the table if we hire you?

Q.74 Tell me about your best personal project. What challenges did you face, and how did it change the way you work?

Q.75 Would you have a problem with menial tasks?

Q.76 What makes you like Python over other languages? (The most commonly asked Python interview questions)

So, these were some of the important Python Interview Questions and Answers. 
If you practiced all the above questions then you are ready to move towards the next part of DataFlair’s Python Interview Questions and Answers Series – Part 2 for Python Interviews. 
I advise you not to miss a single part of this series. 

All these questions are specifically designed by experienced individuals to provide you with complete help for cracking your next interview.



















Q-1: What Is Python, What Are The Benefits Of Using It, And What Do You Understand Of PEP 8?
Python is one of the most successful interpreted languages. When you write a Python script, it doesn’t need to get compiled before execution. Few other interpreted languages are PHP and Javascript.

Benefits Of Python Programming
Python is a dynamic-typed language. It means that you don’t need to mention the data type of variables during their declaration. It allows to set variables like var1=101 and var2 =” You are an engineer.” without any error.
Python supports object orientated programming as you can define classes along with the composition and inheritance. It doesn’t use access specifiers like public or private).
Functions in Python are like first-class objects. It suggests you can assign them to variables, return from other methods and pass as arguments.
Developing using Python is quick but running it is often slower than compiled languages. Luckily, Python enables to include the “C” language extensions so you can optimize your scripts.
Python has several usages like web-based applications, test automation, data modeling, big data analytics and much more. Alternatively, you can utilize it as a “glue” layer to work with other languages.
PEP 8.
PEP 8 is the latest Python coding standard, a set of coding recommendations. It guides to deliver more readable Python code.

Q-2: What Is The Output Of The Following Python Code Fragment? Justify Your Answer.
def extendList(val, list=[]):
    list.append(val)
    return list

list1 = extendList(10)
list2 = extendList(123,[])
list3 = extendList('a')

print "list1 = %s" % list1
print "list2 = %s" % list2
print "list3 = %s" % list3
The result of the above Python code snippet is:

list1 = [10, 'a']
list2 = [123]
list3 = [10, 'a']
You may erroneously expect list1 to be equal to [10] and list3 to match with [‘a’], thinking that the list argument will initialize to its default value of [] every time there is a call to the extendList.

However, the flow is like that a new list gets created once after the function is defined. And the same get used whenever someone calls the extendList method without a list argument. It works like this because the calculation of expressions (in default arguments) occurs at the time of function definition, not during its invocation.

The list1 and list3 are hence operating on the same default list, whereas list2 is running on a separate object that it has created on its own (by passing an empty list as the value of the list parameter).

The definition of the extendList function can get changed in the following manner.

def extendList(val, list=None):
  if list is None:
    list = []
  list.append(val)
  return list
With this revised implementation, the output would be:

list1 = [10]
list2 = [123]
list3 = ['a']
Q-3: What Is The Statement That Can Be Used In Python If The Program Requires No Action But Requires It Syntactically?
The pass statement is a null operation. Nothing happens when it executes. You should use “pass” keyword in lowercase. If you write “Pass,” you’ll face an error like “NameError: name Pass is not defined.” Python statements are case sensitive.

letter = "hai sethuraman"
for i in letter:
    if i == "a":
        pass
        print("pass statement is execute ..............")
    else:
        print(i)
Q-4: What’s The Process To Get The Home Directory Using ‘~’ In Python?
You need to import the os module, and then just a single line would do the rest.

import os
print (os.path.expanduser('~'))
Output:

/home/runner
Q-5: What Are The Built-In Types Available In Python?
Here is the list of most commonly used built-in types that Python supports:

Immutable built-in datatypes of Python
Numbers
Strings
Tuples
Mutable built-in datatypes of Python
List
Dictionaries
Sets
Q-6: How To Find Bugs Or Perform Static Analysis In A Python Application?
You can use PyChecker, which is a static analyzer. It identifies the bugs in Python project and also reveals the style and complexity related bugs.
Another tool is Pylint, which checks whether the Python module satisfies the coding standard.
Q-7: When Is The Python Decorator Used?
Python decorator is a relative change that you do in Python syntax to adjust the functions quickly.

Q-8: What Is The Principal Difference Between A List And The Tuple?
List Vs. Tuple.
The principal difference between a list and the tuple is that the former is mutable while the tuple is not.

A tuple is allowed to be hashed, for example, using it as a key for dictionaries.

Q-9: How Does Python Handle Memory Management?
Python uses private heaps to maintain its memory. So the heap holds all the Python objects and the data structures. This area is only accessible to the Python interpreter; programmers can’t use it.
And it’s the Python memory manager that handles the Private heap. It does the required allocation of the memory for Python objects.
Python employs a built-in garbage collector, which salvages all the unused memory and offloads it to the heap space.
Q-10: What Are The Principal Differences Between The Lambda And Def?
Lambda Vs. Def.
Def can hold multiple expressions while lambda is a uni-expression function.
Def generates a function and designates a name to call it later. Lambda forms a function object and returns it.
Def can have a return statement. Lambda can’t have return statements.
Lambda supports to get used inside a list and dictionary.
💡 Also Check.

Python Programming Quiz for Beginners

Q-11: Write A Reg Expression That Confirms An Email Id Using The Python Reg Expression Module “Re”?
Python has a regular expression module “re.”

Check out the “re” expression that can check the email id for .com and .co.in subdomain.

import re
print(re.search(r"[0-9a-zA-Z.]+@[a-zA-Z]+\.(com|co\.in)$","micheal.pages@mp.com"))
Q-12: What Do You Think Is The Output Of The Following Code Fragment? Is There Any Error In The Code?
list = ['a', 'b', 'c', 'd', 'e']
print (list[10:])
The result of the above lines of code is []. There won’t be any error like an IndexError.

You should know that trying to fetch a member from the list using an index that exceeds the member count (for example, attempting to access list[10] as given in the question) would yield an IndexError. By the way, retrieving only a slice at the starting index that surpasses the no. of items in the list won’t result in an IndexError. It will just return an empty list.

Q-13: Is There A Switch Or Case Statement In Python? If Not Then What Is The Reason For The Same?
No, Python does not have a Switch statement, but you can write a Switch function and then use it.

Q-14: What Is A Built-In Function That Python Uses To Iterate Over A Number Sequence?
Range() generates a list of numbers, which is used to iterate over for loops.

for i in range(5):
    print(i)
The range() function accompanies two sets of parameters.

range(stop)
stop: It is the no. of integers to generate and starts from zero. eg. range(3) == [0, 1, 2].
range([start], stop[, step])
Start: It is the starting no. of the sequence.
Stop: It specifies the upper limit of the sequence.
Step: It is the incrementing factor for generating the sequence.
Points to note:
Only integer arguments are allowed.
Parameters can be positive or negative.
The range() function in Python starts from the zeroth index.
Q-15: What Are The Optional Statements Possible Inside A Try-Except Block In Python?
There are two optional clauses you can use in the try-except block.

The “else” clause
It is useful if you want to run a piece of code when the try block doesn’t create an exception.
The “finally” clause
It is useful when you want to execute some steps which run, irrespective of whether there occurs an exception or not.
Q-16: What Is A String In Python?
A string in Python is a sequence of alpha-numeric characters. They are immutable objects. It means that they don’t allow modification once they get assigned a value. Python provides several methods, such as join(), replace(), or split() to alter strings. But none of these change the original object.

Q-17: What Is Slicing In Python?
Slicing is a string operation for extracting a part of the string, or some part of a list. In Python, a string (say text) begins at index 0, and the nth character stores at position text[n-1]. Python can also perform reverse indexing, i.e., in the backward direction, with the help of negative numbers. In Python, the slice() is also a constructor function which generates a slice object. The result is a set of indices mentioned by range(start, stop, step). The slice() method allows three parameters. 1. start – starting number for the slicing to begin. 2. stop – the number which indicates the end of slicing. 3. step – the value to increment after each index (default = 1).

Q-18: What Is %S In Python?
Python has support for formatting any value into a string. It may contain quite complex expressions.

One of the common usages is to push values into a string with the %s format specifier. The formatting operation in Python has the comparable syntax as the C function printf() has.

Q-19: Is A String Immutable Or Mutable In Python?
Python strings are indeed immutable.

Let’s take an example. We have an “str” variable holding a string value. We can’t mutate the container, i.e., the string, but can modify what it contains that means the value of the variable.

Q-20: What Is The Index In Python?
An index is an integer data type which denotes a position within an ordered list or a string.

In Python, strings are also lists of characters. We can access them using the index which begins from zero and goes to the length minus one.

For example, in the string “Program,” the indexing happens like this:

Program 0 1 2 3 4 5
Q-21: What Is Docstring In Python?
A docstring is a unique text that happens to be the first statement in the following Python constructs:

Module, Function, Class, or Method definition.

A docstring gets added to the __doc__ attribute of the string object.

Now, read some of the Python interview questions on functions.

Q-22: What Is A Function In Python Programming?
A function is an object which represents a block of code and is a reusable entity. It brings modularity to a program and a higher degree of code reusability.

Python has given us many built-in functions such as print() and provides the ability to create user-defined functions.

Q-23: How Many Basic Types Of Functions Are Available In Python?
Python gives us two basic types of functions.

1. Built-in, and

2. User-defined.

The built-in functions happen to be part of the Python language. Some of these are print(), dir(), len(), and abs() etc.

Q-24: How Do We Write A Function In Python?
We can create a Python function in the following manner.

Step-1: to begin the function, start writing with the keyword def and then mention the function name.

Step-2: We can now pass the arguments and enclose them using the parentheses. A colon, in the end, marks the end of the function header.

Step-3: After pressing an enter, we can add the desired Python statements for execution.

Q-25: What Is A Function Call Or A Callable Object In Python?
A function in Python gets treated as a callable object. It can allow some arguments and also return a value or multiple values in the form of a tuple. Apart from the function, Python has other constructs, such as classes or the class instances which fits in the same category.

Q-26: What Is The Return Keyword Used For In Python?
The purpose of a function is to receive the inputs and return some output.

The return is a Python statement which we can use in a function for sending a value back to its caller.

Q-27: What Is “Call By Value” In Python?
In call-by-value, the argument whether an expression or a value gets bound to the respective variable in the function.

Python will treat that variable as local in the function-level scope. Any changes made to that variable will remain local and will not reflect outside the function.

Q-28: What Is “Call By Reference” In Python?
We use both “call-by-reference” and “pass-by-reference” interchangeably. When we pass an argument by reference, then it is available as an implicit reference to the function, rather than a simple copy. In such a case, any modification to the argument will also be visible to the caller.

This scheme also has the advantage of bringing more time and space efficiency because it leaves the need for creating local copies.

On the contrary, the disadvantage could be that a variable can get changed accidentally during a function call. Hence, the programmers need to handle in the code to avoid such uncertainty.

Q-29: What Is The Return Value Of The Trunc() Function?
The Python trunc() function performs a mathematical operation to remove the decimal values from a particular expression and provides an integer value as its output.

Q-30: Is It Mandatory For A Python Function To Return A Value?
It is not at all necessary for a function to return any value. However, if needed, we can use None as a return value.

Q-31: What Does The Continue Do In Python?
The continue is a jump statement in Python which moves the control to execute the next iteration in a loop leaving all the remaining instructions in the block unexecuted.

The continue statement is applicable for both the “while” and “for” loops.

Q-32: What Is The Purpose Of Id() Function In Python?
The id() is one of the built-in functions in Python.

Signature: id(object)
It accepts one parameter and returns a unique identifier associated with the input object.

Q-33: What Does The *Args Do In Python?
We use *args as a parameter in the function header. It gives us the ability to pass N (variable) number of arguments.

Please note that this type of argument syntax doesn’t allow passing a named argument to the function.

Example of using the *args:

# Python code to demonstrate 
# *args for dynamic arguments 
def fn(*argList):  
    for argx in argList:  
        print (argx) 
    
fn('I', 'am', 'Learning', 'Python')
The output:

I
am
Learning
Python
Q-34: What Does The **Kwargs Do In Python?
We can also use the **kwargs syntax in a Python function declaration. It let us pass N (variable) number of arguments which can be named or keyworded.

Example of using the **kwargs:

# Python code to demonstrate 
# **kwargs for dynamic + named arguments 
def fn(**kwargs):  
    for emp, age in kwargs.items(): 
        print ("%s's age is %s." %(emp, age)) 
    
fn(John=25, Kalley=22, Tom=32)
The output:

John's age is 25.
Kalley's age is 22.
Tom's age is 32.
Q-35: Does Python Have A Main() Method?
The main() is the entry point function which happens to be called first in most programming languages.

Since Python is interpreter-based, so it sequentially executes the lines of the code one-by-one.

Python also does have a Main() method. But it gets executed whenever we run our Python script either by directly clicking it or starts it from the command line.

We can also override the Python default main() function using the Python if statement. Please see the below code.

print("Welcome")
print("__name__ contains: ", __name__)
def main():
    print("Testing the main function")
if __name__ == '__main__':
    main()
The output:

Welcome
__name__ contains:  __main__
Testing the main function
Q-36: What Does The __ Name __ Do In Python?
The __name__ is a unique variable. Since Python doesn’t expose the main() function, so when its interpreter gets to run the script, it first executes the code which is at level 0 indentation.

To see whether the main() gets called, we can use the __name__ variable in an if clause compares with the value “__main__.”

Q-37: What Is The Purpose Of “End” In Python?
Python’s print() function always prints a newline in the end. The print() function accepts an optional parameter known as the ‘end.’ Its value is ‘\n’ by default. We can change the end character in a print statement with the value of our choice using this parameter.

# Example: Print a  instead of the new line in the end.
print("Let's learn" , end = ' ')  
print("Python") 

# Printing a dot in the end.
print("Learn to code from techbeamers" , end = '.')  
print("com", end = ' ')
The output is:

Let's learn Python
Learn to code from techbeamers.com
Q-38: When Should You Use The “Break” In Python?
Python provides a break statement to exit from a loop. Whenever the break hits in the code, the control of the program immediately exits from the body of the loop.

The break statement in a nested loop causes the control to exit from the inner iterative block.

Q-39: What Is The Difference Between Pass And Continue In Python?
The continue statement makes the loop to resume from the next iteration.

On the contrary, the pass statement instructs to do nothing, and the remainder of the code executes as usual.

Q-40: What Does The Len() Function Do In Python?
In Python, the len() is a primary string function. It determines the length of an input string.

>>> some_string = 'techbeamers'
>>> len(some_string)
11
Q-41: What Does The Chr() Function Do In Python?
The chr() function got re-added in Python 3.2. In version 3.0, it got removed.

It returns the string denoting a character whose Unicode code point is an integer.

For example, the chr(122) returns the string ‘z’ whereas the chr(1212) returns the string ‘Ҽ’.

Q-42: What Does The Ord() Function Do In Python?
The ord(char) in Python takes a string of size one and returns an integer denoting the Unicode code format of the character in case of a Unicode type object, or the value of the byte if the argument is of 8-bit string type.

>>> ord("z")
122
Q-43: What Is Rstrip() In Python?
Python provides the rstrip() method which duplicates the string but leaves out the whitespace characters from the end.

The rstrip() escapes the characters from the right end based on the argument value, i.e., a string mentioning the group of characters to get excluded.

The signature of the rstrip() is:

str.rstrip([char sequence/pre>
#Example
test_str = 'Programming    '
# The trailing whitespaces are excluded
print(test_str.rstrip())
Q-44: What Is Whitespace In Python?
Whitespace represents the characters that we use for spacing and separation.

They possess an “empty” representation. In Python, it could be a tab or space.

Q-45: What Is Isalpha() In Python?
Python provides this built-in isalpha() function for the string handling purpose.

It returns True if all characters in the string are of alphabet type, else it returns False.

Q-46: How Do You Use The Split() Function In Python?
Python’s split() function works on strings to cut a large piece into smaller chunks, or sub-strings. We can specify a separator to start splitting, or it uses the space as one by default.

#Example
str = 'pdf csv json'
print(str.split(" "))
print(str.split())
The output:

['pdf', 'csv', 'json']
['pdf', 'csv', 'json']
Q-47: What Does The Join Method Do In Python?
Python provides the join() method which works on strings, lists, and tuples. It combines them and returns a united value.

Q-48: What Does The Title() Method Do In Python?
Python provides the title() method to convert the first letter in each word to capital format while the rest turns to Lowercase.

#Example
str = 'lEaRn pYtHoN'
print(str.title())
The output:

Learn Python
Now, check out some general purpose Python interview questions.

Q-49: What Makes The CPython Different From Python?
CPython has its core developed in C. The prefix ‘C’ represents this fact. It runs an interpreter loop used for translating the Python-ish code to C language.

Q-50: Which Package Is The Fastest Form Of Python?
PyPy provides maximum compatibility while utilizing CPython implementation for improving its performance.

The tests confirmed that PyPy is nearly five times faster than the CPython. It currently supports Python 2.7.

Q-51: What Is GIL In Python Language?
Python supports GIL (the global interpreter lock) which is a mutex used to secure access to Python objects, synchronizing multiple threads from running the Python bytecodes at the same time.

Q-52: How Is Python Thread Safe?
Python ensures safe access to threads. It uses the GIL mutex to set synchronization. If a thread loses the GIL lock at any time, then you have to make the code thread-safe.

For example, many of the Python operations execute as atomic such as calling the sort() method on a list.

Q-53: How Does Python Manage The Memory?
Python implements a heap manager internally which holds all of its objects and data structures.

This heap manager does the allocation/de-allocation of heap space for objects.

Q-54: What Is A Tuple In Python?
A tuple is a collection type data structure in Python which is immutable.

They are similar to sequences, just like the lists. However, There are some differences between a tuple and list; the former doesn’t allow modifications whereas the list does.

Also, the tuples use parentheses for enclosing, but the lists have square brackets in their syntax.

Q-55: What Is A Dictionary In Python Programming?
A dictionary is a data structure known as an associative array in Python which stores a collection of objects.

The collection is a set of keys having a single associated value. We can call it a hash, a map, or a hashmap as it gets called in other programming languages.

Q-56: What Is The Set Object In Python?
Sets are unordered collection objects in Python. They store unique and immutable objects. Python has its implementation derived from mathematics.

Q-57: What Is The Use Of The Dictionary In Python?
A dictionary has a group of objects (the keys) map to another group of objects (the values). A Python dictionary represents a mapping of unique Keys to Values.

They are mutable and hence will not change. The values associated with the keys can be of any Python types.

Q-58: Is Python List A Linked List?
A Python list is a variable-length array which is different from C-style linked lists.

Internally, it has a contiguous array for referencing to other objects and stores a pointer to the array variable and its length in the list head structure.

Here are some Python interview questions on classes and objects.

Q-59: What Is Class In Python?
Python supports object-oriented programming and provides almost all OOP features to use in programs.

A Python class is a blueprint for creating the objects. It defines member variables and gets their behavior associated with them.

We can make it by using the keyword “class.” An object gets created from the constructor. This object represents the instance of the class.

In Python, we generate classes and instances in the following way.

>>>class Human:  # Create the class
...     pass
>>>man = Human()  # Create the instance
>>>print(man)
<__main__.Human object at 0x0000000003559E10>
Q-60: What Are Attributes And Methods In A Python Class?
A class is useless if it has not defined any functionality. We can do so by adding attributes. They work as containers for data and functions. We can add an attribute directly specifying inside the class body.

>>> class Human:
...     profession = "programmer" # specify the attribute 'profession' of the class
>>> man = Human()
>>> print(man.profession)
programmer
After we added the attributes, we can go on to define the functions. Generally, we call them methods. In the method signature, we always have to provide the first argument with a self-keyword.

>>> class Human:
    profession = "programmer"
    def set_profession(self, new_profession):
        self.profession = new_profession      
>>> man = Human()
>>> man.set_profession("Manager")
>>> print(man.profession)
Manager
Q-61: How To Assign Values For The Class Attributes At Runtime?
We can specify the values for the attributes at runtime. We need to add an init method and pass input to object constructor. See the following example demonstrating this.

>>> class Human:
    def __init__(self, profession):
        self.profession = profession
    def set_profession(self, new_profession):
        self.profession = new_profession

>>> man = Human("Manager")
>>> print(man.profession)
Manager
Q-62: What Is Inheritance In Python Programming?
Inheritance is an OOP mechanism which allows an object to access its parent class features. It carries forward the base class functionality to the child.

Python Interview Questions - Inheritance

We do it intentionally to abstract away the similar code in different classes.

The common code rests with the base class, and the child class objects can access it via inheritance. Check out the below example.

class PC: # Base class
    processor = "Xeon" # Common attribute
    def set_processor(self, new_processor):
        processor = new_processor

class Desktop(PC): # Derived class
    os = "Mac OS High Sierra" # Personalized attribute
    ram = "32 GB"

class Laptop(PC): # Derived class
    os = "Windows 10 Pro 64" # Personalized attribute
    ram = "16 GB"

desk = Desktop()
print(desk.processor, desk.os, desk.ram)

lap = Laptop()
print(lap.processor, lap.os, lap.ram)
The output:

Xeon Mac OS High Sierra 32 GB
Xeon Windows 10 Pro 64 16 GB
Q-63: What Is Composition In Python?
The composition is also a type of inheritance in Python. It intends to inherit from the base class but a little differently, i.e., by using an instance variable of the base class acting as a member of the derived class.

See the below diagram.

Python Interview Questions - Composition

To demonstrate composition, we need to instantiate other objects in the class and then make use of those instances.

class PC: # Base class
    processor = "Xeon" # Common attribute
    def __init__(self, processor, ram):
        self.processor = processor
        self.ram = ram

    def set_processor(self, new_processor):
        processor = new_processor

    def get_PC(self):
        return "%s cpu & %s ram" % (self.processor, self.ram)

class Tablet():
    make = "Intel"
    def __init__(self, processor, ram, make):
        self.PC = PC(processor, ram) # Composition
        self.make = make

    def get_Tablet(self):
        return "Tablet with %s CPU & %s ram by %s" % (self.PC.processor, self.PC.ram, self.make)

if __name__ == "__main__":
    tab = Tablet("i7", "16 GB", "Intel")
    print(tab.get_Tablet())
The output is:

Tablet with i7 CPU & 16 GB ram by Intel
Q-64: What Are Errors And Exceptions In Python Programs?
Errors are coding issues in a program which may cause it to exit abnormally.

On the contrary, exceptions happen due to the occurrence of an external event which interrupts the normal flow of the program.

Q-65: How Do You Handle Exceptions With Try/Except/Finally In Python?
Python lay down Try, Except, Finally constructs to handle errors as well as Exceptions. We enclose the unsafe code indented under the try block. And we can keep our fall-back code inside the except block. Any instructions intended for execution last should come under the finally block.

try:
    print("Executing code in the try block")
    print(exception)
except:
    print("Entering in the except block")
finally:
    print("Reached to the final block")
The output is:

Executing code in the try block
Entering in the except block
Reached to the final block
Q-66: How Do You Raise Exceptions For A Predefined Condition In Python?
We can raise an exception based on some condition.

For example, if we want the user to enter only odd numbers, else will raise an exception.

# Example - Raise an exception
while True:
    try:
        value = int(input("Enter an odd number- "))
        if value%2 == 0:
            raise ValueError("Exited due to invalid input!!!")
        else:
            print("Value entered is : %s" % value)
    except ValueError as ex:
        print(ex)
        break
The output is:

Enter an odd number- 2
Exited due to invalid input!!!
Enter an odd number- 1
Value entered is : 1
Enter an odd number-
Q-67: What Are Python Iterators?
Iterators in Python are array-like objects which allow moving on the next element. We use them in traversing a loop, for example, in a “for” loop.

Python library has a no. of iterators. For example, a list is also an iterator and we can start a for loop over it.

Q-68: What Is The Difference Between An Iterator And Iterable?
The collection type like a list, tuple, dictionary, and set are all iterable objects whereas they are also iterable containers which return an iterator while traversing.

Here are some advanced-level Python interview questions.

Q-69: What Are Python Generators?
A Generator is a kind of function which lets us specify a function that acts like an iterator and hence can get used in a “for” loop.

In a generator function, the yield keyword substitutes the return statement.

# Simple Python function
def fn():
    return "Simple Python function."

# Python Generator function
def generate():
    yield "Python Generator function."

print(next(generate()))
The output is:

Python Generator function.
Q-70: What Are Closures In Python?
Python closures are function objects returned by another function. We use them to eliminate code redundancy.

In the example below, we’ve written a simple closure for multiplying numbers.

def multiply_number(num):
    def product(number):
        'product() here is a closure'
        return num * number
    return product

num_2 = multiply_number(2)
print(num_2(11))
print(num_2(24))

num_6 = multiply_number(6)
print(num_6(1))
The output is:

22
48
6
Q-71: What Are Decorators In Python?
Python decorator gives us the ability to add new behavior to the given objects dynamically. In the example below, we’ve written a simple example to display a message pre and post the execution of a function.

def decorator_sample(func):
    def decorator_hook(*args, **kwargs):
        print("Before the function call")
        result = func(*args, **kwargs)
        print("After the function call")
        return result
    return decorator_hook

@decorator_sample
def product(x, y):
    "Function to multiply two numbers."
    return x * y

print(product(3, 3))
The output is:

Before the function call
After the function call
9
Q-72: How Do You Create A Dictionary In Python?
Let’s take the example of building site statistics. For this, we first need to break up the key-value pairs using a colon(“:”). The keys should be of an immutable type, i.e., so we’ll use the data-types which don’t allow changes at runtime. We’ll choose from an int, string, or tuple.

However, we can take values of any kind. For distinguishing the data pairs, we can use a comma(“,”) and keep the whole stuff inside curly braces({…}).

>>> site_stats = {'site': 'tecbeamers.com', 'traffic': 10000, "type": "organic"}
>>> type(site_stats)
<class 'dict'>
>>> print(site_stats)
{'type': 'organic', 'site': 'tecbeamers.com', 'traffic': 10000}
Q-73: How Do You Read From A Dictionary In Python?
To fetch data from a dictionary, we can directly access using the keys. We can enclose a “key” using brackets […] after mentioning the variable name corresponding to the dictionary.

>>> site_stats = {'site': 'tecbeamers.com', 'traffic': 10000, "type": "organic"}
>>> print(site_stats["traffic"])
We can even call the get method to fetch the values from a dict. It also let us set a default value. If the key is missing, then the KeyError would occur.

>>> site_stats = {'site': 'tecbeamers.com', 'traffic': 10000, "type": "organic"}
>>> print(site_stats.get('site'))
tecbeamers.com
Q-74: How Do You Traverse Through A Dictionary Object In Python?
We can use the “for” and “in” loop for traversing the dictionary object.

>>> site_stats = {'site': 'tecbeamers.com', 'traffic': 10000, "type": "organic"}
>>> for k, v in site_stats.items():
    print("The key is: %s" % k)
    print("The value is: %s" % v)
    print("++++++++++++++++++++++++")
The output is:

The key is: type
The value is: organic
++++++++++++++++++++++++
The key is: site
The value is: tecbeamers.com
++++++++++++++++++++++++
The key is: traffic
The value is: 10000
++++++++++++++++++++++++
Q-75: How Do You Add Elements To A Dictionary In Python?
We can add elements by modifying the dictionary with a fresh key and then set the value to it.

>>> # Setup a blank dictionary
>>> site_stats = {}
>>> site_stats['site'] = 'google.com'
>>> site_stats['traffic'] = 10000000000
>>> site_stats['type'] = 'Referral'
>>> print(site_stats)
{'type': 'Referral', 'site': 'google.com', 'traffic': 10000000000}
We can even join two dictionaries to get a bigger dictionary with the help of the update() method.

>>> site_stats['site'] = 'google.co.in'
>>> print(site_stats)
{'site': 'google.co.in'}
>>> site_stats_new = {'traffic': 1000000, "type": "social media"}
>>> site_stats.update(site_stats_new)
>>> print(site_stats)
{'type': 'social media', 'site': 'google.co.in', 'traffic': 1000000}
Q-76: How Do You Delete Elements Of A Dictionary In Python?
We can delete a key in a dictionary by using the del() method.

>>> site_stats = {'site': 'tecbeamers.com', 'traffic': 10000, "type": "organic"}
>>> del site_stats["type"]
>>> print(site_stats)
{'site': 'google.co.in', 'traffic': 1000000}
Another method, we can use is the pop() function. It accepts the key as the parameter. Also, a second parameter, we can pass a default value if the key doesn’t exist.

>>> site_stats = {'site': 'tecbeamers.com', 'traffic': 10000, "type": "organic"}
>>> print(site_stats.pop("type", None))
organic
>>> print(site_stats)
{'site': 'tecbeamers.com', 'traffic': 10000}
Q-77: How Do You Check The Presence Of A Key In A Dictionary?
We can use Python’s “in” operator to test the presence of a key inside a dict object.

>>> site_stats = {'site': 'tecbeamers.com', 'traffic': 10000, "type": "organic"}
>>> 'site' in site_stats
True
>>> 'traffic' in site_stats
True
>>> "type" in site_stats
True
Earlier, Python also provided the has_key() method which got deprecated.

Q-78: What Is The Syntax For List Comprehension In Python?
The signature for the list comprehension is as follows:

[ expression(var) for var in iterable ]
For example, the below code will return all the numbers from 10 to 20 and store them in a list.

>>> alist = [var for var in range(10, 20)]
>>> print(alist)
Q-79: What Is The Syntax For Dictionary Comprehension In Python?
A dictionary has the same syntax as was for the list comprehension but the difference is that it uses curly braces:

{ aKey, itsValue for aKey in iterable }
For example, the below code will return all the numbers 10 to 20 as the keys and will store the respective squares of those numbers as the values.

>>> adict = {var:var**2 for var in range(10, 20)}
>>> print(adict)
Q-80: What Is The Syntax For Generator Expression In Python?
The syntax for generator expression matches with the list comprehension, but the difference is that it uses parenthesis:

( expression(var) for var in iterable )
For example, the below code will create a generator object that generates the values from 10 to 20 upon using it.

>>> (var for var in range(10, 20))
 at 0x0000000003668728>
>>> list((var for var in range(10, 20)))
Now, see more Python interview questions for practice.

Q-81: How Do You Write A Conditional Expression In Python?
We can utilize the following single statement as a conditional expression. default_statment if Condition else another_statement

>>> no_of_days = 366
>>> is_leap_year = "Yes" if no_of_days == 366 else "No"
>>> print(is_leap_year)
Yes
Q-82: What Do You Know About The Python Enumerate?
While using the iterators, sometimes we might have a use case to store the count of iterations. Python gets this task quite easy for us by giving a built-in method known as the enumerate().

The enumerate() function attaches a counter variable to an iterable and returns it as the “enumerated” object.

We can use this object directly in the “for” loops or transform it into a list of tuples by calling the list() method. It has the following signature:

enumerate(iterable, to_begin=0)
Arguments:
iterable: array type object which enables iteration
to_begin: the base index for the counter is to get started, its default value is 0
# Example - enumerate function 
alist = ["apple","mango", "orange"] 
astr = "banana"
  
# Let's set the enumerate objects 
list_obj = enumerate(alist) 
str_obj = enumerate(astr) 
  
print("list_obj type:", type(list_obj))
print("str_obj type:", type(str_obj))

print(list(enumerate(alist)) )  
# Move the starting index to two from zero
print(list(enumerate(astr, 2)))
The output is:

list_obj type: <class 'enumerate'>
str_obj type: <class 'enumerate'>
[(0, 'apple'), (1, 'mango'), (2, 'orange')]
[(2, 'b'), (3, 'a'), (4, 'n'), (5, 'a'), (6, 'n'), (7, 'a')]
Q-83: What Is The Use Of Globals() Function In Python?
The globals() function in Python returns the current global symbol table as a dictionary object.

Python maintains a symbol table to keep all necessary information about a program. This info includes the names of variables, methods, and classes used by the program.

All the information in this table remains in the global scope of the program and Python allows us to retrieve it using the globals() method.

Signature: globals()

Arguments: None
# Example: globals() function 
x = 9
def fn(): 
    y = 3
    z = y + x
    # Calling the globals() method
    z = globals()['x'] = z
    return z
       
# Test Code     
ret = fn() 
print(ret)
The output is:

12
Q-84: Why Do You Use The Zip() Method In Python?
The zip method lets us map the corresponding index of multiple containers so that we can use them using as a single unit.

Signature: 
 zip(*iterators)
Arguments: 
 Python iterables or collections (e.g., list, string, etc.)
Returns: 
 A single iterator object with combined mapped values
# Example: zip() function
  
emp = [ "tom", "john", "jerry", "jake" ] 
age = [ 32, 28, 33, 44 ] 
dept = [ 'HR', 'Accounts', 'R&D', 'IT' ] 
  
# call zip() to map values 
out = zip(emp, age, dept)
  
# convert all values for printing them as set 
out = set(out) 
  
# Displaying the final values  
print ("The output of zip() is : ",end="") 
print (out)
The output is:

The output of zip() is : {('jerry', 33, 'R&D'), ('jake', 44, 'IT'), ('john', 28, 'Accounts'), ('tom', 32, 'HR')}
Q-85: What Are Class Or Static Variables In Python Programming?
In Python, all the objects share common class or static variables.

But the instance or non-static variables are altogether different for different objects.

The programming languages like C++ and Java need to use the static keyword to make a variable as the class variable. However, Python has a unique way to declare a static variable.

All names initialized with a value in the class declaration becomes the class variables. And those which get assigned values in the class methods becomes the instance variables.

# Example 
class Test: 
    aclass = 'programming' # A class variable 
    def __init__(self, ainst): 
        self.ainst = ainst # An instance variable 
  
# Objects of CSStudent class 
test1 = Test(1) 
test2 = Test(2) 
  
print(test1.aclass)
print(test2.aclass)
print(test1.ainst)
print(test2.ainst)

# A class variable is also accessible using the class name
print(Test.aclass)
The output is:

programming
programming
1
2
programming
Let’s now answer some advanced-level Python interview questions.

Q-86: How Does The Ternary Operator Work In Python?
The ternary operator is an alternative for the conditional statements. It combines true or false values with a statement that you need to test.

The syntax would look like the one given below.

[onTrue] if [Condition] else [onFalse]

x, y = 35, 75
smaller = x if x < y else y
print(smaller)
Q-87: What Does The “Self” Keyword Do?
The self is a Python keyword which represents a variable that holds the instance of an object.

In almost, all the object-oriented languages, it is passed to the methods as a hidden parameter.

Q-88: What Are The Different Methods To Copy An Object In Python?
There are two ways to copy objects in Python.

copy.copy() function
It makes a copy of the file from source to destination.
It’ll return a shallow copy of the parameter.
copy.deepcopy() function
It also produces the copy of an object from the source to destination.
It’ll return a deep copy of the parameter that you can pass to the function.
Q-89: What Is The Purpose Of Docstrings In Python?
In Python, the docstring is what we call as the docstrings. It sets a process of recording Python functions, modules, and classes.

Q-90: Which Python Function Will You Use To Convert A Number To A String?
For converting a number into a string, you can use the built-in function str().  If you want an octal or hexadecimal representation, use the inbuilt function oct() or hex().

💡 Also Check.

Python Multithreading Quiz

Q-91: How Do You Debug A Program In Python? Is It Possible To Step Through The Python Code?
Yes, we can use the Python debugger (pdb) to debug any Python program. And if we start a program using pdb, then it let us even step through the code.

Q-92: List Down Some Of The PDB Commands For Debugging Python Programs?
Here are a few PDB commands to start debugging Python code.

Add breakpoint (b)
Resume execution (c)
Step by step debugging (s)
Move to the next line (n)
List source code (l)
Print an expression (p)
Q-93: What Is The Command To Debug A Python Program?
The following command helps run a Python program in debug mode.

$ python -m pdb python-script.py
Q-94: How Do You Monitor The Code Flow Of A Program In Python?
In Python, we can use the sys module’s settrace() method to setup trace hooks and monitor the functions inside a program.

You need to define a trace callback method and pass it to the settrace() function. The callback should specify three arguments as shown below.

import sys

def trace_calls(frame, event, arg):
    # The 'call' event occurs before a function gets executed.
    if event != 'call':
        return
    # Next, inspect the frame data and print information.
    print 'Function name=%s, line num=%s' % (frame.f_code.co_name, frame.f_lineno)
    return

def demo2():
    print 'in demo2()'

def demo1():
    print 'in demo1()'
    demo2()

sys.settrace(trace_calls)
demo1()
Q-95: Why And When Do You Use Generators In Python?
A generator in Python is a function which returns an iterable object. We can iterate on the generator object using the yield keyword. But we can only do that once because their values don’t persist in memory, they get the values on the fly.

Generators give us the ability to hold the execution of a function or a step as long as we want to keep it. However, here are a few examples where it is beneficial to use generators.

We can replace loops with generators for efficiently calculating results involving large data sets.
Generators are useful when we don’t want all the results and wish to hold back for some time.
Instead of using a callback function, we can replace it with a generator. We can write a loop inside the function doing the same thing as the callback and turns it into a generator.
Q-96: What Does The Yield Keyword Do In Python?
The yield keyword can turn any function into a generator. It works like a standard return keyword. But it’ll always return a generator object. Also, a method can have multiple calls to the yield keyword.

See the example below.

def testgen(index):
  weekdays = ['sun','mon','tue','wed','thu','fri','sat']
  yield weekdays[index]
  yield weekdays[index+1]

day = testgen(0)
print next(day), next(day)

#output: sun mon
Q-97: How To Convert A List Into Other Data Types?
Sometimes, we don’t use lists as is. Instead, we have to convert them to other types.

Turn A List Into A String.
We can use the ”.join() method which combines all elements into one and returns as a string.

weekdays = ['sun','mon','tue','wed','thu','fri','sat']
listAsString = ' '.join(weekdays)
print(listAsString)

#output: sun mon tue wed thu fri sat
Turn A List Into A Tuple.
Call Python’s tuple() function for converting a list into a tuple.

This function takes the list as its argument.

But remember, we can’t change the list after turning it into a tuple because it becomes immutable.

weekdays = ['sun','mon','tue','wed','thu','fri','sat']
listAsTuple = tuple(weekdays)
print(listAsTuple)

#output: ('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat')
Turn A List Into A Set.
Converting a list to a set poses two side-effects.

Set doesn’t allow duplicate entries so that the conversion will remove any such item.
A set is an ordered collection, so the order of list items would also change.
However, we can use the set() function to convert a list into a Set.

weekdays = ['sun','mon','tue','wed','thu','fri','sat','sun','tue']
listAsSet = set(weekdays)
print(listAsSet)

#output: set(['wed', 'sun', 'thu', 'tue', 'mon', 'fri', 'sat'])
Turn A List Into A Dictionary.
In a dictionary, each item represents a key-value pair. So converting a list isn’t as straightforward as it were for other data types.

However, we can achieve the conversion by breaking the list into a set of pairs and then call the zip() function to return them as tuples.

Passing the tuples into the dict() function would finally turn them into a dictionary.

weekdays = ['sun','mon','tue','wed','thu','fri']
listAsDict = dict(zip(weekdays[0::2], weekdays[1::2]))
print(listAsDict)

#output: {'sun': 'mon', 'thu': 'fri', 'tue': 'wed'}
Q-98: How Do You Count The Occurrences Of Each Item Present In The List Without Explicitly Mentioning Them?
Unlike sets, lists can have items with the same values.

In Python, the list has a count() function which returns the occurrences of a particular item.

Count The Occurrences Of An Individual Item.
weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
print(weekdays.count('mon'))

#output: 3
Count The Occurrences Of Each Item In The List.
We’ll use the list comprehension along with the count() method. It’ll print the frequency of each of the items.

weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
print([[x,weekdays.count(x)] for x in set(weekdays)])

#output: [['wed', 1], ['sun', 2], ['thu', 1], ['tue', 1], ['mon', 3], ['fri', 1]]
Q-99: What Is NumPy And How Is It Better Than A List In Python?
NumPy is a Python package for scientific computing which can deal with large data sizes. It includes a powerful N-dimensional array object and a set of advanced functions.

Also, the NumPy arrays are superior to the built-in lists. There are a no. of reasons for this.

NumPy arrays are more compact than lists.
Reading and writing items is faster with NumPy.
Using NumPy is more convenient than to the standard list.
NumPy arrays are more efficient as they augment the functionality of lists in Python.
Q-100: What Are Different Ways To Create An Empty NumPy Array In Python?
There are two methods which we can apply to create empty NumPy arrays.

The First Method To Create An Empty Array.
import numpy
numpy.array([])
The Second Method To Create An Empty Array.
# Make an empty NumPy array
numpy.empty(shape=(0,0))
Summary – Essential Python Interview Questions


















These questions are generally asked in HR round of interview. 
Most of the question asked in HR round is analyze your personality and try to find if you will be fit in the particular organization. 
As others have rightly suggested that answers of these are quite subjective to  your personal experience. 
I will give you an idea what the interviewer is expecting in the answer.
First question ask about a moment of proud. 
Interviewer is looking what are area of your your life where you took pride in your achievement. 
If it is something which is significant in the real world  and made by you, than it projects you as the builder of things.
Second one asks about failures. 
This is not about failures but how you overcome them. 
You have to relate this with scenario where you were not succeeding for a quite some time. 
Than you took help of someone or researched the subject and tried once more. 
Your story of success.
Third one is again about roadblock and how you rammed over them. 
However this time interviewer ask something interesting. 
So this time it need not to be technology centric problem like the interesting bug you were able to fix in the production server while nobody had clue about it.
Fourth one is about communication. 
How much you can simplify complex machine like modem/router so that the 8 year old can understand. 
You should be able to make him understand the basic functionality of the device without dwelling in to detail. 
Try to relate modem as simple device which he already know.
Fifth can be joke question or serious question. 
When ever you are not clear about the question always ask for more detail. 
Ask interviewer if he/she is it mode of transport or the reason you want to join the Apple.  
Tell them accordingly .

















This article will help prepare you for your upcoming interview with Apple. 
We’re going to start with some basic information about Apple to get you more familiar with the company itself. 
Then, we’ll segue into a list of common Apple interview questions. 
Each of the nine total Apple interview questions will be paired with an answer that you can modify and use during your own Apple interview. 
At the end of the article, you’ll find some general tips about interviewing at Apple.

About Apple
Apple is a technology company headquartered out of California. 
They design and sell consumer electronics, software, and several online services. 
They employ almost 125,000 people throughout the world and operate around 500 retail locations.

As for Apple employees, they receive a generous benefits package that includes a 401k plan with company match, a hefty employee discount, a health insurance plan, paid time off, and education assistance. 
Apple has retained a good position on Glassdoor’s list of “Best Places to Work” since 2009.

Apple Job Interview Questions & Answers
These are some of the Apple interview questions you’re most likely to be asked on interview day for the following job positions: Specialist, (all specializations), At-Home Advisor, and Software Engineer. 
The three of these positions represent the majority of job openings at Apple. To get the most out of these Apple interview questions, practice them out loud with a friend multiple times and have your answers prepared before attending your interview.

1.) Specialist Interview Questions & Answers
Q1: “Tell me about a time you had to deal with a difficult customer.”
A1: “At my last job, many of my coworkers would get frustrated because of the number of “difficult customers.” 
I could see that the issue was stemming from one of our core policies, which was lengthy and difficult to explain. 
What I did was to rewrite the policy in a more concise, jargon-free paragraph. Once finished, I delivered it to my manager.

She was able to get it approved as the new official policy and customers found it much easier to understand. 
Difficult customers have usually experienced some form of miscommunication. 
Most people don’t attempt outright to be difficult. 
Approaching the situation without allowing yourself to feel personally attacked is the key to diffusing difficult customer situations.”

Q2: “What does excellent customer service look like?”
A2: “Providing great customer service takes workers who are passionate about their job and dedicated to their organization. 
You’ll need to make the customer feel welcome as soon as they walk through the doors of your store. 
You’ll need to establish rapport with them to get them talking and discover what their needs are. 
Then, help them find what they’re looking for or resolve their issue. 
Doing this efficiently and with friendly service and a smile equates to great customer service.”

Q3: “Tell me about a time you were overwhelmed with projects. 
How did you deal with the situation?”
A3: “When I took on a trainer position for my most recent employer, I stepped into a position that was much-needed but didn’t previously exist. 
Not only did I have to develop training materials for new hires, but I also had to create a method of tracking their progress as I was tasked with the responsibility of training every employee.

Needless to say, I was overwhelmed. 
I tackled the project by breaking it down into parts and prioritizing them. 
I only worked on one component at a time before moving onto the next item in order of importance. 
Once I had my strategy laid out on paper, I could start working.”

2.) At-Home Advisor Interview Questions & Answers
Q1: “How would you define the word ’empathy’?”
A1: “Being aware of other peoples’ feelings and responding to their opinions in a way that makes them feel heard and cared about. 
Empathy is central to any customer-facing position because the job is all about making the customer happy and encouraging the customer to continue use of the product or service.”

Q2: “How would you resolve the situation if a customer had their phone connected to a wireless speaker and now it will not connect?”
A2: “First, I would have them make sure Bluetooth is turned on. 
Then, I’d find out what pairing process the device uses and check for compatibility between the devices. 
I would make sure both devices are in discoverable mode, that they’re within range of each other, and that any likely interferers are turned off. 
If none of this was working, I’d have the power the devices off and on again, charge them, and have them delete the speaker from their phone and rediscover it.”

Q3: “What would you do if you started your workday and your computer wouldn’t turn on?”
A3: “If there isn’t a protocol for this kind of situation, I would notify my superior of the issue and troubleshoot the computer as quickly as possible. Upon discovering the issue, I would update my superior and let them know that I’m back up and running. In the event that my superior would allow me to use a personal Mac to go online, I would start making support calls with my own computer. I would work on troubleshooting the Apple-issued computer later in the day, providing an update after resolving the issue.”

3.) Software Engineer Interview Questions & Answers
Q1: “What experience do you have with iOS development?”
A1: Go into detail about the most relevant projects you’ve built for iOS. Explain the process you used to build each project or app and talk about what you learned from the build. Talk about your years of experience using iOS and highlight any significant challenges you overcame while developing your projects. If possible, show them to your interviewer and give demos.

Q2: “Why do you want to work for Apple?”
A2: “Apple is one of the only companies that are consistently changing how technology fits into our daily lives. To be a part of that and to be able to help create products that make people’s lives easier would be a once-in-a-lifetime opportunity.”

Q3: “How do you typically make yourself familiar with a new, large codebase?”
A3: “I like to start out reading about an overview of the technology and then dive into working with it. Setting myself up with a good IDE is important to me. I’ll focus first on the system’s high-level structure and then start gathering a deeper understanding of the codebase by finding a particular part of the application I’m working with and tracking it through the code. Identifying the use cases of the product and identifying design patterns used in the code is extremely helpful.”

Apple Job Interview Tips
Be personable and put just as much thought into your tone as you put into your answers
Apple is interested in gauging the way that you speak, think, and act almost just as much as your technical knowledge. Many positions at Apple require that you’re able to work in a team cohesively or that you’re able to provide excellent customer service.

During your Apple interview, remain conscious of your tone, your expression, and your body language. You should stay upbeat and confident throughout the duration of the interview for the best results.

Get familiar with basic technology and with Apple’s products
Be able to explain the differences between Apple’s most popular computers and phones. You should also become familiar with popular computer hardware. If Apple is releasing a new product or has recently released one, get to know that product inside and out. Product-specific knowledge will likely come up in several of your Apple interview questions. Be able to answer the following questions.

What is RAM?
What is the difference between an SSD and an HDD?
How do you define a processor?
Explain some major differences between Android and iOS.
You might also be interested in:

The most popular Lowe’s interview questions.
Our hand-picked collection of Amazon interview questions.
Other technical interview questions.
Conclusion
Our goal is to help you feel prepared for you Apple interview. The most important step to take during the interview preparation period is to ensure that you’ve practiced your answers. Do not stop until you feel confident in your ability to impress the interviewer and get hired. For more information about what it’s like to work at Apple, visit their Apple Glassdoor profile or take a look at the official Apple website. View available job positions at Apple on their site as well. Do you know about any additional Apple interview questions? Share them in the comments and let’s start a discussion about the Apple interview process.